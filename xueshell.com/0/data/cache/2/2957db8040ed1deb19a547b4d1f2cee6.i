a:153:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"shell不同文件函数调用";i:1;i:2;i:2;i:2;}i:2;i:2;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:321:"说起函数调用，相信大家也不会陌生，然而对于初学Shell的我来说，Shell中函数调用方式却有点让我不太习惯，自己也走了不少的弯路，因为传递参数时出了一个很“自然”的错误，也让我吃了不少的苦头，所以总结一下Shell中函数的调用方法。";}i:2;i:43;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:364;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:366;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"一、Shell中函数的定义";i:1;i:3;i:2;i:366;}i:2;i:366;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:366;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:366;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:152:"为了方便程序和管理和模块化并减少代码的重复，函数的确是一个好东西。而Shell中函数的定义有两种方法，如下：";}i:2;i:404;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:562;}i:12;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:36:"
function fname()
{
statements；
}
";i:1;N;i:2;N;}i:2;i:562;}i:13;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:562;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"或";}i:2;i:607;}i:15;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:616;}i:16;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:25:"
fname()
{
statements;
}
";i:1;N;i:2;N;}i:2;i:616;}i:17;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:616;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:"注意，()内是没有参数的，它并不像C语言那样，在()里可以有参数。";}i:2;i:650;}i:19;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:739;}i:20;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:739;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:"那大家可能就郁闷了，函数调用或多或少总是会需要一些参数，那么这些参数要怎么传递进来呢？
";}i:2;i:741;}i:22;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#800000";}i:2;i:1;i:3;s:12:"<fc #800000>";}i:2;i:871;}i:23;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:117:"其实参数传递方式为：fname；（不需要传递参数）或fname agr1 arg2（需要传递两个参数）；
";}i:2;i:3;i:3;s:117:"其实参数传递方式为：fname；（不需要传递参数）或fname agr1 arg2（需要传递两个参数）；
";}i:2;i:883;}i:24;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:1000;}i:25;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1005;}i:26;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1007;}i:27;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"二、自定义函数的例子";i:1;i:4;i:2;i:1007;}i:2;i:1007;}i:28;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:1007;}i:29;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1007;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:364:"不知道大家的情况如何，反正一开始我就觉得很别扭，因为在C语言中，例如我定义一个函数int cmp（int a, int b)，那么我就会在函数中使用到函数头中声明的变量a和b，而在Shell中却没有定义参数，那我的函数又需要用到这两个参数，怎么办好呢？下面就用一个例子来说明好了。";}i:2;i:1044;}i:31;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1408;}i:32;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:320:"  #! /bin/bash  
  # Filename:LoopPrint.sh  
    
  function LoopPrint()  
  {  
      count=0;  
      while [ $count -lt $1 ];  
      do  
      echo $count;  
      let ++count;  
      sleep 1;  
      done  
      return 0;  
  }  
    
  read -p "Please input the times of print you want: " n;  
  LoopPrint $n;  ";}i:2;i:1411;}i:33;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1411;}i:34;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:231:"先来说说这个程序的功能吧，就是输入一个数字n，然后从0开始每隔1秒输入一个数字，直到输出n-1为止。首先，程序会要求你输入一个数学，然后调用函数来进行输出的功能。";}i:2;i:1769;}i:35;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2000;}i:36;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2000;}i:37;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:271:"注意注释1的那一句，里面有一个变量$1，大家应该还记得调用函数时参数的传递方式，即fname agr1 arg2，这里的$1就是表示第一个参数，依此类推，$2就是第二个参数，$3就是第3个参数，$n就是表示第n个参数。";}i:2;i:2003;}i:38;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2274;}i:39;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2274;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:"所以$1就是变量n的值。这样说大家懂了吧！";}i:2;i:2276;}i:41;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2333;}i:42;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2333;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"补充一下，就是：";}i:2;i:2335;}i:44;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2359;}i:45;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2359;}i:46;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2359;}i:47;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2359;}i:48;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" $0：是脚本本身的名字；";}i:2;i:2363;}i:49;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2396;}i:50;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2396;}i:51;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2396;}i:52;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2396;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" $#：是传给脚本的参数个数；";}i:2;i:2400;}i:54;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2439;}i:55;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2439;}i:56;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2439;}i:57;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2439;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:" $@：是传给脚本的所有参数的列表，即被扩展为";}i:2;i:2443;}i:59;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2506;}i:60;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$1";}i:2;i:2507;}i:61;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2509;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:2510;}i:63;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2511;}i:64;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$2";}i:2;i:2512;}i:65;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2514;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:2515;}i:67;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2516;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$3";}i:2;i:2517;}i:69;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2519;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"等；";}i:2;i:2520;}i:71;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2526;}i:72;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2526;}i:73;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2526;}i:74;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2526;}i:75;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:" $*：是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个，即被扩展成";}i:2;i:2530;}i:76;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2660;}i:77;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"$1c$2c$3";}i:2;i:2661;}i:78;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2669;}i:79;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"，其中c是IFS的第一个字符；";}i:2;i:2670;}i:80;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2707;}i:81;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2707;}i:82;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2707;}i:83;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2707;}i:84;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" $$：是脚本运行的当前进程ID号；";}i:2;i:2711;}i:85;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2755;}i:86;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2755;}i:87;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2755;}i:88;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2755;}i:89;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" $?：是显示最后命令的退出状态，0表示没有错误，其他表示有错误；";}i:2;i:2759;}i:90;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2850;}i:91;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2850;}i:92;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2850;}i:93;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2850;}i:94;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:604:"特别注意，传递参数时，（这个例子中）一定要写成LoopPrint $n;而不能写成LoopPrint n。为什么？例如你输入的是20，则n的值（$n）为20，前者表示的是把n的值，即20传递给函数LoopPrint，而后者则表示把字符n传递给函数LoopPrint。这点与在静态语言中的函数参数传递是很不同的，因为在Shell中变量的使用并不需要先定义，所以要使用变量，让Shell知道它是一个变量，并要传递它的值时，就是用$n，而不能直接用n，否则只把n当作一个字符来处理，而不是一个变量。";}i:2;i:2852;}i:95;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3456;}i:96;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3458;}i:97;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"三、作用域问题";i:1;i:4;i:2;i:3458;}i:2;i:3458;}i:98;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:3458;}i:99;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3458;}i:100;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:790:"函数的作用域与C/C++语言中的作用约束是一样的，函数的定义一定要出现在函数的调用语句之前，但是有一点跟C/C++中不一样的就是变量的作用域问题，经过本人的试验，在注释1的语句改为while [ $count -lt $n ];也是可行的，即函数可以使用本文件中出现的任何变量，但是本人还是建议使用上面例子中的方法，即while [ $count -lt $1 ]，并且不要随意使用函数中的变量之外的变量，因为你并不一定知道你调用函数时函数外有什么变量存在也不知道它的值是什么，也不能保证别人在使用你的函数时会传递你在函数中使用到的变量名，如这里的n，别人在使用时可能传递的就是他自己定义的变量，如Count等。";}i:2;i:3486;}i:101;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4276;}i:102;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4278;}i:103;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"shell 函数调用";i:1;i:2;i:2;i:4278;}i:2;i:4278;}i:104;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:4278;}i:105;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4278;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:194:"在代码复用及可维护性方面，函数有着巨大的优势，因此，把常用功能封装成函数是一件非常平常的事。shell脚本中，怎么定义函数及使用函数呢？";}i:2;i:4308;}i:107;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4502;}i:108;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4502;}i:109;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"函数定义：";}i:2;i:4504;}i:110;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4520;}i:111;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:162:"  # func_name 函数名    
  function func_name(){  
      #函数体内容  
  }  
  或  
  # func_name 函数名  
  func_name(){  
  #函数体内容  
  }  ";}i:2;i:4520;}i:112;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4520;}i:113;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:1;i:1;s:7:"#800000";}i:2;i:1;i:3;s:12:"<fc #800000>";}i:2;i:4703;}i:114;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:66:"函数调用：

func_name parm

函数体中，可以通过$1 $2 ";}i:2;i:3;i:3;s:66:"函数调用：

func_name parm

函数体中，可以通过$1 $2 ";}i:2;i:4715;}i:115;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:4781;}i:116;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:3;i:1;s:86:"$9接受函数调用中的变量

函数可以通过return 返回函数执行的结果";}i:2;i:3;i:3;s:86:"$9接受函数调用中的变量

函数可以通过return 返回函数执行的结果";}i:2;i:4784;}i:117;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:9:"fontcolor";i:1;a:2:{i:0;i:4;i:1;s:4:"#ff0";}i:2;i:4;i:3;s:5:"</fc>";}i:2;i:4870;}i:118;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4875;}i:119;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4875;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:"可以通过下面一个简单例子，来看下在shell脚本中怎么定义使用函数";}i:2;i:4877;}i:121;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4966;}i:122;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4966;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"1、在/root/bin目录下新建函数文件main.fun";}i:2;i:4968;}i:124;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5019;}i:125;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5019;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"vim /root/bin/main.fun   ";}i:2;i:5021;}i:127;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5046;}i:128;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5046;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"2、在main.fun文件中编写函数findit内容";}i:2;i:5048;}i:130;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5097;}i:131;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:393:"  #!/bin/sh  
  function findit(){          
      if [ $# -lt 1 ] ; then  #判断函数参数个数                 
       echo "Usage: findit filename"                 
       return 1          
      fi        
      for loop in $@ #遍历调用函数的参数            
          do  
                      find $HOME -name $loop -print  
              done      
      return 0  
  }  ";}i:2;i:5097;}i:132;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5097;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"3、Shell中载入函数文件/root/bin/main.fun";}i:2;i:5517;}i:134;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5565;}i:135;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5565;}i:136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:". /root/bin/main.fun  ";}i:2;i:5567;}i:137;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5589;}i:138;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5589;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"4、检查载入文件";}i:2;i:5591;}i:140;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5613;}i:141;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5613;}i:142;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"set   ";}i:2;i:5615;}i:143;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5621;}i:144;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5621;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"set命令将在shell中显示所有的载入函数";}i:2;i:5623;}i:146;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5673;}i:147;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5673;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"5、调用函数";}i:2;i:5675;}i:149;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5692;}i:150;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:66:"  findit mysql php #在home 目录查找文件mysql 和文件php  ";}i:2;i:5692;}i:151;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5762;}i:152;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:5762;}}