
<h3 class="sectionedit1" id="提交范围">提交范围</h3>
<div class="level3">

<p>
现在你已经可以指明单次的提交，让我们来看看怎样指明一定范围的提交。这在你管理分支的时候尤显重要——如果你有很多分支，你可以指明范围来圈定一些问题的答案，比如：“这个分支上我有哪些工作还没合并到主分支的？”
</p>

</div>
<!-- EDIT1 SECTION "提交范围" [4-333] -->
<h3 class="sectionedit2" id="双点">双点</h3>
<div class="level3">

<p>
 你可以用”..”来指两个提交(commit)之间的区间. 下面的命令会给出你在”7b593b5” 和”51bea1”之间除了”7b593b5外”的所有提交(commit)(注意:51bea1是最近的提交).
</p>

<p>
7b593b5..51bea1
</p>

<p>
这会包括所有 从 7b593b开始的提交(commit). 译者注: 相当于 7b593b..HEAD
</p>

<p>
7b593b.. 
</p>

<p>
你想要查看你的试验分支上哪些没有被提交到主分支，那么你就可以使用 master..experiment 来让 Git 显示这些提交的日志——这句话的意思是“所有可从experiment分支中获得而不能从master分支中获得的提交”。为了使例子简单明了，我使用了图标中提交对象的字母来代替真实日志的输出，所以会显示：
</p>
<pre class="code">$ git log master..experiment
D
C</pre>

<p>
另一方面，如果你想看相反的——所有在 master 而不在 experiment 中的分支——你可以交换分支的名字。experiment..master 显示所有可在 master 获得而在 experiment 中不能的提交：
</p>
<pre class="code">$ git log experiment..master
F
E</pre>

<p>
这在你想保持 experiment 分支最新和预览你将合并的提交的时候特别有用。这个语法的另一种常见用途是查看你将把什么推送到远程：
</p>
<pre class="code">$ git log origin/master..HEAD</pre>

<p>
这条命令显示任何在你当前分支上而不在远程origin 上的提交。如果你运行 git push 并且的你的当前分支正在跟踪 origin/master，被git log origin/master..HEAD 列出的提交就是将被传输到服务器上的提交。 你也可以留空语法中的一边来让 Git 来假定它是 HEAD。例如，输入 git log origin/master.. 将得到和上面的例子一样的结果—— Git 使用 HEAD 来代替不存在的一边。
</p>

<p>
<a href="/beike.com/0/lib/exe/detail.php?id=gitcommand%3Agit_version_range&amp;media=gitcommand:git-diff-help.png" class="media" title="gitcommand:git-diff-help.png"><img src="/beike.com/0/lib/exe/fetch.php?w=500&amp;tok=4e3d81&amp;media=gitcommand:git-diff-help.png" class="media" title="git_diff" alt="git_diff" width="500" /></a>
<a href="/beike.com/0/lib/exe/detail.php?id=gitcommand%3Agit_version_range&amp;media=gitcommand:git-log-for-upload-smaller.png" class="media" title="gitcommand:git-log-for-upload-smaller.png"><img src="/beike.com/0/lib/exe/fetch.php?w=500&amp;tok=244625&amp;media=gitcommand:git-log-for-upload-smaller.png" class="media" title="git_log" alt="git_log" width="500" /></a>
</p>

</div>
<!-- EDIT2 SECTION "双点" [334-] -->