
<h2 class="sectionedit1" id="如何识别git中的一次提交">如何识别git中的一次提交</h2>
<div class="level2">

<p>
版本控制中准确标识出某次变更是基本功能。比如，创建分支时，要选择某次提交点作为分叉点; 输入两次版本号才能比较并行开发的代码；修改git提交的历史，也需要先收集提交版本记录。git里，你确定一次提交既可以用明确的标识，也可以用相对的关系来标识。
</p>

<p>
唯一的，40位十六进制的SHA1值是明确的标识，HEAD，在git里指的是最近一次提交，它是隐式应用。很对时候，这种方式更方便。Git提供了很多种这种隐式应用来标识一次提交。
</p>

<p>
例如，在分布式环境的不同仓库和同事讨论一次变更提交，当让需要一个明确的版本号，在不同仓库都能明确标识变更。但是在自己的仓库，指明一个提交，就可以用简单的相对名字。在git里，哈希值是最严格的绝对命名，可以在宇宙中中指明一次变更。
</p>

</div>
<!-- EDIT1 SECTION "如何识别git中的一次提交" [1-967] -->
<h3 class="sectionedit2" id="绝对命名方式">绝对命名方式</h3>
<div class="level3">

<p>
HASH 标识是严格的绝对命名释放，唯一地宇宙中指向一次变更。HASH值相同，他们的内容就是一致的。
</p>
<pre class="code">    $ git log -1 --pretty=oneline HEAD    
     1fbb58b4153e90eda08c2b022ee32d90729582e6 Merge git://repo.or.cz/git-gui     
     
    $ git log -1 --pretty=oneline 1fbb     
    error: short SHA1 1fbb is ambiguous.     
    fatal: ambiguous argument &#039;1fbb&#039;: unknown revision or path         
    not in the working tree.
    Use &#039;--&#039; to separate paths from revisions     
                                   
    $ git log -1 --pretty=oneline 1fbb58
    1fbb58b4153e90eda08c2b022ee32d90729582e6 Merge git://repo.or.cz/git-gui 
    
 </pre>

<p>
另外，tag名字我们一般也任务时绝对名称，尽管tag名称不能在宇宙中使用，但每个tag名称有一个唯一的HASH1值。
</p>

</div>
<!-- EDIT2 SECTION "绝对命名方式" [968-1827] -->
<h3 class="sectionedit3" id="refs_和_symrefs">refs 和 symrefs</h3>
<div class="level3">

<p>
ref（reference）是Git对象仓库内一个对象的哈希值。ref可能指向多个Git对象，通常指向一次提交对象。symref（symbolic reference）是直接指向git对象的一个名称，它任然是一个ref。 本地不同任务的分支，远端协作的分支，标签名都是 ref。每个 symrefs 有一个独有的，以 refs/开头的名字。每一个都被分级存放在 .git/refs/ 目录中。基本上refs有3个不同的命名空间：
refs/heads/ref   标识本地分支；
refs/remotes/ref 标识远端协作分支；
refs/tags/ref    标识所有标签
</p>

<p>
例如，本地有一个叫dev的分支，它简称是： refs/heads/dev。 远端协作分支可以在 refs/remotes/ 内找到它们的名字。 所以 origin/master 对应着 refs/remotes/origin/master.像v2.6.23 这样的标签， 它的SHA1值存放在 refs/tags/v2.6.23
你可以用完整的 ref 名称，也可以用它的缩写，如果分支和标签的名称相同，Git使用如下的列表来匹配。
</p>

<p>
     .git/ref
</p>
<pre class="code">   .git/refs/ref     
   .git/refs/tags/ref     
   .git/refs/heads/ref     
   .git/refs/remotes/ref     
   .git/refs/remotes/ref/HEAD
   </pre>

<p>
Git 里有几个特殊名字的 symrefs，他们都有专门的意义。他们都可以用来标识一次变更的提交。
</p>

<p>
<span style="color: #008080">HEAD</span>
</p>

<p>
HEAD 指的是当前分支的最新一次提交。切换分支后，它指的是新分支最新一次变更提交。
</p>

<p>
<span style="color: #008080">ORIG_HEAD</span>
</p>

<p>
执行合并(merge）和撤销(reset)操作后，合并或者撤销前的那次全量提交被标识在这里。 你可以用 ORIG_HEAD 去覆盖或者回退本分之先前的状态。
</p>

<p>
<span style="color: #008080">FETCH_HEAD</span>
</p>

<p>
当和远端仓库协作开发时，git 取回所有分支的更新，并存放在 .git/FETCH_HEAD。 FETCH_HEAD是快捷名称，它对应的是某分支执行fetch后，更新后的分支名称。 使用这个 symref，你可以找到git fetch后的分支的最新版。 FETCH_HEAD被合并操作覆盖，形成了MERGE_HEAD.
</p>

<p>
<span style="color: #008080">MERGE_HEAD</span>
</p>

<p>
当执行merger操作，.git/MERGE_HEAD里列出了需要merge进来的那个分支的最近的commit sha1 。
</p>

</div>
<!-- EDIT3 SECTION "refs 和 symrefs" [1828-4007] -->
<h3 class="sectionedit4" id="相对命名">相对命名</h3>
<div class="level3">

<p>
Git 提供了用”^”和“~”的符号标识末次全量提交的快照。你可能见过master和master^。比如master^指的是到master分支上的倒数第二次提交。
</p>

</div>
<!-- EDIT4 SECTION "相对命名" [4008-] -->