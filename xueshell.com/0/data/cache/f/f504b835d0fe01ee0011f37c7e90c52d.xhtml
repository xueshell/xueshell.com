
<h1 class="sectionedit1" id="中央集中式开发流程">中央集中式开发流程</h1>
<div class="level1">

<p>
<a href="/xueshell.com/0/lib/exe/detail.php?id=git_branch_model%3Agit-workflow-central&amp;media=git_branch_model:git-workflow-svn.png" class="media" title="git_branch_model:git-workflow-svn.png"><img src="/xueshell.com/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-svn.png" class="mediacenter" title="Git Workflows: SVN-style Workflow" alt="Git Workflows: SVN-style Workflow" /></a>
</p>

<p>
<span style="color: #0000EE">对于想体会git新特性的开发团队，迁移工作似乎很让人气馁。那么你可以像SVN的工作流程一样使用git，这样就可以使用git的新功能而不必调整现有的工作流程。</span>
</p>

<p>
<span style="color: #0000EE">尽管如此，git还是比svn有2个好处：<br/>

1、工程师在本地有整个项目的代码，隔离干扰，可以独立完成开发，直达合适的时候才提交代码。</span>
</p>

<p>
<span style="color: #0000EE">
2、利用git强大的分支与合并功能。方便地合并代码和交换变更。</span>
</p>

</div>
<!-- EDIT1 SECTION "中央集中式开发流程" [1-656] -->
<h2 class="sectionedit2" id="流程描述">流程描述</h2>
<div class="level2">

<p>
<span style="color: #0000EE">
就像SVN，中央集中式工作流程用一个统一仓库作为项目的唯一出入口。 SVN的主干叫trunk， git使用master分支开发代码。 这种模式除了mater不建立其他分支。</span>
</p>

<p>
<span style="color: #0000EE">首先开发者克隆项目的中央仓库。 开发者下载整个项目库，然后，就像svn一样，工程师编辑并提交代码；当然，新提交存在本地仓库。开发者能够在一个合适的时节才去提交远程仓库。</span>
</p>

<p>
<span style="color: #0000EE">最后，向远程中央仓库提交本地变更。开发者需要”push”本地master上的代码到中央仓库的master上。这步相当于“svn commit”，</span>
</p>

<p>
<a href="/xueshell.com/0/lib/exe/detail.php?id=git_branch_model%3Agit-workflow-central&amp;media=git_branch_model:git-workflow-svn-push-local.png" class="media" title="git_branch_model:git-workflow-svn-push-local.png"><img src="/xueshell.com/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-svn-push-local.png" class="medialeft" alt="" /></a>
</p>

</div>
<!-- EDIT2 SECTION "流程描述" [657-1406] -->
<h3 class="sectionedit3" id="解决冲突">解决冲突</h3>
<div class="level3">

<p>
<span style="color: #0000EE">项目中央仓库一般算作官方的代码库了，所以要认真和严肃点。本地开发者修改完代码并提交回中央仓库前，相同代码被其他人修改并提交回中央仓库。git就不允许提交本地变更到中央，你需要执行rebase，防止破坏他人的提交。</span>
</p>

<p>
<span style="color: #0000EE">该开发者需要先从中央库取回其他人的成果，可以查看和比较。然后rebase自己的变更。这等于说， 我想增加变更”。这使得仓库的历史是线性的，就像传统的svn的工作流。</span>
</p>

<p>
<span style="color: #0000EE">如果本地变更直接与上游提交冲突，git将暂停rebase过程，并让工程师手动解决冲突。git 比较高级的是用 git status 和 git add 的命令解决合并冲突。 很方便开发者合并冲突。如果合并陷入混乱，git可以很容易中断整个合并，，你可以重新开始合并操作。</span>
</p>

</div>
<!-- EDIT3 SECTION "解决冲突" [1407-2346] -->
<h2 class="sectionedit4" id="实例演示">实例演示</h2>
<div class="level2">

<p>
<span style="color: #0000EE">让我们一步步地演示如何使用这个流程吧。看看两个工程师 John和Mary如何独自在本地仓库完成功能开发，并且通过中央仓库完成并行协作。</span>
</p>

</div>
<!-- EDIT4 SECTION "实例演示" [2347-2576] -->
<h3 class="sectionedit5" id="初始化中央项目仓库">初始化中央项目仓库</h3>
<div class="level3">

<p>
<a href="/xueshell.com/0/lib/exe/detail.php?id=git_branch_model%3Agit-workflow-central&amp;media=git_branch_model:git-workflow-svn-initialize.png" class="media" title="git_branch_model:git-workflow-svn-initialize.png"><img src="/xueshell.com/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-svn-initialize.png" class="mediacenter" title="Git Workflows: Initialize Central Bare Repository" alt="Git Workflows: Initialize Central Bare Repository" /></a>
</p>

<p>
首先，现在服务器上创建一个项目中央仓库。 如果是新项目，你初始化一个空仓库。否则，就import一个已经存在的Git或者SVN仓库。
</p>

<p>
创建中央仓库，需用bare模式。（这种git仓库没有工作目录），创建方法如下：<br/>

</p>
<pre class="code">ssh user@host
git init --bare /path/to/repo.git</pre>

</div>
<!-- EDIT5 SECTION "初始化中央项目仓库" [2577-3073] -->
<h3 class="sectionedit6" id="项目成员克隆中央仓库">项目成员克隆中央仓库</h3>
<div class="level3">

<p>
<a href="/xueshell.com/0/lib/exe/detail.php?id=git_branch_model%3Agit-workflow-central&amp;media=git_branch_model:git-workflow-svn-clone.png" class="media" title="git_branch_model:git-workflow-svn-clone.png"><img src="/xueshell.com/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-svn-clone.png" class="mediacenter" title="Git Workflows: Clone Central Repo" alt="Git Workflows: Clone Central Repo" /></a>
<span style="color: #0000EE">
接下来，项目组成员在本地克隆整个项目仓库. <br/>

项目成员创建本地库。
从项目中央库克隆的命令如下:</span> <br/>

</p>
<pre class="code">  
git clone ssh://user@host/path/to/repo.git</pre>

<p>
<span style="color: #0000EE">本地克隆中央库，Git自动在本地创建一个叫origin简短名称，origin标识了远端仓库，你将来通过这个名称与远端交互</span>
</p>

</div>
<!-- EDIT6 SECTION "项目成员克隆中央仓库" [3074-3595] -->
<h3 class="sectionedit7" id="john_在本地开发新功能">John 在本地开发新功能</h3>
<div class="level3">

<p>
<a href="/xueshell.com/0/lib/exe/detail.php?id=git_branch_model%3Agit-workflow-central&amp;media=git_branch_model:git-workflow-svn-1.png" class="media" title="git_branch_model:git-workflow-svn-1.png"><img src="/xueshell.com/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-svn-1.png" class="mediacenter" title="Git Workflows: Edit Stage Commit Feature Process" alt="Git Workflows: Edit Stage Commit Feature Process" /></a>
<span style="color: #0000EE">
在本地仓库,John使用git进行日常开发：编辑；缓存；提交。
</span>
</p>
<pre class="code">git status # View the state of the repo
git add # Stage a file
git commit # Commit a file</pre>

<p>
这些动作发生在本地，重复进行，无需担心中央仓库发生了什么。
</p>

</div>
<!-- EDIT7 SECTION "John 在本地开发新功能" [3596-4023] -->
<h3 class="sectionedit8" id="mary_在本地修改她的代码">Mary 在本地修改她的代码</h3>
<div class="level3">

<p>
<a href="/xueshell.com/0/lib/exe/detail.php?id=git_branch_model%3Agit-workflow-central&amp;media=git_branch_model:git-workflow-svn-2.png" class="media" title="git_branch_model:git-workflow-svn-2.png"><img src="/xueshell.com/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-svn-2.png" class="mediacenter" title="Git Workflows: Edit Stage Commit Feature" alt="Git Workflows: Edit Stage Commit Feature" /></a>
</p>

<p>
<span style="color: #0000EE">
同时，May在她的本地仓库修改变更。用的也是同样的 编辑/缓存/提交的git流程。 像John，她也不关心中心仓库发生了什么，也不关心John在他本地仓库的变更，因为所有的本地仓库都是私有的。
 </span>
</p>

</div>
<!-- EDIT8 SECTION "Mary 在本地修改她的代码" [4024-4432] -->
<h3 class="sectionedit9" id="john_提交他的代码">John 提交他的代码</h3>
<div class="level3">

<p>
<a href="/xueshell.com/0/lib/exe/detail.php?id=git_branch_model%3Agit-workflow-central&amp;media=git_branch_model:git-workflow-svn-3.png" class="media" title="git_branch_model:git-workflow-svn-3.png"><img src="/xueshell.com/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-svn-3.png" class="mediacenter" title="Git Workflows: Publish Feature" alt="Git Workflows: Publish Feature" /></a>
</p>

<p>
<span style="color: #0000EE">John完成了编码，他想把代码提交中央项目库，可以执行如下命令：</span>
</p>
<pre class="code">git push origin master</pre>

<p>
Remember that origin is the remote connection to the central repository that Git created when John cloned it. The master argument tells Git to try to make the origin’s master branch look like his local master branch. Since the central repository hasn’t been updated since John cloned it, this won’t result in any conflicts and the push will work as expected. 
</p>

<p>
<span style="color: #0000EE">origin 是执行clone时，系统默认的远端仓库的简称，它指向远端中心仓库的master分支。当Git对origin操作，就像本地处理master一样处理远端仓库。  在John 克隆中央仓库，在本地修改后，还没人提交过新代码，所以John 的push动作不会有冲突，而且提交动作会顺利执行。</span>
</p>

</div>
<!-- EDIT9 SECTION "John 提交他的代码" [4433-5428] -->
<h3 class="sectionedit10" id="mary_尝试提交她的代码">Mary 尝试提交她的代码</h3>
<div class="level3">

<p>
 <a href="/xueshell.com/0/lib/exe/detail.php?id=git_branch_model%3Agit-workflow-central&amp;media=git_branch_model:git-workflow-svn-4.png" class="media" title="git_branch_model:git-workflow-svn-4.png"><img src="/xueshell.com/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-svn-4.png" class="mediacenter" title=" Git Workflows: Push Command Error" alt=" Git Workflows: Push Command Error" /></a>
</p>

<p>
<span style="color: #0000EE">在John成功向中央项目仓库提交他的变更后，Mary 也要向项目库提交代码，她是这样做的：</span>
</p>
<pre class="code">git push origin master</pre>

<p>
<span style="color: #0000EE">然而，在她之前，John已经提交变更，修改了master。Mary本地的Git历史已经和中央项目库分叉了，Git 拒绝合并，并给出了详细的出错信息：</span>
</p>
<pre class="code">error: failed to push some refs to &#039;/path/to/repo.git&#039;
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. &#039;git pull&#039;)
hint: before pushing again.
hint: See the &#039;Note about fast-forwards&#039; in &#039;git push --help&#039; for details.</pre>

<p>
<span style="color: #0000EE">拒绝的目的是防止Mary 覆盖该其他人已有的提交。 Mary 需要首先从中央项目库中取回（pull)John的变更，合并到自己的本地库中。  </span>
</p>

</div>
<!-- EDIT10 SECTION "Mary 尝试提交她的代码" [5429-6444] -->
<h3 class="sectionedit11" id="mary_衍合_变基_john的变更">Mary 衍合（变基）John的变更</h3>
<div class="level3">

<p>
 <a href="/xueshell.com/0/lib/exe/detail.php?id=git_branch_model%3Agit-workflow-central&amp;media=git_branch_model:git-workflow-svn-5.png" class="media" title="git_branch_model:git-workflow-svn-5.png"><img src="/xueshell.com/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-svn-5.png" class="mediacenter" title="Git Workflows: Git Pull Rebase" alt="Git Workflows: Git Pull Rebase" /></a>
</p>

<p>
<span style="color: #0000EE">Mary 可以用 git pull 合并中心仓库变更到本地库。 这个有点像 svn 的update 去合并最新变更到本地目录。执行git pull时，git先从远端仓库获得John的变更内容，然后在本地和Mary的变更合并：</span>
</p>
<pre class="code">git pull --rebase origin master</pre>

<p>
The –rebase option tells Git to move all of Mary’s commits to the tip of the master branch after synchronising it with the changes from the central repository, as shown below:
</p>

<p>
<span style="color: #0000EE">The –rebase选项告诉git在同步本地和中心仓库的提交后，移动所有Mary的提交到主干分支的顶端。</span>
</p>

<p>
<a href="/xueshell.com/0/lib/exe/detail.php?id=git_branch_model%3Agit-workflow-central&amp;media=git_branch_model:git-workflow-svn-6.png" class="media" title="git_branch_model:git-workflow-svn-6.png"><img src="/xueshell.com/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-svn-6.png" class="mediacenter" alt="" /></a>
</p>

<p>
The pull would still work if you forgot this option, but you would wind up with a superfluous “merge commit” every time someone needed to synchronize with the central repository. For this workflow, it’s always better to rebase instead of generating a merge commit.
</p>

<p>
<span style="color: #0000EE">如果没有rebase选项，pull可能任然工作，那就会产生一次新的合并提交。 对于git的流程来说，用rebase合并而不是一次合并提交，会让合并历史更清晰。</span>
</p>

</div>
<!-- EDIT11 SECTION "Mary 衍合（变基）John的变更" [6445-7742] -->
<h3 class="sectionedit12" id="mary_解决合并冲突">Mary 解决合并冲突</h3>
<div class="level3">

<p>
<a href="/xueshell.com/0/lib/exe/detail.php?id=git_branch_model%3Agit-workflow-central&amp;media=git_branch_model:git-workflow-svn-7.png" class="media" title="git_branch_model:git-workflow-svn-7.png"><img src="/xueshell.com/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-svn-7.png" class="mediacenter" title="
Git Workflows: Rebasing on Commits" alt="
Git Workflows: Rebasing on Commits" /></a>
</p>

<p>
<span style="color: #0000EE"> 衍合(reabse)就是把每次本地提交都表现到主分支上。这样你能发现每次本地提交与远端主干发生了什么样的冲突，而不是在一次合并提交时，解决所有人大量的合并冲突。这样做，就把你在本地对项目的改变历史也体现在中央仓库历史上。 而且，这样可以方便地找到缺陷是生么时候带进来的。回退的时候可以只会有错误代码，无关其他代码的合并。</span>
</p>

<p>
<span style="color: #0000EE">如果Mary 和 John  开发的代码相关性不大，那么衍和(rebase)过程中产生冲突的可能性不大。如果发生了冲突，Git 会暂停衍合在出现问题的提交上，并给出相关的指示：</span>
</p>
<pre class="code">CONFLICT (content): Merge conflict in &lt;some-file&gt;</pre>

<p>
<a href="/xueshell.com/0/lib/exe/detail.php?id=git_branch_model%3Agit-workflow-central&amp;media=git_branch_model:git-workflow-svn-8.png" class="media" title="git_branch_model:git-workflow-svn-8.png"><img src="/xueshell.com/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-svn-8.png" class="mediacenter" alt="" /></a>
</p>

<p>
<span style="color: #0000EE">Git 的特点之一就是任何人都可以自己解决合并冲突。Mary 只是运行 “git status” 就可以知道合并时问题出在那里，合并失败的文件会明白的告诉你:</span>
</p>
<pre class="code"># Unmerged paths:
# (use &quot;git reset HEAD &lt;some-file&gt;...&quot; to unstage)
# (use &quot;git add/rm &lt;some-file&gt;...&quot; as appropriate to mark resolution)
#
# both modified: &lt;some-file&gt;&gt;</pre>

<p>
<span style="color: #0000EE">接着，Mary 修改文件，如果修改结果测试正确，她就会git add 这个文件，然后继续执行rebase的合并操作。</span>
</p>
<pre class="code">git add &lt;some-file&gt;
git rebase --continue &lt;/some-file&gt;</pre>

<p>
<span style="color: #0000EE">这就是全部，Git继续合并提交，直到遇见下一次合并冲突。 </span>
</p>

<p>
<span style="color: #0000EE">也许你不理解，不想继续执行这种合并。不要怕，只要执行下面的命令，你就回到刚开始执行合并时的状态：</span>
</p>
<pre class="code">git rebase --abort</pre>

</div>
<!-- EDIT12 SECTION "Mary 解决合并冲突" [7743-9617] -->
<h3 class="sectionedit13" id="mary成功向项目仓库提交代码">Mary成功向项目仓库提交代码</h3>
<div class="level3">

<p>
<a href="/xueshell.com/0/lib/exe/detail.php?id=git_branch_model%3Agit-workflow-central&amp;media=git_branch_model:git-workflow-svn-9.png" class="media" title="git_branch_model:git-workflow-svn-9.png"><img src="/xueshell.com/0/lib/exe/fetch.php?media=git_branch_model:git-workflow-svn-9.png" class="mediacenter" title="Git Workflows: Synchronize Central Repo" alt="Git Workflows: Synchronize Central Repo" /></a>
</p>

<p>
<span style="color: #0000EE">在执行完同步命令后，Mary就可以提交她的代码了，如下命令：</span>
</p>
<pre class="code">git push origin master</pre>

</div>
<!-- EDIT13 SECTION "Mary成功向项目仓库提交代码" [9618-9892] -->
<h2 class="sectionedit14" id="继续前进">继续前进</h2>
<div class="level2">

<p>
As you can see, it’s possible to replicate a traditional Subversion development environment using only a handful of Git commands. This is great for transitioning teams off of SVN, but it doesn’t leverage the distributed nature of Git.<br/>

<span style="color: #0000EE">
如上所述，只用了几个git命令，我们就实现了SVN的工作流程。这方便了熟悉SVN的团队，但是这并没有利用到Git的分布式特性。</span>
</p>

<p>
If your team is comfortable with the Centralized Workflow but wants to streamline its collaboration efforts, it&#039;s definitely worth exploring the benefits of the Feature Branch Workflow. By dedicating an isolated branch to each feature, it’s possible to initiate in-depth discussions around new additions before integrating them into the official project.
</p>

<p>
如果你的团队是舒适与集中式工作流但希望简化其合作的努力，这绝对是值得探索的特性分支工作流的好处。通过一个孤立的分支的每个特征，进行深入的讨论在新增加的前将他们整合到正式的项目是可能的。
</p>

</div>
<!-- EDIT14 SECTION "继续前进" [9893-] -->