
<h2 class="sectionedit1" id="shell编程之awk">shell编程之awk</h2>
<div class="level2">

<p>
AWK
</p>

</div>
<!-- EDIT1 SECTION "shell编程之awk" [1-34] -->
<h3 class="sectionedit2" id="一_awk基础知识">一、awk基础知识</h3>
<div class="level3">

</div>

<h4 id="awk格式">1、awk格式</h4>
<div class="level4">

<p>
awk 选项 &#039;命令体&#039; file1,file2…
选项：-F 指定分隔符，默认是空格或者tab制表符
</p>

<p>
命令体：
读前处理：BEGIN{命令…}——→页眉
所有行处理：{命令…}——→内容
读后处理：END{命令…}——→页脚
</p>

<p>
例如： <span style="color: #000000">awk -F: &#039;BEGIN{…;}{…;}end{…;}&#039; testfile</span>
</p>

</div>

<h4 id="内建变量_定址">2、内建变量、定址</h4>
<div class="level4">

<p>
<span style="color: #800000">注意：内建变量不需要用$取值</span>
</p>
<pre class="code bash">NR：<span class="kw2">awk</span>读入的所有文件的行号
FNR：<span class="kw2">awk</span>当前读入的行在当前文件的行号（如果从多个文件读取时，该变量FNR和NR就不同了）
FILENAME：文件名
NF：字段个数
FS：以变量方式指定分割符，-F是以参数方式指定分割符
OFS:指定字段输出的分割符
ORS:指定行输出的分割符
&nbsp;
<span class="kw2">awk</span> -F: <span class="st_h">'NR==3 {print $1,$7}'</span> pass      <span class="co0">#打印第3行</span>
<span class="kw2">awk</span> -F: <span class="st_h">'{print FILENAME,NR,FNR,$1,$7}'</span> pass pass2   <span class="co0">#NR是所有文件的行号，FNR是当前读入文件的行号，FILENAME文件名</span>
<span class="kw2">awk</span> -F: <span class="st_h">'{print NF,FILENAME,NR,$0}'</span> pass     <span class="co0">#打印字段数，与分割符选取有关</span>
<span class="kw2">awk</span> -F<span class="br0">&#91;</span>:<span class="sy0">/</span><span class="br0">&#93;</span> <span class="st_h">'{print NF,FILENAME,NR,$0}'</span> pass    <span class="co0">#指定多种分割符</span>
<span class="kw2">awk</span> -F<span class="br0">&#91;</span>^a-Z<span class="br0">&#93;</span> <span class="st_h">'{print NF,FILENAME,NR,$0}'</span> pass    <span class="co0">#非字母作分割符</span>
<span class="kw2">awk</span> <span class="st_h">'FS=&quot;:&quot; {print $1,$7}'</span> pass       <span class="co0">#以变量方式指定分割符</span>
<span class="kw2">awk</span> -F: <span class="st_h">'OFS=&quot;----&quot; {print $1,$7}'</span> pass      <span class="co0">#将默认的空格分割符输出变成&quot;----&quot;</span>
<span class="kw2">awk</span> -F: <span class="st_h">'ORS=&quot;|||&quot; {print $1,$7}'</span> pass      <span class="co0">#将默认的回车换行符设置为|||</span>
&nbsp;
正则定址
<span class="kw2">awk</span> -F: <span class="st_h">'/root/ {print $1,$7}'</span> pass
<span class="kw2">awk</span> -F: <span class="st_h">'/ro+/ {print $1,$7}'</span> pass <span class="co0">#awk默认支持拓展正则</span></pre>

</div>

<h4 id="awk运算符">3、awk运算符</h4>
<div class="level4">

<p>
比较运算符  
</p>
<pre class="code bash"><span class="kw2">awk</span> -F: <span class="st_h">'NR!=3 {print $1,$7}'</span> pass
<span class="kw2">awk</span> -F: <span class="st_h">'NR&lt;=3 {print $1,$7}'</span> pass
<span class="kw2">awk</span> -F: <span class="st_h">'$1~/ro/ {print $1,$7}'</span> pass       <span class="co0">#第一列匹配ro，被匹配的部分需要用&quot;&quot;或//，支持正则</span>
<span class="kw2">awk</span> -F: <span class="st_h">'$7~&quot;sh$&quot; {print $1,$7}'</span> pass
<span class="kw2">awk</span> -F: <span class="st_h">'$7!~&quot;sh$&quot; {print $1,$7}'</span> pass
<span class="kw2">awk</span> -F: <span class="st_h">'NR&gt;3&amp;&amp;NR&lt;6 {print $1,$7}'</span> pass <span class="co0">#3-6行</span>
<span class="kw2">awk</span> -F: <span class="st_h">'NR&lt;3 || NR&gt;6 {print $1,$7}'</span> pass
&nbsp;
算术运算符
<span class="kw2">awk</span> -F: <span class="st_h">'$3=$3+1 {print $1,$3}'</span> pass      <span class="co0">#加一</span>
<span class="kw2">awk</span> -F: <span class="st_h">'$3++ {print $1,$3}'</span> pass
<span class="kw2">awk</span> -F: <span class="st_h">'$3+=1 {print $1,$3}'</span> pass
<span class="kw2">awk</span> -F: <span class="st_h">'$3%2==0 {print $1,$3}'</span> pass
<span class="kw2">awk</span> -F: <span class="st_h">'$3=$3**2 {print $1,$3}'</span> pass      <span class="co0">#$3的平方</span>
&nbsp;
转义字符
<span class="kw2">awk</span> -F: <span class="st_h">'{print $1&quot;\t&quot;$3}'</span> pas
<span class="kw2">awk</span> -F: <span class="st_h">'{print $1&quot;\b&quot;$3}'</span> pass</pre>

</div>
<!-- EDIT2 SECTION "一、awk基础知识" [35-2375] -->
<h3 class="sectionedit3" id="二_awk高级知识">二、awk高级知识</h3>
<div class="level3">

<p>
awk的语法与C语言非常类似，很容易学习！
</p>

</div>

<h4 id="if-else分支">1、if-else分支</h4>
<div class="level4">
<pre class="code bash"><span class="kw2">awk</span> -F: <span class="st_h">'{if($3==10) print $0}'</span> pass
<span class="kw2">awk</span> -F: <span class="st_h">'{if($3==10) {print $1;print $7}}'</span> pass <span class="co0">#嵌套,如果只有一个语句，{}可加可不加,&quot;{}&quot;后不可有&quot;;&quot;。</span>
<span class="kw2">awk</span> -F: <span class="st_h">'{if($3==10) {print $1;} else print $0}'</span> pass <span class="co0">#if-else</span>
&nbsp;
<span class="co0">#if-else if-else,注意：匹配字符串的时候要加引号&quot;root&quot;</span>
<span class="kw2">awk</span> -F: <span class="st_h">'{if($3==10) {print $1;} else if($1==&quot;root&quot;) print $0; else print $7;}'</span> pass</pre>
<pre class="code bash"><span class="co0">#例如：如果UID＝0，打印admin；UID在1~499之间打印sys_users;UID在500以上打印users</span>
&nbsp;
<span class="kw2">awk</span> -F: <span class="st_h">'{
if($3==0) {
   print $1&quot;\tadmin&quot;;
} else if($3&gt;=1&amp;&amp;$3&lt;500) {
   print $1&quot;\tsys_users&quot;}
else {
   print $1&quot;\tusers&quot;;
}
}'</span> <span class="sy0">/</span>etc<span class="sy0">/</span><span class="kw2">passwd</span></pre>

</div>

<h4 id="三目运算符">2、三目运算符</h4>
<div class="level4">
<pre class="code bash"><span class="kw2">expr</span>?act1:act2
<span class="kw2">awk</span> -F: <span class="st_h">'var=($3==0)?&quot;admin&quot;:&quot;users&quot; {print $1,var}'</span> <span class="sy0">/</span>etc<span class="sy0">/</span><span class="kw2">passwd</span>   <span class="co0">#如果UID=0则打印出admin，否则打印user，下同</span>
<span class="kw2">awk</span> -F: <span class="st_h">'($3==0)?var=&quot;admin&quot;:var=&quot;users&quot; {print $1,var}'</span> <span class="sy0">/</span>etc<span class="sy0">/</span><span class="kw2">passwd</span> <span class="co0">#结果同上</span>
<span class="kw2">awk</span> -F: <span class="st_h">'{print ($3&gt;500)?:$1:$6}'</span> <span class="sy0">/</span>etc<span class="sy0">/</span><span class="kw2">passwd</span></pre>

</div>

<h4 id="格式输出printf">3、格式输出printf</h4>
<div class="level4">

<p>
使用printf很方便打印出整齐的格式，和C语言printf很相似！！
格式：printf “…”,…,…,…;
例如：printf “%d %s %s\n”,$3,$1,“aaa”;   #注意：printf默认不换行
</p>

<p>
%-5d#打印出结果，如果不够5个字符，在右侧补空格
%5d#打印出结果，如果不够5个字符，在左侧补空格
awk -F: &#039;BEGIN{printf “%-7s %-15s %-4s\n”,“UID”,“NAME”,“LEVEL”}{printf “%-7s %-15s %-4s\n”,$3,$1,$4} END{print NR,NF,FILENAME}&#039; /etc/passwd
#打印出UID，NAME，LEVEL
</p>

</div>

<h4 id="awk的语句段执行过程">4、awk的语句段执行过程</h4>
<div class="level4">

<p>
BEGIN：该阶段还未处理文件，常用于做变量初始化工作
{}:开始处理文件,每处理一行执行一次{}内的语句！
END{}：处理完文件的善后工作。
</p>

<p>
注意以下运行结果：
awk &#039;BEGIN{FS=“:”} {print $1}&#039; /etc/passwd #正确
awk &#039;FS=“:” {print $1}&#039; /etc/passwd   #第一行会有问题
</p>

<p>
统计行数
awk &#039;BEGIN{i=0}{i++}END{print “lines “i}&#039; /etc/passwd
lines 40
</p>

<p>
计算UID、GID之和
</p>

<p>
awk -F: &#039;BEGIN{usum=0;gsum=0;i=0}{i++;usum=usum+$3;gsum=gsum+$4}END{printf ”%-10s%-10d%-10s%d\n”,“UID_SUM:”,usum,“GID_SUM:”,gsum;printf “%-10s%-10d%-10s%-10d\n”,“UID_AVG:”,usum/i,“GID_AVG:”,gsum/i}&#039; /etc/passwd
</p>

<p>
统计程序的虚拟内存和实际内存
ps aux|grep -v &#039;^USER&#039;|awk &#039;BEGIN{vsz=0;rss=0}{vsz=vsz+$5;rss=rss+$6}END{printf “%-5s%-10d%-5s%-10d\n”,“VSZ:”,vsz/1024,“RSS:”,rss/1024}&#039;
</p>

</div>

<h4 id="while循环">5、while循环</h4>
<div class="level4">

<p>
awk &#039;BEGIN{i=0;while(i&lt;10){print i++}}&#039;
</p>

</div>

<h4 id="do_while循环">6、do while循环</h4>
<div class="level4">

<p>
awk &#039;BEGIN{i=5;do{print i++}while(i&lt;4)}&#039; #先执行，后判断
</p>

</div>

<h4 id="for循环">7、for循环</h4>
<div class="level4">

<p>
awk &#039;BEGIN{for(i=0;i&lt;10;i++) print i}&#039;
</p>

<p>
例如：打印99乘法表
<span style="color: #800000">awk &#039;BEGIN{for(i=1;i&lt;10;i++) {for(j=1;j⇐i;j++) {printf “%d%s%d%s%d\t”,j,“*”,i,“=”,i*j;}printf “\n”}}&#039;</span>
</p>

<p>
逆序输出passwd
</p>

<p>
awk -F: &#039;{for(i=NF;i&gt;=1;i–){printf “%s”,$i;if(i!=1) printf “:”;} printf “\n”}&#039; /etc/passwd  
</p>

</div>

<h4 id="break_continue">8、break、continue</h4>
<div class="level4">

<p>
awk &#039;BEGIN{for(i=1;i⇐5;i++) {if(i&gt;3) break;print i}}&#039;    #跳出循环并终止    
awk &#039;BEGIN{for(i=1;i⇐5;i++) {if(i==3) continue;print i}}&#039;   #停止本次循环，继续执行下次循环    
</p>

</div>

<h4 id="next_exit">9、next、exit</h4>
<div class="level4">

<p>
awk -F: &#039;NR&gt;3{next}{print $i}END{print NR}&#039; /etc/passwd #当NR&gt;3时，继续扫描余下的行，但不执行print $i,    
awk -F: &#039;NR&gt;3{exit}{print $i}END{print NR}&#039; /etc/passwd #当NR&gt;3时，停止扫描    
</p>

</div>

<h4 id="数组">10、数组</h4>
<div class="level4">

<p>
awk的数组功能很强，下标不一定是数组
</p>

<p>
awk &#039;BEGIN{ary[1]=“seker”;ary[2]=“yerik”;print ary[1],ary[2]}&#039;
awk &#039;BEGIN{ary[1]=“seker”;ary[2]=“yerik”;for (i in ary) print i,ary[i]}&#039; #for必须有(),注意与shell的区别
awk &#039;BEGIN{for(i=1;i⇐10;i++){ary[i]=i} for(i in ary) print ary[i]}&#039; #注意：打印出来的结果是无序的，因为是并行输出的
</p>

<p>
用非数字作为数组下标（这点是其他大部分高级语言所不具备的）
awk -F: &#039;{ary[$1]=$6;} END{for(i in ary) print i,ary[i]}&#039; /etc/passwd
例如：统计用户的shell
awk -F: &#039;{ary[$NF]++}END{for(i in ary)print ary[i],i }&#039; /etc/passwd #注：个人认为此用法相当犀利！！！在统计时多用！！！
同awk -F: &#039;{if(ary[$NF]==0) ary[$NF]=1;else ary[$NF]++}END{for(i in ary) print ary[i],i}&#039; /etc/passwd
</p>

</div>

<h4 id="awk脚本">11、awk脚本</h4>
<div class="level4">

<p>
使用脚本后，适当的缩进增加程序可读性；
</p>

</div>

<h5 id="引用awk文件">&lt;1&gt; 引用awk文件</h5>
<div class="level5">

<p>
awk -F: -f awk.sh /etc/passwd
awk.sh脚本内容
</p>
<pre class="code bash"><span class="nu0">1</span> <span class="br0">&#123;</span>ary<span class="br0">&#91;</span><span class="re1">$NF</span><span class="br0">&#93;</span>++<span class="br0">&#125;</span>
<span class="nu0">2</span> END<span class="br0">&#123;</span>
<span class="nu0">3</span>         <span class="kw1">for</span><span class="br0">&#40;</span>i <span class="kw1">in</span> ary<span class="br0">&#41;</span>
<span class="nu0">4</span>                 print ary<span class="br0">&#91;</span>i<span class="br0">&#93;</span>,i;
<span class="nu0">5</span> <span class="br0">&#125;</span></pre>

<p>
&lt;2&gt; 用awk解释器解释脚本 
</p>
<pre class="code bash"><span class="nu0">1</span> <span class="co0">#!/bin/awk -f</span>
<span class="nu0">2</span> BEGIN<span class="br0">&#123;</span>
<span class="nu0">3</span>         <span class="re2">FS</span>=<span class="st0">&quot;:&quot;</span>
<span class="nu0">4</span> <span class="br0">&#125;</span>
<span class="nu0">5</span>
<span class="nu0">6</span> <span class="br0">&#123;</span>ary<span class="br0">&#91;</span><span class="re1">$NF</span><span class="br0">&#93;</span>++<span class="br0">&#125;</span>
<span class="nu0">7</span> END<span class="br0">&#123;</span>
<span class="nu0">8</span>         <span class="kw1">for</span><span class="br0">&#40;</span>i <span class="kw1">in</span> ary<span class="br0">&#41;</span>
<span class="nu0">9</span>                 print ary<span class="br0">&#91;</span>i<span class="br0">&#93;</span>,i;
<span class="nu0">10</span> <span class="br0">&#125;</span></pre>

<p>
&lt;3&gt; awk 与shell共存（awk引用shell的变量）
</p>

<p>
方法一（屏蔽shell的解释）：
</p>
<pre class="code bash"><span class="co0">#!/bin/bash</span>
<span class="re2">var</span>=root
<span class="kw2">awk</span> -F: <span class="st_h">'$1~/'</span><span class="re1">$var</span><span class="st_h">'/ {print $0}'</span> <span class="sy0">/</span>etc<span class="sy0">/</span><span class="kw2">passwd</span>   <span class="co0">#此处awk引用了shell的var变量</span>
<span class="co0">#awk 的引号''是为了屏蔽shell的解释，而要想让awk解释shell的变量，可以在awk中将变量用引号''引起来</span></pre>

<p>
方法二（变量作为awk的参数）：
#!/bin/bash
a=root
awk -v var=$a -F: &#039;$1==var {print $0}&#039; /etc/passwd   #-v参数用来让awk接受shell的变量
</p>

<p>
###############################
</p>

</div>
<!-- EDIT3 SECTION "二、awk高级知识" [2376-7598] -->
<h3 class="sectionedit4" id="三_awk练习">三、awk练习</h3>
<div class="level3">

<p>
1.使用:或/符号做分隔符,将字段逆序输出/etc/passwd文件的每行
awk -F: &#039;{for(i=NF;i&gt;=1;i–) if(i==1)printf “%s\n”,$i;else printf “%s:”,$i}&#039; /etc/passwd
</p>

<p>
2.观察两个文件,以及join命令输出,用awk引入name.txt,home.txt两个文件,模拟joni命令的输出
# awk -F: &#039;NR &lt; 11 {print $3,$1}&#039; /etc/passwd &gt; name.txt
# awk -F: &#039;NR &lt; 11 {print $3,$6}&#039; /etc/passwd &gt; home.txt
# join name.txt home.txt
awk &#039;{ary[$1]=$2“ “ary[$1]}END{for(i in ary) print i,ary[i]}&#039; name.txt home.txt|sort -n
</p>

<p>
3.统计/etc/passwd中每种shell的被使用人数
输出格式:
counts shell
1
1 /bin/sync
4 /bin/bash
31 /sbin/nologin
1 /sbin/halt
1 /sbin/shutdown
awk -F: &#039;{ary[$7]++}END{for(i in ary) print ary[i],i}&#039; /etc/passwd
</p>

<p>
4.统计ps中RSZ,VSS各自总和
输出格式:
ps MEM statistic
VSZ_SUM : 164.277M
RSS_SUM : 47.8555M
</p>

<p>
ps aux|grep -v &#039;^USER&#039;|awk &#039;BEGIN{vsz=0;rss=0}{vsz=vsz+$5;rss=rss+$6}END{print “VSZ_SUM :”,vsz/1024”M”;print “RSS_SUM :”,rss/1024“M”}&#039;
VSZ_SUM : 2187.08M
RSS_SUM : 417.352M
</p>

<p>
5.计算/etc/passwd中所有用户的UID平均数,以及GID平均数.
输出格式:
UID and GID AVG
UID-AVG : 1750.72
GID_AVG : 1754
</p>

<p>
awk -F: &#039;BEGIN{print “UID and GID AVG”; u_sum=0;g_sum=0}{u_sum+=$3;g_sum+=$4}END{print “UID-AVG :”,u_sum/NR;print “GID_AVG :”,g_sum/NR}&#039; /etc/passwd
UID and GID AVG
UID-AVG : 1710.88
GID_AVG : 1714.12
</p>

<p>
6.
根据uid值给用户分等级 Admin system users
输出格式:
LEVEL NAME
Admin root
sysuser bin
users seker
</p>

<p>
admin_count: N sys_user_count: N users_count: N
</p>
<pre class="code bash"><span class="kw2">awk</span> -F: <span class="st_h">'BEGIN{printf &quot;LEVEL\tNAME\n&quot;}{if($3==0) {printf &quot;Admin\t%s\n&quot;,$1;admin++}else if($3&gt;=500) {printf &quot;users\t%s\n&quot;,$1;user++}else {printf &quot;sysuser\t%s\n&quot;,$1;sysuser++}}END{printf &quot;admin_count:%d\tsys_user_count:%d\tusers_count:%d\n&quot;,admin,user,sysuser}'</span> <span class="sy0">/</span>etc<span class="sy0">/</span><span class="kw2">passwd</span></pre>
<hr />

<p>
7.分别用GREP,SED,AWK将ifconfig中匹配到eth1的网卡所有信息打印出来.
ifconfig|awk -F“\t” &#039;$1==lo{exit}{print $1“\t”$2}&#039;
</p>
<hr />

<p>
8.SHELL实现批量建立多个文件,将文件拓展名加上.txt,再加上.doc,再把中间的.txt去掉
</p>
<pre class="code bash"><span class="nu0">1</span> <span class="co0">#!/bin/bash</span>
<span class="nu0">2</span>
<span class="nu0">3</span> <span class="re2">NEWNAME</span>=<span class="st0">&quot;&quot;</span>
<span class="nu0">4</span> <span class="kw3">echo</span> <span class="st0">&quot;Touching TXT Files...&quot;</span>
<span class="nu0">5</span> <span class="kw2">sleep</span> <span class="nu0">1</span>
<span class="nu0">6</span> <span class="kw2">touch</span> <span class="br0">&#123;</span>a,b,c<span class="br0">&#125;</span>_<span class="br0">&#123;</span><span class="nu0">1</span>,<span class="nu0">2</span>,<span class="nu0">3</span><span class="br0">&#125;</span>.txt
<span class="nu0">7</span> <span class="kw3">echo</span> $<span class="br0">&#40;</span><span class="kw2">ls</span> <span class="sy0">*</span>.txt<span class="br0">&#41;</span>
<span class="nu0">8</span> <span class="kw3">echo</span>
<span class="nu0">9</span>
<span class="nu0">10</span> <span class="kw1">for</span> i <span class="kw1">in</span> $<span class="br0">&#40;</span><span class="kw2">ls</span> <span class="sy0">*</span>.txt<span class="br0">&#41;</span>
<span class="nu0">11</span> <span class="kw1">do</span>
<span class="nu0">12</span>         <span class="kw2">mv</span> <span class="re1">$i</span> <span class="st0">&quot;<span class="es2">$i</span>.doc&quot;</span>
<span class="nu0">13</span> <span class="kw1">done</span>
<span class="nu0">14</span> <span class="kw3">echo</span> <span class="st0">&quot;txt.doc Files:&quot;</span>
<span class="nu0">15</span> <span class="kw2">sleep</span> <span class="nu0">1</span>
<span class="nu0">16</span> <span class="kw3">echo</span> $<span class="br0">&#40;</span><span class="kw2">ls</span> <span class="sy0">*</span>.doc<span class="br0">&#41;</span>
<span class="nu0">17</span>
<span class="nu0">18</span> <span class="kw1">for</span> i <span class="kw1">in</span> $<span class="br0">&#40;</span><span class="kw2">ls</span> <span class="sy0">*</span>.doc<span class="br0">&#41;</span>
<span class="nu0">19</span> <span class="kw1">do</span>
<span class="nu0">20</span>         <span class="re2">NEWNAME</span>=$<span class="br0">&#40;</span><span class="kw3">echo</span> <span class="re1">$i</span><span class="sy0">|</span><span class="kw2">awk</span> -F. <span class="st_h">'{printf &quot;%s.%s&quot;,$1,$3}'</span><span class="br0">&#41;</span>
<span class="nu0">21</span>         <span class="kw2">mv</span> <span class="re1">$i</span> <span class="re1">$NEWNAME</span>
<span class="nu0">22</span> <span class="kw1">done</span>
<span class="nu0">23</span> <span class="kw3">echo</span>
<span class="nu0">24</span> <span class="kw3">echo</span> <span class="st0">&quot;.doc Files:&quot;</span>
<span class="nu0">25</span> <span class="kw2">sleep</span> <span class="nu0">1</span>
<span class="nu0">26</span> <span class="kw3">echo</span> $<span class="br0">&#40;</span><span class="kw2">ls</span> <span class="sy0">*</span>.doc<span class="br0">&#41;</span>
<span class="nu0">27</span> <span class="kw3">exit</span> <span class="nu0">0</span></pre>

<p>
<span style="color: #800000">
9.AWK脚本实现间隔五行打印表头</span>
</p>
<pre class="code"># ./awk_print.sh /etc/passwd
Username Uid   
root      0     
bin       1     
daemon    2     
adm       3     
lp        4     

Username Uid   
shutdown 6     
halt      7     
mail      8     
news      9     
uucp      10    </pre>
<pre class="code bash"><span class="nu0">1</span> <span class="co0">#!/bin/awk -f</span>
<span class="nu0">2</span>
<span class="nu0">3</span> BEGIN<span class="br0">&#123;</span><span class="re2">FS</span>=<span class="st0">&quot;:&quot;</span>;<span class="br0">&#125;</span>
<span class="nu0">4</span> <span class="br0">&#123;</span>
<span class="nu0">5</span>         <span class="kw1">if</span><span class="br0">&#40;</span><span class="br0">&#40;</span>NR-<span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">%</span>5==<span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
<span class="nu0">6</span>                 <span class="kw3">printf</span> <span class="st0">&quot;<span class="es1">\n</span>%-10s%-10s<span class="es1">\n</span>&quot;</span>,<span class="st0">&quot;Username&quot;</span>,<span class="st0">&quot;Uid&quot;</span>;
<span class="nu0">7</span>                 <span class="kw3">printf</span> <span class="st0">&quot;%-10s%-10s<span class="es1">\n</span>&quot;</span>,<span class="re4">$1</span>,<span class="re4">$3</span>;
<span class="nu0">8</span>         <span class="br0">&#125;</span><span class="kw1">else</span>
<span class="nu0">9</span>                 <span class="kw3">printf</span> <span class="st0">&quot;%-10s%-10s<span class="es1">\n</span>&quot;</span>,<span class="re4">$1</span>,<span class="re4">$3</span>;
<span class="nu0">10</span> <span class="br0">&#125;</span></pre>

<p>
10.用$RANDOM产生100个随机数,交给AWK产生数组,在数组内部排序,最后输出.(禁止用sort命令)   
</p>
<pre class="code bash"><span class="nu0">1</span> <span class="co0">#!/bin/awk -f</span>
<span class="nu0">2</span>
<span class="nu0">3</span> BEGIN<span class="br0">&#123;</span><span class="re2">i</span>=<span class="nu0">1</span>;<span class="re2">max</span>=<span class="nu0">0</span>;<span class="re2">min</span>=<span class="nu0">0</span>;<span class="re2">tmp</span>=<span class="nu0">0</span><span class="br0">&#125;</span>
<span class="nu0">4</span>
<span class="nu0">5</span> <span class="br0">&#123;</span>ary<span class="br0">&#91;</span>i++<span class="br0">&#93;</span>=<span class="re4">$1</span>;<span class="br0">&#125;</span>
<span class="nu0">6</span>
<span class="nu0">7</span> END<span class="br0">&#123;</span>
<span class="nu0">8</span>         <span class="kw1">for</span><span class="br0">&#40;</span><span class="re2">i</span>=<span class="nu0">1</span>;i<span class="sy0">&lt;</span>=<span class="nu0">99</span>;i++<span class="br0">&#41;</span><span class="br0">&#123;</span>
<span class="nu0">9</span>                 <span class="kw1">for</span><span class="br0">&#40;</span><span class="re2">j</span>=<span class="nu0">1</span>;j<span class="sy0">&lt;</span>=<span class="nu0">99</span>;j++<span class="br0">&#41;</span><span class="br0">&#123;</span>
<span class="nu0">10</span>                         <span class="kw1">if</span><span class="br0">&#40;</span>ary<span class="br0">&#91;</span>j<span class="br0">&#93;</span><span class="sy0">&gt;</span>ary<span class="br0">&#91;</span>j+<span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
<span class="nu0">11</span>                                 <span class="re2">tmp</span>=ary<span class="br0">&#91;</span>j<span class="br0">&#93;</span>;
<span class="nu0">12</span>                                 ary<span class="br0">&#91;</span>j<span class="br0">&#93;</span>=ary<span class="br0">&#91;</span>j+<span class="nu0">1</span><span class="br0">&#93;</span>;
<span class="nu0">13</span>                                 ary<span class="br0">&#91;</span>j+<span class="nu0">1</span><span class="br0">&#93;</span>=tmp;
<span class="nu0">14</span>                         <span class="br0">&#125;</span>
<span class="nu0">15</span>                 <span class="br0">&#125;</span>
<span class="nu0">16</span>         <span class="br0">&#125;</span>   
<span class="nu0">17</span>         <span class="kw1">for</span><span class="br0">&#40;</span>k <span class="kw1">in</span> ary<span class="br0">&#41;</span> print ary<span class="br0">&#91;</span>k<span class="br0">&#93;</span>;
<span class="nu0">18</span> <span class="br0">&#125;</span></pre>

</div>
<!-- EDIT4 SECTION "三、awk练习" [7599-] -->