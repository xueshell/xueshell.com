
<h3 class="sectionedit1" id="shell_seq详解">shell seq详解</h3>
<div class="level3">

</div>

<h4 id="linux_中seq_命令的用法">Linux 中seq 命令的用法</h4>
<div class="level4">

<p>
<span style="color: #800000">
用于产生从某个数到另外一个数之间的所有整数  <br/>

用法：seq [选项]… 尾数   <br/>

　或：seq [选项]… 首数 尾数   <br/>

　或：seq [选项]… 首数 增量 尾数   <br/>

以指定增量从首数开始打印数字到尾数。   <br/>

</span>
</p>
<ol>
<li class="level1"><div class="li">f, –format=格式 使用printf 样式的浮点格式       <br/>
   </div>
</li>
<li class="level1"><div class="li">s, –separator=字符串使用指定字符串分隔数字(默认使用：\n)            <br/>
  </div>
</li>
<li class="level1"><div class="li">w, –equal-width 在列前添加0 使得宽度相同      <br/>
    </div>
<ol>
<li class="level3"><div class="li">-help 显示此帮助信息并退出              <br/>
</div>
</li>
<li class="level3"><div class="li">-version 显示版本信息并退出            <br/>
  </div>
</li>
</ol>
</li>
</ol>

<p>
‐f, ‐‐format=FORMAT use printf style floating‐point FORMAT (default: %g)         <br/>

‐s, ‐‐separator=STRING use STRING to separate numbers (default: \n)             <br/>

‐w, ‐‐equal‐width equalize width by padding with leading zeroes         <br/>

</p>
<pre class="code bash"><span class="co0">#从1循环到100的两种方法（bash ）</span>
&nbsp;
<span class="kw1">for</span> x <span class="kw1">in</span> <span class="sy0">`</span><span class="kw2">seq</span> <span class="nu0">1</span> <span class="nu0">100</span><span class="sy0">`</span>;<span class="kw1">do</span> <span class="kw3">echo</span> <span class="re1">$x</span>;<span class="kw1">done</span>
<span class="kw1">for</span> x <span class="kw1">in</span> <span class="br0">&#123;</span><span class="nu0">1</span>..<span class="nu0">100</span><span class="br0">&#125;</span>;<span class="kw1">do</span> <span class="kw3">echo</span> <span class="re1">$x</span>;<span class="kw1">done</span></pre>

<p>
‐f 选项 指定格式
</p>
<pre class="code bash"><span class="co0">#seq ‐f&quot;%3g&quot; 9 11</span>
<span class="nu0">9</span>
<span class="nu0">10</span>
<span class="nu0">11</span></pre>

<p>
% 后面指定数字的位数 默认是“%g”,
“%3g”那么数字位数不足部分是空格
#sed ‐f“%03g” 9 11 这样的话数字位数不足部分是0
% 前面制定字符串
seq ‐f “str%03g” 9 10
str009
str010
‐w 指定输出数字同宽，不能和‐f 一起用
seq ‐w ‐f“str%03g” 9 11
seq: format string may not be specified when printing equal width strings
seq ‐w 98 100
098
099
100
输出是同宽的
‐s 指定分隔符 默认是回车
seq ‐s“ ” ‐f“str%03g” 9 11
str009 str010 str011
要指定\t 做为分隔符号
seq ‐s“`echo ‐e “\t”`” 9 11
如用\n\n, 以兩個空格 , 便得寫成
seq ‐s &#039;
</p>
<blockquote><div class="no">
<br/>
 &#039; 1 3</div></blockquote>

<p>
1
2
3
几个例子
</p>

<p>
seq ‐f &#039;dir%03g&#039; 1 10 | xargs mkdir
</p>

<p>
mkdir $(seq ‐f &#039;dir%03g&#039; 1 10)
</p>

<p>
printf &#039;dir%03d\n&#039; {1..10} | xargs mkdir
</p>

<p>
mkdir `printf &#039;dir%03d &#039; {1..10}`
</p>

<p>
awk &#039;BEGIN { while (num &lt; 10 ) printf “dir%03d\n”, ++num ; exit}&#039; | xargs mkdir
</p>

<p>
for i in `seq ‐f &#039;%02g&#039; 1 20`
do
if ! wget ‐P $HOME/tmp ‐c [img]<a href="http://www.xxxsite.com/photo/" class="urlextern" title="http://www.xxxsite.com/photo/"  rel="nofollow">http://www.xxxsite.com/photo/</a>$i.jpg[/img] ; then
wget ‐P $HOME/tmp ‐c $_
fi
done
</p>

<p>
$ aNumList=$(seq 10);
$ echo $aNumList
1 2 3 4 5 6 7 8 9 10
</p>

<p>
aNumList 得到是字符串，不同之处以：空格分隔开。在linux 里面，可以把它看
作是list. 可以通过for…in 循环读取。
$ for i in $aNumList;do echo $i;done;
如果需要生成array 只需要将$(seq 10) 再加个”()”即可。
$ aNumList=($(seq 10));
$ echo $aNumList
1
$ echo ${#aNumList[@]}
10
长度是100 的数组。
echo {1..10}
1 2 3 4 5 6 7 8 9 10
</p>

<p>
for a in {1..10};do echo $a;done
#!/bin/bash
for i in `seq 1 10`或用for i in $(seq 1 10)
do
echo $i
done
</p>

</div>
<!-- EDIT1 SECTION "shell seq详解" [2-] -->