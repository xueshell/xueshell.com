
<p>
<a href="http://www.centoscn.com/shell/2013/0802/884.html" class="urlextern" title="http://www.centoscn.com/shell/2013/0802/884.html"  rel="nofollow">Shell脚本之awk详解</a>
</p>

<p>
一．基本介绍
</p>

<p>
1.awk:
</p>
<pre class="code">awk是一个强大的文本分析工具，在对文本文件的处理以及生成报表，awk是无可替代的。awk认为文本文件都是结构化的，它将每一个输入行定义为一个记录，行中的每个字符串定义为一个域(段)，域和域之间使用分割符分割。</pre>

<p>
2.功能：流控制、数学运算、进程控制、内置的变量和函数、循环和判断
</p>

<p>
3.工作原理：
</p>

<p>
awk 会把每行进行一个拆分，用相应的命令对拆分出来的“段”进行处理。
</p>

<p>
（1）行工作模式，读入文件的每一行，会把一行的内容，存到$0里
</p>

<p>
（2）使用内置的变量FS(段的分隔符，默认用的是空白字符)，分割这一行，把分割出来的每个段存到相应的变量$(1-100)
</p>

<p>
（3）输出的时候按照内置变量OFS(out FS)，输出
</p>

<p>
（4）读入下一行继续操作
</p>

<p>
简单实例
</p>

<p>
[root@tx3 ~]# echo “this is a book” &gt; awk.txt
</p>

<p>
[root@tx3 ~]# awk &#039;{print $2,$1,$3,$4}&#039; awk.txt
</p>

<p>
is this a book
</p>

<p>
4.   Awk常用内置变量表：
</p>

<p>
1 $0             当前记录（作为单个变量）  
</p>

<p>
2 $1~$n          当前记录的第n个字段，字段间由FS分隔  
</p>

<p>
3 FS             输入字段分隔符 默认是空格  
</p>

<p>
4 NF             当前记录中的字段个数，就是有多少列  
</p>

<p>
5 NR             已经读出的记录数，就是行号，从1开始  
</p>

<p>
6 RS             输入的记录他隔符默 认为换行符  
</p>

<p>
7 OFS            输出字段分隔符 默认也是空格  
</p>

<p>
8 ORS            输出的记录分隔符，默认为换行符  
</p>

<p>
9 ARGC           命令行参数个数  
</p>

<p>
10 ARGV           命令行参数数组  
</p>

<p>
11 FILENAME       当前输入文件的名字  
</p>

<p>
12 IGNORECASE     如果为真，则进行忽略大小写的匹配  
</p>

<p>
13 ARGIND         当前被处理文件的ARGV标志符  
</p>

<p>
14 CONVFMT        数字转换格式 %.6g  
</p>

<p>
15 ENVIRON        UNIX环境变量  
</p>

<p>
16 ERRNO          UNIX系统错误消息  
</p>

<p>
17 FIELDWIDTHS    输入字段宽度的空白分隔字符串  
</p>

<p>
18 FNR            当前记录数  
</p>

<p>
19 OFMT           数字的输出格式 %.6g  
</p>

<p>
20 RSTART         被匹配函数匹配的字符串首  
</p>

<p>
21 RLENGTH        被匹配函数匹配的字符串长度  
</p>

<p>
二．print的简单使用
</p>

<p>
例：打印整行: $0
</p>

<p>
[root@tx3 ~]# cp /etc/passwd p1
</p>

<p>
[root@tx3 ~]# awk &#039;{print $0}&#039; p1
</p>

<p>
例：打印每行的最后一个字段: $NF
</p>

<p>
[root@tx3 ~]# awk -F : &#039;{print $NF}&#039; p1
</p>

<p>
例：打印第三个字段: $3
</p>

<p>
[root@tx3 ~]# awk -F : &#039;{print $3}&#039; p1
</p>

<p>
例：打印第一行NR==1
</p>

<p>
[root@tx3 ~]# awk &#039;NR==1{print $0}&#039; p1
</p>

<p>
root:x:0:0:root:/root:/bin/bash
</p>

<p>
例：打印最后一行
</p>

<p>
[root@tx3 ~]# awk &#039;END{print $0}&#039; p1
</p>

<p>
tx:x:500:500:tx:/home/tx:/bin/bash
</p>

<p>
例：打印第一行最后一个字段
</p>

<p>
[root@tx3 ~]# awk -F: &#039;NR==1{print $NF}&#039; p1
</p>

<p>
/bin/bash
</p>

<p>
例：打印最后一行最后一个字段
</p>

<p>
[root@tx3 ~]#awk -F: &#039;END{print $NF}&#039; p1
</p>

<p>
例：打印每行的倒数第二个字段，并在其后打印你好
</p>

<p>
[root@tx3 ~]# awk -F: &#039;{print $(NF-1),“nihao”}&#039; p1
</p>

<p>
/root nihao
</p>

<p>
/bin nihao
</p>

<p>
/sbin nihao
</p>

<p>
例：打印行号
</p>

<p>
[root@tx3 ~]# awk &#039;{print NR,$0}&#039; p1
</p>

<p>
1 root:x:0:0:root:/root:/bin/bash
</p>

<p>
2 bin:x:1:1:bin:/bin:/sbin/nologin
</p>

<p>
3 daemon:x:2:2:daemon:/sbin:/sbin/nologin
</p>

<p>
例：打印当前系统环境变量的某个特定值
</p>

<p>
[root@tx3 ~]# awk &#039;BEGIN{print ENVIRON[“PATH”];}&#039;
</p>

<p>
/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
</p>

<p>
例： 用:分割，删除第2个字段
</p>

<p>
[root@tx3 ~]# awk &#039;BEGIN{FS=“:”;OFS=“:”}{print $1,$3,$4,$5,$6,$7}&#039; p1
</p>

<p>
root:0:0:root:/root:/bin/bash
</p>

<p>
bin:1:1:bin:/bin:/sbin/nologin
</p>

<p>
daemon:2:2:daemon:/sbin:/sbin/nologin
</p>

<p>
三．printf的使用
</p>

<p>
print format 生成报表
</p>

<p>
%d        十进制有符号整数  
</p>

<p>
%u        十进制无符号整数  
</p>

<p>
%f        浮点数  
</p>

<p>
%s        字符串  
</p>

<p>
%c        显示字符的ASCII码  
</p>

<p>
%p        指针的值  
</p>

<p>
%e        科学技术法显示数值  
</p>

<p>
%x        %X 无符号以十六进制表示的整数  
</p>

<p>
%o        无符号以八进制表示的整数  
</p>

<p>
%g        %G 以科学计数法或浮点数的格式显示数值  
</p>

<p>
%%        显示其自身  
</p>

<p>
修饰符：  
</p>

<p>
-:  左对齐     
</p>

<p>
+:  显示数值符号  
</p>

<p>
N： 显示
</p>

<p>
-F 指定段的分隔符
</p>

<p>
例：（1）生成报表
</p>

<p>
例：（2）小数问题
</p>

<p>
对小数取保留位的时候，四舍五入
</p>

<p>
对小数取整，不进行四舍五入
</p>

<p>
[root@tx3 ~]# cat awk.1
</p>

<p>
23.3456 11.234 45.67
</p>

<p>
[root@tx3 ~]# awk &#039;{printf “%.2f\t%.2f\t%.2f\n”,$1,$2,$3}&#039; awk.1
</p>

<p>
23.3511.2345.67
</p>

<p>
四．awk的使用
</p>

<p>
（1）正则表达式
</p>

<p>
\(\)   \{\} 不支持
</p>

<p>
. * ^ $ ? + [] | \&lt; \&gt; ()  可以直接使用
</p>

<p>
例[root@tx3 ~]# awk &#039;/^$/{print “this is an empty line”}&#039; /etc/inittab
</p>

<p>
this is an empty line
</p>

<p>
this is an empty line
</p>

<p>
this is an empty line
</p>

<p>
this is an empty line
</p>

<p>
this is an empty line
</p>

<p>
this is an empty line
</p>

<p>
this is an empty line
</p>

<p>
this is an empty line
</p>

<p>
this is an empty line
</p>

<p>
例[root@tx3 ~]# awk -F: &#039;/^root/{print $1,$NF}&#039; /etc/passwd
</p>

<p>
root /bin/bash
</p>

<p>
例[root@tx3 ~]# awk -F: &#039;!/^root/{print $1,$NF}&#039; /etc/passwd|head -3  
</p>

<p>
bin /sbin/nologin
</p>

<p>
daemon /sbin/nologin
</p>

<p>
adm /sbin/nologin
</p>

<p>
（2）关系运算符
</p>
<blockquote><div class="no">
 &lt; == != &gt;= ⇐</div></blockquote>

<p>
~（匹配） !~（不匹配）
</p>

<p>
例[root@tx3 ~]# cp /etc/passwd p1
</p>

<p>
[root@tx3 ~]# awk -F: &#039;$3 == 0 {print $1}&#039; p1
</p>

<p>
Root
</p>

<p>
例[root@tx3 ~]# awk -F: &#039;$3 != 0{ print $1}&#039; p1 | head -2
</p>

<p>
bin
</p>

<p>
Daemon
</p>

<p>
例[root@tx3 ~]# awk -F: &#039;$3 &lt; 2 {print $1}&#039; p1
</p>

<p>
root
</p>

<p>
bin
</p>

<p>
（3）逻辑运算符
</p>

<p>
&amp;&amp; || !
</p>

<p>
与 或 非
</p>

<p>
例[root@tx3 ~]# awk -F: &#039;$3 &gt; 0 &amp;&amp; $3 &lt; 10 {print $1, $3}&#039; p1 |head -2
</p>

<p>
bin 1
</p>

<p>
daemon 2
</p>

<p>
例[root@tx3 ~]#  awk -F: &#039;$3 &gt; 10 || $3 &lt; 5 {print $1,$3}&#039; p1 |head -6
</p>

<p>
root 0
</p>

<p>
bin 1
</p>

<p>
daemon 2
</p>

<p>
adm 3
</p>

<p>
lp 4
</p>

<p>
operator 11
</p>

<p>
（4）算数运算符
</p>

<p>
+ - * / %（取模(余数)） ^（幂运算）
</p>

<p>
例：输出名字，总成绩，平均成绩
</p>

<p>
[root@tx3 ~]# cat cj
</p>

<p>
tx 90 86 86
</p>

<p>
tx1 89 78 85
</p>

<p>
tx2 79 80 85   
</p>

<p>
[root@tx3 ~]#  awk &#039;{print $1,$2+$3+$4,($2+$3+$4)/3}&#039; cj
</p>

<p>
tx 262 87.3333
</p>

<p>
tx1 252 84
</p>

<p>
tx2 244 81.3333
</p>

<p>
[root@tx3 ~]# awk &#039;{printf“%-5s %3d %.2f\n”,$1,$2+$3+$4,($2+$3+$4)/3}&#039; cj
</p>

<p>
tx    262 87.33
</p>

<p>
tx1   252 84.00
</p>

<p>
tx2   244 81.33
</p>

<p>
（5）BEGIN  END
</p>

<p>
BEGIN{ 动作;动作;… }  在处理文件之前，要执行的动作；只执行一次
</p>

<p>
END{ 动作;动作;… }    在处理完文件之后，要执行的动作；只执行一次
</p>

<p>
BEGIN ：可以给文件添加标题、定义变量、定义文件的分隔符
</p>

<p>
END：汇总的操作
</p>

<p>
getline可以从管道和标准输入读取输入，然后传递给变量。
</p>

<p>
例：
</p>

<p>
[root@tx3 ~]# awk &#039;BEGIN{“date”| getline a}{print}END{print a}&#039; cj
</p>

<p>
tx 90 86 86
</p>

<p>
tx1 89 78 85
</p>

<p>
tx2 79 80 85  
</p>

<p>
Thu Feb  7 12:39:25 CST 2013
</p>

<p>
五．awk里的流控制和循环
</p>

<p>
（1）简单的条件判断
</p>

<p>
语法：(表达式 ? 值1 : 值2) 如果表达式成立，输出值1；否则输出值2
</p>

<p>
[root@tx3 ~]# cat num
</p>

<p>
2 8 9
</p>

<p>
8 4 6
</p>

<p>
3 5 7
</p>

<p>
[root@tx3 ~]# awk &#039;{print ( $1 &gt; $2 ? $1 : $2)}&#039; num
</p>

<p>
8
</p>

<p>
8
</p>

<p>
5
</p>

<p>
（2）if判断
</p>

<p>
语法：
</p>

<p>
{ if (表达式
</p>

<p>
{
</p>
<pre class="code">              动作1;动作2;...</pre>

<p>
}
</p>

<p>
}
</p>
<pre class="code"> 如果表达式成立，那么执行动作。</pre>

<p>
[root@tx3 ~]# awk &#039;{if ($2&gt;=80 &amp;&amp; $2 ⇐100) {print $1,“great”} else {print $1, “good”}}&#039; cj
</p>

<p>
tx great
</p>

<p>
tx1 great
</p>

<p>
tx2 good
</p>

<p>
（2）多支判断
</p>

<p>
{
</p>

<p>
if (表达式)
</p>

<p>
{ 动作1;动作2;…}
</p>

<p>
else if (表达式)
</p>

<p>
{ 动作1;动作2;…}
</p>

<p>
else if (表达式)
</p>

<p>
{ 动作1;动作2;…}
</p>

<p>
……
</p>

<p>
else
</p>

<p>
{ 动作1;动作2;…}
</p>

<p>
}
</p>

<p>
[root@tx3 ~]# cat cj
</p>

<p>
tx 90 86 86
</p>

<p>
tx1 89 78 85
</p>

<p>
tx2 79 80 85  
</p>

<p>
tx3 80 70 60
</p>

<p>
tx4 75 85 65
</p>

<p>
tx5 78 62 80
</p>

<p>
判断的标准：
</p>

<p>
90-100 A
</p>

<p>
80-89  B
</p>

<p>
70-79  C
</p>

<p>
60-69  D
</p>

<p>
0-59   E
</p>

<p>
[root@tx3 ~]# awk &#039;{ if ($2 &gt;= 90 &amp;&amp; $2 ⇐ 100) {print $1,“A”} else if ($2 &gt;= 80 &amp;&amp; $2 &lt; 90) {print $1,“B”} else if ($2 &gt;= 70 &amp;&amp; $2 &lt; 80) {print $1,“C”} else if ($2 &gt;= 60 &amp;&amp; $2 &lt; 70) {print $1,“D”} else {print $1,“E”} }&#039; cj
</p>

<p>
tx A
</p>

<p>
tx1 B
</p>

<p>
tx2 C
</p>

<p>
tx3 B
</p>

<p>
tx4 C
</p>

<p>
tx5 C
</p>

<p>
（3）循环while
</p>

<p>
语法：&#039;var=初值;while (表达式){动作1;…更新变量的动作;}&#039;
</p>

<p>
例：
</p>

<p>
[root@tx3 ~]# awk -F: &#039;{i=1; while (i⇐NF) {print $i;i++}}&#039; p1 | head -7
</p>

<p>
root
</p>

<p>
x
</p>

<p>
0
</p>

<p>
0
</p>

<p>
root
</p>

<p>
/root
</p>

<p>
/bin/bash
</p>

<p>
例. 方法一
</p>

<p>
[root@tx3 ~]# awk -F: &#039;{i=NF; while (i&gt;=2) {printf $i “:”;i–};print $1}&#039; p1
</p>

<p>
/bin/bash:/root:root:0:0:x:root
</p>

<p>
/sbin/nologin:/bin:bin:1:1:x:bin
</p>

<p>
/sbin/nologin:/sbin:daemon:2:2:x:daemon
</p>

<p>
/sbin/nologin:/var/adm:adm:4:3:x:adm
</p>

<p>
例. 方法二
</p>

<p>
[root@tx3 ~]# awk &#039;BEGIN { FS=“:” } { i=NF; while (i&gt;=2) {printf $i “:”;i–} print $1}&#039; p1
</p>

<p>
/bin/bash:/root:root:0:0:x:root
</p>

<p>
/sbin/nologin:/bin:bin:1:1:x:bin
</p>

<p>
/sbin/nologin:/sbin:daemon:2:2:x:daemon
</p>

<p>
(4)for循环
</p>

<p>
语法：
</p>

<p>
{
</p>

<p>
for(表达式)
</p>

<p>
{动作1;…}
</p>

<p>
}
</p>

<p>
表达式：分为3部分：
</p>

<p>
(1)初始化表达式 i=1
</p>

<p>
(2)测试表达式   i&lt;10
</p>

<p>
(3)更新测试表达式 i++
</p>

<p>
语句：
</p>

<p>
next 处理输入行的下一个输入行
</p>

<p>
exit 退出
</p>

<p>
continue 结束本次循环
</p>

<p>
break 跳出循环
</p>

<p>
例
</p>

<p>
[root@tx3 ~]# awk &#039;BEGIN {FS=“:”} {for(i=NF;i&gt;=2;i–) {printf $i “;”};print $1}&#039; p1
</p>

<p>
/bin/bash;/root;root;0;0;x;root
</p>

<p>
/sbin/nologin;/bin;bin;1;1;x;bin
</p>

<p>
/sbin/nologin;/sbin;daemon;2;2;x;daemon
</p>

<p>
/sbin/nologin;/var/adm;adm;4;3;x;adm
</p>

<p>
例
</p>

<p>
[root@tx3 ~]# cat num
</p>

<p>
2 8 9
</p>

<p>
8 4 6
</p>

<p>
3 5 7
</p>

<p>
[root@tx3 ~]# awk &#039;{ max=0; i=1; while (i⇐NF) { if (max&lt;$i) {max=$i} i++} print max}&#039; num
</p>

<p>
9
</p>

<p>
8
</p>

<p>
7
</p>

<p>
（5）awk数组
</p>

<p>
例
</p>

<p>
[图片1.jpg]
</p>

<p>
例   使用变量作为数组下标
</p>

<p>
[图片2.jpg]
</p>

<p>
另外一种读取方式（这种是无序的，j是变量，a是数组）
</p>

<p>
[图片3.jpg]
</p>

<p>
数组有序
</p>

<p>
[图片4.jpg]
</p>

<p>
（6）函数
</p>

<p>
@1split 切割字符串
</p>

<p>
split(“等待被切割的字符串”,数组名,“切割用的分隔符”)
</p>

<p>
[root@tx3 ~]# awk &#039;BEGIN{split(“2012/08/23”,da,“/”);print da[2],da[3],da[1]}&#039;
</p>

<p>
08 23 2012
</p>

<p>
@2toupper() 小写转大写
</p>

<p>
tolower() 大写转小写
</p>

<p>
[root@tx3 ~]# awk &#039;{print toupper($0)}&#039; p1 |head -3
</p>

<p>
ROOT:X:0:0:ROOT:/ROOT:/BIN/BASH
</p>

<p>
BIN:X:1:1:BIN:/BIN:/SBIN/NOLOGIN
</p>

<p>
DAEMON:X:2:2:DAEMON:/SBIN:/SBIN/NOLOGIN
</p>

<p>
@3sub()  局部替换
</p>

<p>
gsub() 全局替换
</p>

<p>
sub(/要替换的内容/,“替换成什么内容”)
</p>

<p>
gsub(/要替换的内容/,“替换成什么内容”)
</p>

<p>
gsub(/要替换的内容/,“替换成什么内容”,指定字段如$7)
</p>

<p>
例：
</p>

<p>
[root@tx3 ~]# awk -F: &#039;{sub(/root/,“r00t”);print}&#039; p1
</p>

<p>
r00t:x:0:0:root:/root:/bin/bash
</p>

<p>
例：
</p>

<p>
[root@tx3 ~]# awk -F: &#039;{gsub(/root/,“r00t”);print}&#039; p1
</p>

<p>
r00t:x:0:0:r00t:/r00t:/bin/bash
</p>

<p>
operator:x:11:0:operator:/r00t:/sbin/nologin
</p>

<p>
例：
</p>

<p>
[root@tx3 ~]# awk -F[:/] &#039;{gsub(/root/,“r00t”,$7);print}&#039; p1
</p>

<p>
root x 0 0 root  r00t  bin bash
</p>

<p>
operator x 11 0 operator  r00t  sbin nologin
</p>

<p>
@4.length() 计算字符串的长度
</p>

<p>
[root@tx3 ~]# awk -F: &#039;{print length($1),$1}&#039; p1
</p>

<p>
4 root
</p>

<p>
3 bin
</p>

<p>
6 daemon
</p>

<p>
3 adm
</p>

<p>
@5. 数学计算
</p>

<p>
[root@tx3 ~]# awk &#039;BEGIN{print sin(30)}&#039;
</p>

<p>
-0.988032
</p>

<p>
[root@tx3 ~]# awk &#039;BEGIN{print cos(60)}&#039;
</p>

<p>
-0.952413
</p>

<p>
[root@tx3 ~]# awk &#039;BEGIN{print int(22/6)}&#039;
</p>

<p>
3
</p>

<p>
[root@tx3 ~]# awk &#039;BEGIN{print sqrt(3)}&#039;
</p>

<p>
1.73205
</p>
