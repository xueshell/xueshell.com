
<p>
Bourne Shell及Shell编程(2) 
</p>
<pre class="code">    h.交互式从键盘读入数据 
      使用read语句，其格式如下： 

      read var1 var2 ... varn 

      read将不作变量替换，但会删除多余的空格，直到遇到第一个换行符（回车）， 
      并将输入值依次赋值给相应的变量。 

      例： 
      $ read var1 var2 var3 
      Hello my friends 
      $ echo $var1 $var2 $var3 
      Hello my friends 
      $ echo $var1 
      Hello 
      $ read var1 var2 var3 
      Hello my dear friends 
      $ echo $var3 
      dear friends &lt;-输入多余变量时，输入值余下的内容赋给最后一个变量 
      $ read var1 var2 var3 
      Hello friends 
      $ echo $var3 
                      &lt;- var3为空 
      $ 

      在shell script中可使用read语句进行交互操作： 

      ... 
      #echo -n message 输出结果后不换行 </pre>
<pre class="code">      echo -n &quot;Do you want to continue: Y or N&quot; 
      read ANSWER 

      if [ $ANSWER=N -o $ANSWER=n ] 
      then 
              exit 
      fi 

    i. case结构：结构较elif-then结构更清楚 

      比较if-then语句： 

      if [ variable1 = value1 ] 
      then 
          command 
          command 
      elif [ variable1 = value2 ] 
      then 
          command 
          command 
      elif [ variable1 = value3 ] 
      then 
          command 
          command 
      fi 

      相应的case结构： 

      case value in 
          pattern1) 
             command 
             command;; 
          pattern2) 
             command 
             command;; 
          ... 
          patternn) 
             command; 
       esac 

     * case语句只执行第一个匹配模式 

     例：使用case语句建立一个菜单选择shell script 

     #Display a menu </pre>
<pre class="code">     echo _ 
     echo &quot;1 Restore&quot; 
     echo &quot;2 Backup&quot; 
     echo &quot;3 Unload&quot; 
     echo 

     #Read and excute the user&#039;s selection </pre>
<pre class="code">     echo -n &quot;Enter Choice:&quot; 
     read CHOICE 

     case &quot;$CHOICE&quot; in 
      1) echo &quot;Restore&quot;;; 
      2) echo &quot;Backup&quot;;; 
      3) echo &quot;Unload&quot;;; 
      *) echo &quot;Sorry $CHOICE is not a valid choice 
              exit 1 
      esac 

      在上例中，*指默认匹配动作。此外，case模式中也可以使用逻辑操作，如下所示 </pre>

<p>
： 
</p>
<pre class="code">      pattern1 | pattern2 ) command 
                              command ;; 

      这样可以将上面示例程序中允许用户输入数字或每一个大写字母。 

      case &quot;$CHOICE&quot; in 
              1|R) echo &quot;Restore&quot;;; 
              2|B) echo &quot;Backup&quot;;; 
              3|U) echo &quot;Unload&quot;;; 
              *) echo &quot;Sorry $CHOICE is not a valid choice 
                      exit 1 
      esac </pre>

<p>
(5)循环控制 
</p>
<pre class="code">  &lt;1&gt; while循环: 
      格式： 
              while command 
              do 
                      command 
                      command 
                      command 
                      ... 
              done 

      例： 计算1到5的平方 
      #!/bin/sh </pre>
<pre class="code">      # </pre>
<pre class="code">      #Filename: square.sh </pre>
<pre class="code">      int=1 

      while [ $int -le 5 ] 
      do 
              sq=`expr $int \* $int` 
              echo $sq 
              int=`expr $int + 1` 
      done 
      echo &quot;Job completed&quot; 

      $ sh square.sh 
      1 
      4 
      9 
      16 
      25 
      Job completed 

    &lt;2&gt; until循环结构： 
      格式： 
              until command 
              do 
                      command 
                      command 
                      .... 
                      command 
              done 

      示例：使用until结构计算1-5的平方 
      #!/bin/sh </pre>
<pre class="code">      int=1 

      until [ $int -gt 5 ] 
      do 
              sq=`expr $int \* $int` 
              echo $sq 
              int=`expr $int + 1` 
      done 
      echo &quot;Job completed&quot; 

   &lt;3&gt; 使用shift对不定长的参数进行处理 
      在以上的示例中我们总是假设命令行参数唯一或其个数固定，或者使用$*将整个命 </pre>

<p>
令 
</p>
<pre class="code">      行参数传递给shell script进行处理。对于参数个数不固定并且希望对每个命令参 </pre>

<p>
数 
</p>
<pre class="code">      进行单独处理时则需要shift命令。使用shift可以将命令行位置参数依次移动位置 </pre>

<p>
， 
</p>
<pre class="code">      即$2-&gt;$1, $3-&gt;$2. 在移位之前的第一个位置参数$1在移位后将不在存在。 

      示例如下： 

      #!/bin/sh </pre>
<pre class="code">      # </pre>
<pre class="code">      #Filename: shifter </pre>
<pre class="code">       until [ $# -eq 0 ] </pre>
<pre class="code">       do 
          echo &quot;Argument is $1 and `expr $# - 1` argument(s) remain&quot; 
          shift 
       done 


       $ shifter 1 2 3 4 
       Argument is 1 and 3 argument(s) remain 
       Argument is 2 and 2 argument(s) remain 
       Argument is 3 and 1 argument(s) remain 
       Argument is 4 and 0 argument(s) remain 
       $ 

       使用shift时，每进行一次移位，$#减1，使用这一特性可以用until循环对每个参 </pre>
<pre class="code">       数进行处理，如下示例中是一个求整数和的shell script: 

      #!/bin/sh </pre>
<pre class="code">      # sumints - a program to sum a series of integers </pre>
<pre class="code">      # </pre>
<pre class="code">       if [ $# -eq 0 ] </pre>
<pre class="code">       then 
          echo &quot;Usage: sumints integer list&quot; 
          exit 1 
       fi 

       sum=0 

       until [ $# -eq 0 ] </pre>
<pre class="code">       do 
          sum=`expr $sum + $1` 
          shift 
       done 
       echo $sum 


      $ sh sumints 324 34 34 12 34 
      438 
      $ 

      使用shift的另一个原因是Bourne Shell的位置参数变量为$1~$9, 因此通过位置变 </pre>

<p>
量 
</p>
<pre class="code">      只能访问前9个参数。但这并不等于在命令行上最多只能输入9个参数。此时如果想 </pre>

<p>
访问 
</p>
<pre class="code">      前9个参数之后的参数，就必须使用shift. 

      另外shift后可加整数进行一次多个移位，如： 

              shift 3 


  &lt;4&gt;. for循环 
     格式： 
              for var in arg1 arg2 ... argn 
              do 
                      command 
                      .... 
                      command 
              done 

      示例： 
      $ for letter in a b c d e; do echo $letter;done 
      a 
      b 
      c 
      d 
      e 

      对当前目录下的所有文件操作： 
      $ for i in * 
        do 
              if [ -f $i ] 
              then 
                      echo &quot;$i is a file&quot; 
              elif [ -d $i ] 
                      echo &quot;$i is a directory&quot; 
              fi 
        done 

      求命令行上所有整数之和： 
      #!/bin/sh </pre>
<pre class="code">      sum=0 

      for INT in $* 
      do 
              sum=`expr $sum + $INT` 
      done 

      echo $sum 


    &lt;6&gt; 从循环中退出： break和continue命令 
      break 立即退出循环 
      continue 忽略本循环中的其他命令，继续下一下循环 

      在shell编程中有时我们要用到进行无限循环的技巧，也就是说这种循环一直执行 </pre>

<p>
碰 
</p>
<pre class="code">      到break或continue命令。这种无限循环通常是使用true或false命令开始的。UNIX 
      系统中的true总是返加0值，而false则返回非零值。如下所示： 

      #一直执行到程序执行了break或用户强行中断时才结束循环 </pre>
<pre class="code">      while true 
      do 
              command 
              .... 
              command 
      done 

      上面所示的循环也可以使用until false, 如下： 

      until false 
      do 
              command 
              .... 
              command 
      done 

      在如下shell script中同时使用了continue,break以及case语句中的正规表达式用 </pre>

<p>
法： 
</p>
<pre class="code">       #!/bin/sh </pre>
<pre class="code">       # Interactive program to restore, backup, or unload </pre>
<pre class="code">       # a directory </pre>
<pre class="code">       echo &quot;Welcome to the menu driven Archive program&quot; 

       while true 
       do 
       # Display a Menu </pre>
<pre class="code">          echo 
          echo &quot;Make a Choice from the Menu below&quot; 
          echo _ 
          echo &quot;1 Restore Archive&quot; 
          echo &quot;2 Backup directory&quot; 
          echo &quot;3 Unload directory&quot; 
          echo &quot;4 Quit&quot; 
          echo 

       # Read the user&#039;s selection </pre>
<pre class="code">          echo -n &quot;Enter Choice: &quot; 

          read CHOICE 

          case $CHOICE in 
             [1-3] ) echo 
                     # Read and validate the name of the directory </pre>
<pre class="code">                     echo -n &quot;What directory do you want? &quot; 
                     read WORKDIR 

                     if [ ! -d &quot;$WORKDIR&quot; ] 
                     then 
                        echo &quot;Sorry, $WORKDIR is not a directory&quot; 
                        continue 
                     fi 

                     # Make the directory the current working directory </pre>
<pre class="code">                     cd $WORKDIR;; 

                  4) :;; # :为空语句，不执行任何动作 </pre>
<ul>
<li class="level1"><div class="li">) echo “Sorry, $CHOICE is not a valid choice” </div>
</li>
</ul>

<p>
                       continue 
</p>
<pre class="code">          esac 

          case &quot;$CHOICE&quot; in 
             1) echo &quot;Restoring...&quot; 
                cpio -i &lt;/dev/rmt/0h;; 

             2) echo &quot;Archiving...&quot; 
                ls | cpio -o &gt;/dev/rmt/0h;; 

             3) echo &quot;Unloading...&quot; 
                ls | cpio -o &gt;/dev/rmt/0h;; 

             4) echo &quot;Quitting&quot; 
                break;; 
          esac 

       #Check for cpio errors </pre>
<pre class="code">          if [ $? -ne 0 ] 
          then 
             echo &quot;A problem has occurred during the process&quot; 
             if [ $CHOICE = 3 ] 
             then 
                echo &quot;The directory will not be erased&quot; 
             fi 

             echo &quot;Please check the device and try again&quot; 
             continue 
          else 
             if [ $CHOICE = 3 ] 
             then 
                rm * 
             fi 
          fi 
       done </pre>

<p>
(6)结构化编程：定义函数 
</p>
<pre class="code"> 同其他高级语言一样，shell也提供了函数功能。函数通常也称之为子过程(subroutine) </pre>

<p>
, 
</p>
<pre class="code"> 其定义格式如下： 

 funcname() 
 { 
      command 
      ... 
      command; #分号 </pre>
<pre class="code"> } 

 定义函数之后，可以在shell中对此函数进行调用，使用函数定义可以将一个复杂的程序 </pre>

<p>
分 
</p>
<pre class="code"> 为多个可管理的程序段，如下所示： 

      # start program </pre>
<pre class="code">       setup () 
       { command list ; } 

       do_data () 
       { command list ; } 

       cleanup () 
       { command list ; } 

       errors () 
       { command list ; } 

       setup 
       do_data 
       cleanup 
       # end program </pre>
<pre class="code">   技巧： 
      . 在对函数命名时最好能使用有含义的名字，即函数名能够比较准确的描述函数所 </pre>

<p>
完成 
</p>
<pre class="code">        的任务。 
      . 为了程序的维护方便，请尽可能使用注释 


   使用函数的另一个好处就是可以在一个程序中的不同地方执行相同的命令序列(函数), 
   如下所示： 

   iscontinue() 
   { 
      while true 
      do 
              echo -n &quot;Continue?(Y/N)&quot; 
              read ANSWER 

              case $ANSWER in 
                      [Yy]) return 0;; 
                      [Nn]) return 1;; 
                      *) echo &quot;Answer Y or N&quot;;; 
              esac 
      done 
   } 

   这样可以在shell编程中调用iscontinue确定是否继续执行： 

   if iscontinue 
   then 
      continue 
   else 
      break 
   fi 


** shell函数与shell程序非常相似，但二者有一个非常重要的差别：shell程序是由子sh </pre>

<p>
ell 
</p>
<pre class="code">   执行的，而shell函数则是作为当前shell的一部分被执行的，因此在当前shell中可以 </pre>

<p>
改 
</p>
<pre class="code">   变函数的定义。此外在任意shell(包括交互式的shell)中均可定义函数，如： 

   $ dir 
   dir: not found 
   $ dir () { ls -l ;} 
   $ dir 
   total 5875 
   -rw-r--r-- 1 hbwork 100 Nov 10 23:16 doc 
   -rw-r--r-- 1 hbwork 2973806 Nov 10 23:47 ns40docs.zip 
   -rw-r--r-- 1 hbwork 1715011 Nov 10 23:30 ns840usr.pdf 
   -rw-r--r-- 1 hbwork 1273409 Sep 23 1998 radsol21b6.tar.Z 
   -rw-r--r-- 1 hbwork 7526 Nov 10 23:47 wget-log 
   -rw-r--r-- 1 hbwork 1748 Nov 13 21:51 wget-log.1 
   $ unset dir 
   $ dir () { 
   &gt; echo &quot;Permission Link Owner Group File_SZ LastAccess FileName&quot; 
   &gt; echo &quot;-----------------------------------------------------------&quot; 
   &gt; ls -l $*; 
   &gt; } 

      $ dir 
      Permission Link Owner Group File_SZ LastAccess FileName 
      ----------------------------------------------------------- 
      total 5875 
      -rw-r--r-- 1 hbwork 100 Nov 10 23:16 doc 
      -rw-r--r-- 1 hbwork 2973806 Nov 10 23:47 ns40docs.zip 
      -rw-r--r-- 1 hbwork 1715011 Nov 10 23:30 ns840usr.pdf 
      -rw-r--r-- 1 hbwork 1273409 Sep 23 1998 radsol21b6.tar.Z 
      -rw-r--r-- 1 hbwork 7526 Nov 10 23:47 wget-log 
      -rw-r--r-- 1 hbwork 1748 Nov 13 21:51 wget-log.1 

   通常情况下，shell script是在子shell中执行的，困此在此子shell中对变量所作的 
   修改对父shell不起作用。点(.) 命令使用shell在不创建子shell而由当前shell读取 
   并执行一个shell script, 可以通过这种方式来定义函数及变量。此外点(.)命令最 
   常用的功能就是通过读取.profile来重新配置初始化login变量。如下所示： 

   $ . .profile 
   (csh相对于.命令的是source命令). </pre>

<p>
(7)使用And/Or结构进行有条件的命令执行 
 &lt;1&gt; And , 仅当第一个命令成功时才有执行后一个命令,如同在逻辑与表达式中如果前面的 
</p>
<pre class="code">   结果为真时才有必要继续运算，否则结果肯定为假。 

   格式如下： 

   command1 &amp;&amp; command2 

   例：rm $TEMPDIR/* &amp;&amp; echo &quot;File successfully removed&quot; 

       等价于 

       if rm $TEMPDIR/* 
       then 
              echo &quot;File successfully removed&quot; 
       fi </pre>

<p>
 &lt;2&gt;Or, 与AND相反，仅当前一个命令执行出错时才执行后一条命令 
</p>
<pre class="code">  例： rm $TEMPDIR/* || echo &quot;File not removed&quot; 

       等价与： 

       if rm $TEMPDIR/* 
       then 
              command 
       else 
              echo &quot;File not removed&quot; 
       fi </pre>

<p>
 &lt;3&gt; 混合命令条件执行 
</p>
<pre class="code">   command1 &amp;&amp; command2 &amp;&amp; command3 
      当command1, command2成功时才执行command3 

   command1 &amp;&amp; command2 || comamnd3 
       仅当command1成功，command2失败时才执行command3 

   当然可以根据自己的需要进行多种条件命令的组合，在此不多讲述。 </pre>

<p>
(8) 使用getopts命令读取unix格式选项 
</p>
<pre class="code">  UNIX格式选项指如下格式的命令行参数： 
  command -options parameters 

  使用格式： 
  getopts option_string variable 

  具体使用方法请参考getopts的在线文档(man getopts). 

  示例如下： 

       #newdate </pre>
<pre class="code">       if [ $# -lt 1 ] </pre>
<pre class="code">       then 
           date 
       else 
          while getopts mdyDHMSTjJwahr OPTION 
          do 
             case $OPTION 
             in 
                m) date &#039;+%m &#039;;; # Month of Year </pre>
<pre class="code">                d) date &#039;+%d &#039;;; # Day of Month </pre>
<pre class="code">                y) date &#039;+%y &#039;;; # Year </pre>
<pre class="code">                D) date &#039;+%D &#039;;; # MM/DD/YY </pre>
<pre class="code">                H) date &#039;+%H &#039;;; # Hour </pre>
<pre class="code">                M) date &#039;+%M &#039;;; # Minute </pre>
<pre class="code">                S) date &#039;+%S &#039;;; # Second </pre>
<pre class="code">                T) date &#039;+%T &#039;;; # HH:MM:SS </pre>
<pre class="code">                j) date &#039;+%j &#039;;; # day of year </pre>
<pre class="code">                J) date &#039;+%y%j &#039;;;# 5 digit Julian date </pre>
<pre class="code">                w) date &#039;+%w &#039;;; # Day of the Week </pre>
<pre class="code">                a) date &#039;+%a &#039;;; # Day abbreviation </pre>
<pre class="code">                h) date &#039;+%h &#039;;; # Month abbreviation </pre>
<pre class="code">                r) date &#039;+%r &#039;;; # AM-PM time </pre>
<pre class="code">                \?) echo &quot;Invalid option $OPTION&quot;;; 
             esac 
          done 
       fi 

       $ newdate -J 
       94031 
       $ newdate -a -h -d 
       Mon 
       Jan 
       31 
       $ newdate -ahd 
       Mon 
       Jan 
       31 
       $ 


       示例程序：复制程序 

       # Syntax: duplicate [-c integer] [-v] filename </pre>
<pre class="code">       # where integer is the number of duplicate copies </pre>
<pre class="code">       # and -v is the verbose option </pre>
<pre class="code">       COPIES=1 
       VERBOSE=N 


       while getopts vc: OPTION 
       do 
          case $OPTION 
          in 
             c) COPIES=$OPTARG;; 
             v) VERBOSE=Y;; 
             \?) echo &quot;Illegal Option&quot; 
                 exit 1;; 
          esac 
       done 

       if [ $OPTIND -gt $# ] </pre>
<pre class="code">       then 
          echo &quot;No file name specified&quot; 
          exit 2 
       fi 


       shift `expr $OPTIND -1` 

       FILE=$1 
       COPY=0 

       while [ $COPIES -gt $COPY ] 
       do 
          COPY=`expr $COPY + 1` 
          cp $FILE ${FILE}${COPY} 
          if [ VERBOSE = Y ] 
          then 
             echo ${FILE}${COPY} 
          fi 
       done 


       $ duplicate -v fileA 
       fileA1 
       $ duplicate -c 3 -v fileB 
       fileB1 
       fileB2 
       fileB3 </pre>

<p>
4. Shell的定制 
</p>
<pre class="code"> 通常使用shell的定制来控制用户自己的环境，比如改变shell的外观(提示符)以及增强 
 自己的命令。 </pre>

<p>
(1)通常环境变量来定制shell 
</p>
<pre class="code"> 通常改变环境变量可以定制shell的工作环境。shell在处理信息时会参考这些环境变量 
 ，改变环境变量的值在一定程度上改变shell的操作方式，比如改变命令行提示符。 

 .使用IFS增加命令行分隔符 
   默认状态下shell的分隔符为空格、制表符及换行符，但可以通过改变IFS的值加入自 </pre>

<p>
己 
</p>
<pre class="code">   的分隔符。如下所示： 


   $ IFS=&quot;:&quot; 
   $ echo:Hello:my:Friend 
   Hello my Friend </pre>

<p>
(2)加入自己的命令及函数 
</p>
<pre class="code"> 如下程序： 
 #Directory and Prompt change program </pre>
<pre class="code"> #Syntax: chdir directory </pre>
<pre class="code"> if [ ! -d &quot;$1&quot; ] 
 then 
      echo &quot;$1 is not a directory&quot; 
      exit 1 
 fi 

 cd $1 
 PS1=`pwd`$ 
 export PS1 

 $ chdir /usr/home/teresa 
 $ 

 但此程序在执行时系统提示符并不会改变，因为此程序是在子shell中执行的。因此其变 </pre>

<p>
量 
对当前shell并无影响，要想对当前shell起作用，最好是将此作为函数写在自己的.profile 
中 
或建立自己的个人函数文件.persfuncs 
</p>
<pre class="code"> #Personal function file persfuncs </pre>
<pre class="code"> chdir() 
 { 
 #Directory and Prompt change program </pre>
<pre class="code"> #Syntax: chdir directory </pre>
<pre class="code"> if [ ! -d &quot;$1&quot; ] 
 then 
      echo &quot;$1 is not a directory&quot; 
      exit 1 
 fi 

 cd $1 
 PS1=`pwd`$ 
 export PS1; 
 } 

 再执行： 
 $ . .persfuncs 
 $ chdir temp 
 /home/hbbwork/temp$ 

 也可在自己的.profile文件中用 . .persfuncs调用.persfuncs. 

 说明：在bash/tcsh中已经使用别名，相对而言别名比此方法更为方便。 </pre>

<p>
5. 有关shell的专门讨论 
(1)shell程序的调试 
</p>
<pre class="code"> 切记：程序员（人）总是会犯错误的，而计算机是不会错的。 
 使用-x进行跟踪执行，执行并显示每一条指令。 </pre>

<p>
(2)命令组 
</p>
<pre class="code"> 用小括号将一组命令括起来，则这些命令会由子shell来完成；而{command_list;}则在 </pre>

<p>
当 
</p>
<pre class="code"> 前shell中执行。这两者的主要区别在于其对shell变量的影响，子shell执行的命令不会 
 影响当前shell中的变量。 

 $ NUMBER=2 
 $ (A=2;B=2;NUMBER=`expr $A + $B`; echo $NUMBER) 
 4 
 $ echo $NUMBER 
 2 
 $ { A=2;B=2;NUMBER=`expr $A + $B`; echo $NUMBER; } 
 4 
 $ echo $NUMBER 
 4 </pre>

<p>
总结： 
</p>
<pre class="code"> 在本章中讲述了Bourne Shell的基本知识,使用shell变量，shell script基础。这些概 </pre>

<p>
念 
</p>
<pre class="code"> 对于理解学习Korn Shell, csh以及其他script编程都是非常有用的。 

 很多OS都有不少语言及一些script功能，但很少有象UNIX SHELL这样灵活强大的script </pre>

<p>
脚 
</p>
<pre class="code"> 本语言能力。 

 对于系统管理员或程序员来说，熟练地使用shell script将对日常工作(系统维护及管理 </pre>

<p>
) 
</p>
<pre class="code"> 非常有用，如果你想作一个合格的系统管理员，强烈建议你进一步深入的了解和使用 
 shell. 

 另外，对于系统管理员来说，PERL也是一个必不可少的script编程语言，尤其是对于处 </pre>

<p>
理 
</p>
<pre class="code"> 文本格式的各种文件，PERL具有shell, awk, sed, grep等的功能，但使用起来更为灵活 </pre>

<p>
， 
</p>
<pre class="code"> 功能也更强大。大家可以参考“Perl By Examples</pre>
