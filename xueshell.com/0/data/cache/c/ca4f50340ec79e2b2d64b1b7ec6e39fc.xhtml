
<h3 class="sectionedit1" id="长期分支_产品分支">长期分支/产品分支</h3>
<div class="level3">

<p>
由于 Git 使用简单的三方合并，所以就算在较长一段时间内，反复多次把某个分支合并到另一分支，也不是什么难事。也就是说，你可以同时拥有多个开放的分支，每个分支用于完成特定的任务，随着开发的推进，你可以随时把某个特性分支的成果并到其他分支中。
</p>

<p>
这种分支长期保留，一直到产品声明周期结束。常用作产品官方库，长期开发分支等。
</p>

<p>
<a href="/beike.com/0/lib/exe/detail.php?id=git_branch_model%3Agit_branch_style&amp;media=git_branch_model:bg2012070503.png" class="media" title="git_branch_model:bg2012070503.png"><img src="/beike.com/0/lib/exe/fetch.php?w=100&amp;tok=0b39a5&amp;media=git_branch_model:bg2012070503.png" class="medialeft" alt="" width="100" /></a>  <a href="/beike.com/0/lib/exe/detail.php?id=git_branch_model%3Agit_branch_style&amp;media=git_branch_model:bg2012070504.png" class="media" title="git_branch_model:bg2012070504.png"><img src="/beike.com/0/lib/exe/fetch.php?w=200&amp;tok=fa2f8d&amp;media=git_branch_model:bg2012070504.png" class="mediaright" alt="" width="200" /></a>
</p>

</div>
<!-- EDIT1 SECTION "长期分支/产品分支" [1-595] -->
<h3 class="sectionedit2" id="短期分支_任务分支">短期分支/任务分支</h3>
<div class="level3">

<p>
在任何规模的项目中都可以使用特性（Topic）分支。一个特性分支是指一个短期的，用来实现单一特性或与其相关工作的分支。可能你在以前的版本控制系统里从未做过类似这样的事情，因为通常创建与合并分支消耗太大。然而在 Git 中，一天之内建立、使用、合并再删除多个分支是常见的事。
</p>

<p>
完成任务就删除的分支，常用作缺陷修复，紧急补丁，试验分支等。
</p>

<p>
<a href="/beike.com/0/lib/exe/detail.php?id=git_branch_model%3Agit_branch_style&amp;media=git_branch_model:bg2012070507.png" class="media" title="git_branch_model:bg2012070507.png"><img src="/beike.com/0/lib/exe/fetch.php?w=150&amp;tok=0dbac1&amp;media=git_branch_model:bg2012070507.png" class="mediacenter" alt="" width="150" /></a>
</p>

</div>
<!-- EDIT2 SECTION "短期分支/任务分支" [596-1160] -->
<h3 class="sectionedit3" id="远程分支_跟踪分支">远程分支/跟踪分支</h3>
<div class="level3">

<p>
在Git中‘追踪分支’是用与联系本地分支和远程分支的. 如果你在’追踪分支&#039;(Tracking Branches)上执行推送(push)或拉取(pull)时,　它会自动推送(push)或拉取(pull)到关联的远程分支上.
</p>

<p>
<a href="/beike.com/0/lib/exe/detail.php?id=git_branch_model%3Agit_branch_style&amp;media=git_branch_model:wl_nrpqs.jpg" class="media" title="git_branch_model:wl_nrpqs.jpg"><img src="/beike.com/0/lib/exe/fetch.php?w=300&amp;tok=0ca785&amp;media=git_branch_model:wl_nrpqs.jpg" class="mediacenter" title=" " alt=" " width="300" /></a>
</p>

<p>
如果你经常要从远程仓库里拉取(pull)分支到本地,并且不想很麻烦的使用”git pull “这种格式; 那么就应当使用‘追踪分支&#039;(Tracking Branches).
</p>

<p>
‘git clone‘命令会自动在本地建立一个&#039;master&#039;分支，它是&#039;origin/master&#039;的‘追踪分支’. 而&#039;origin/master&#039;就是被克隆(clone)仓库的&#039;master&#039;分支.
</p>

<p>
译者注: origin一般是指原始仓库地址的别名.
</p>

<p>
你可以在使用&#039;git branch&#039;命令时加上&#039;–track&#039;参数, 来手动创建一个&#039;追踪分支&#039;.
git branch –track experimental origin/experimental
</p>

<p>
当你运行下命令时:
$ git pull experimental
</p>

<p>
它会自动从‘origin&#039;抓取(fetch)内容，再把远程的&#039;origin/experimental&#039;分支合并进(merge)本地的&#039;experimental&#039;分支.
</p>

<p>
当要把修改推送(push)到origin时, 它会将你本地的&#039;experimental&#039;分支中的修改推送到origin的‘experimental&#039;分支里,　而无需指定它(origin).
</p>

</div>
<!-- EDIT3 SECTION "远程分支/跟踪分支" [1161-] -->