<hr />

<h3 class="sectionedit1" id="如何回退到某个指定版本提交">如何回退到某个指定版本提交？</h3>
<div class="level3">

<p>
如下版本号，如何恢复到此提交?
</p>
<pre class="code">commit 4a155e5b3b4548f5f8139b5210b9bb477fa549de
Author: John Doe &lt;Doe.John.10@gmail.com&gt;
Date:   Thu Jul 21 20:51:38 2011 -0500</pre>

<p>
执行如下操作，但是也将失去当前版本到指定版本之间的数据！
</p>
<pre class="code">git reset --hard 4a155e5</pre>
<hr />

</div>
<!-- EDIT1 SECTION "如何回退到某个指定版本提交？" [7-377] -->
<h3 class="sectionedit2" id="如何回退本地最新的一次提交">如何回退本地最新的一次提交？</h3>
<div class="level3">
<pre class="code bash">    $ <span class="kw2">git commit</span> ...              <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>
    $ <span class="kw2">git reset</span> <span class="re5">--soft</span> <span class="st_h">'HEAD^'</span>    <span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>
    $ edit                        <span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>
    $ <span class="kw2">git add</span> ....                <span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>
    $ <span class="kw2">git commit</span> <span class="re5">-c</span> ORIG_HEAD     <span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span></pre>
<ol>
<li class="level1"><div class="li"> This is what you want to undo</div>
</li>
<li class="level1"><div class="li"> This is most often done when you remembered what you just committed is incomplete, or you misspelled your commit message, or both. Leaves working tree as it was before “reset”. (The quotes may or may not be required in your shell)</div>
</li>
<li class="level1"><div class="li"> Make corrections to working tree files</div>
</li>
<li class="level1"><div class="li"> Stage changes for commit</div>
</li>
<li class="level1"><div class="li"> reset” copies the old head to .git/ORIG_HEAD; redo the commit by starting with its log message. If you do not need to edit the message further, you can give -C option instead</div>
</li>
</ol>
<hr />

</div>
<!-- EDIT2 SECTION "如何回退本地最新的一次提交？" [378-1170] -->
<h3 class="sectionedit3" id="如何强迫保持本地master分支与远程仓库同步">如何强迫保持本地master分支与远程仓库同步？</h3>
<div class="level3">
<ul>
<li class="level1"><div class="li"> 首先创建分支，保留当前工作状态</div>
</li>
</ul>
<pre class="code bash">$ <span class="kw2">git commit</span> <span class="re5">-a</span> <span class="re5">-m</span> <span class="st0">&quot;Saving my work, just in case&quot;</span>
$ <span class="kw2">git branch</span> my-saved-work</pre>
<ul>
<li class="level1"><div class="li"> 然后强制同步远端master分支；</div>
</li>
</ul>
<pre class="code bash">$ <span class="kw2">git fetch</span> origin
$ <span class="kw2">git reset</span> <span class="re5">--hard</span> origin<span class="sy0">/</span>master</pre>
<hr />

</div>
<!-- EDIT3 SECTION "如何强迫保持本地master分支与远程仓库同步？" [1171-1516] -->
<h3 class="sectionedit4" id="放弃最后一次提交">放弃最后一次提交？</h3>
<div class="level3">

<p>
你做了一次提交后，你想取消刚才的提交？
</p>
<pre class="code bash">$ <span class="kw2">git reset</span> HEAD~
Unstaged changes after reset:
M Zeus
M Adonis</pre>
<hr />

</div>
<!-- EDIT4 SECTION "放弃最后一次提交？" [1517-1703] -->
<h3 class="sectionedit5" id="放弃某一次提交">放弃某一次提交？</h3>
<div class="level3">

<p>
使用~符号，HEAD~1是上两次提交。
</p>

<p>
$ git reset HEAD~3
</p>
<hr />

</div>
<!-- EDIT5 SECTION "放弃某一次提交？" [1704-1809] -->
<h3 class="sectionedit6" id="放弃合并或者pull操作">放弃合并或者pull操作？</h3>
<div class="level3">
<pre class="code bash">$ <span class="kw2">git pull</span>                         <span class="sy0">&lt;</span><span class="nu0">1</span><span class="sy0">&gt;</span>
Auto-merging nitfol
CONFLICT <span class="br0">&#40;</span>content<span class="br0">&#41;</span>: Merge conflict <span class="kw1">in</span> nitfol
Automatic merge failed; fix conflicts and <span class="kw1">then</span> commit the result.
$ <span class="kw2">git reset</span> <span class="re5">--hard</span>                 <span class="sy0">&lt;</span><span class="nu0">2</span><span class="sy0">&gt;</span>
$ <span class="kw2">git pull</span> . topic<span class="sy0">/</span>branch          <span class="sy0">&lt;</span><span class="nu0">3</span><span class="sy0">&gt;</span>
Updating from <span class="nu0">41223</span>... to <span class="nu0">13134</span>...
Fast-forward
$ <span class="kw2">git reset</span> <span class="re5">--hard</span> ORIG_HEAD       <span class="sy0">&lt;</span><span class="nu0">4</span><span class="sy0">&gt;</span></pre>
<hr />

</div>
<!-- EDIT6 SECTION "放弃合并或者pull操作？" [1810-2213] -->
<h3 class="sectionedit7" id="别丢失head">别丢失HEAD？</h3>
<div class="level3">

<p>
HEAD好似一个游标，通常指向最新提交，随最新提交向前移动。一些Git命令让你来移动 它。 例如：
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git reset</span> HEAD~<span class="nu0">3</span></pre>

<p>
将立即向回移动HEAD三个提交。这样所有Git命令都表现得好似你没有做那最后三个提交， 然而你的文件保持在现在的状态。具体应用参见帮助页。
</p>

<p>
但如何回到将来呢？过去的提交对将来一无所知。
</p>

<p>
如果你有原先Head的SHA1值，那么：
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git reset</span> 1b6d</pre>

<p>
但假设你从来没有记下呢？别担心，像这些命令，Git保存原先的Head为一个叫 ORGI_HEAD的标记，你可以安全体面的返回：
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git reset</span> ORIG_HEAD</pre>

</div>
<!-- EDIT7 SECTION "别丢失HEAD？" [2214-] -->