
<h3 class="sectionedit1" id="shell_exec_解析">shell exec 　 解析</h3>
<div class="level3">

<p>
　exec和source都属于bash内部命令（builtins commands），在bash下输入man exec或man source可以查看所有的内部命令信息。
</p>

<p>
bash shell的命令分为两类：外部命令和内部命令。外部命令是通过系统调用或独立的程序实现的，如sed、awk等等。内部命令是由特殊的文件格式（.def）所实现，如cd、history、exec等等。
</p>

<p>
　　在说明exe和source的区别之前，先说明一下fork的概念。
</p>

<p>
　　fork是linux的系统调用，用来创建子进程（child process）。子进程是父进程(parent process)的一个副本，从父进程那里获得一定的资源分配以及继承父进程的环境。子进程与父进程唯一不同的地方在于pid（process id）。
</p>

<p>
 环境变量（传给子进程的变量，遗传性是本地变量和环境变量的根本区别）只能单向从父进程传给子进程。不管子进程的环境变量如何变化，都不会影响父进程的环境变量。 
</p>

<p>
shell script:
</p>

<p>
有两种方法执行shell scripts，一种是新产生一个shell，然后执行相应的shell scripts；一种是在当前shell下执行，不再启用其他shell。
</p>

<p>
新产生一个shell然后再执行scripts的方法是在scripts文件开头加入以下语句
</p>

<p>
#!/bin/sh
</p>

<p>
一般的script文件(.sh)即是这种用法。这种方法先启用新的sub-shell（新的子进程）,然后在其下执行命令。
</p>

<p>
另外一种方法就是上面说过的source命令，不再产生新的shell，而在当前shell下执行一切命令。
</p>

<p>
source:
</p>

<p>
source命令即点(.)命令。
</p>

<p>
在bash下输入man source，找到source命令解释处，可以看到解释”Read and execute commands from filename in the current shell environment and …”。从中可以知道，source命令是在当前进程中执行参数文件中的各个命令，而不是另起子进程(或sub-shell)。
</p>

<p>
 exec:
</p>

<p>
在bash下输入man exec，找到exec命令解释处，可以看到有”No new process is created.”这样的解释，这就是说exec命令不产生新的子进程。那么exec与source的区别是什么呢？
</p>

<p>
exec命令在执行时会把当前的shell process关闭，然后换到后面的命令继续执行。
</p>

<p>
1. 系统调用exec是以新的进程去代替原来的进程，但进程的PID保持不变。因此，可以这样认为，exec系统调用并没有创建新的进程，只是替换了原来进程上下文的内容。原进程的代码段，数据段，堆栈段被新的进程所代替。
</p>

<p>
一个进程主要包括以下几个方面的内容:
</p>

<p>
(1)一个可以执行的程序
</p>

<p>
(2) 与进程相关联的全部数据(包括变量，内存，缓冲区)
</p>

<p>
(3)程序上下文(程序计数器PC,保存程序执行的位置) 
</p>

<p>
2. exec是一个函数簇，由6个函数组成，分别是以excl和execv打头的。
</p>

<p>
执行exec系统调用，一般都是这样，用fork()函数新建立一个进程，然后让进程去执行exec调用。我们知道，在fork()建立新进程之后，父进各与子进程共享代码段，但数据空间是分开的，但父进程会把自己数据空间的内容copy到子进程中去，还有上下文也会copy到子进程中去。而为了提高效率，采用一种写时copy的策略，即创建子进程的时候，并不copy父进程的地址空间，父子进程拥有共同的地址空间，只有当子进程需要写入数据时(如向缓冲区写入数据),这时候会复制地址空间，复制缓冲区到子进程中去。从而父子进程拥有独立的地址空间。而对于fork()之后执行exec后，这种策略能够很好的提高效率，如果一开始就copy,那么exec之后，子进程的数据会被放弃，被新的进程所代替。
</p>

<p>
 3. exec与system的区别
</p>

<p>
(1) exec是直接用新的进程去代替原来的程序运行，运行完毕之后不回到原先的程序中去。
</p>

<p>
(2) system是调用shell执行你的命令，system=fork+exec+waitpid,执行完毕之后，回到原先的程序中去。继续执行下面的部分。
</p>

<p>
总之，如果你用exec调用，首先应该fork一个新的进程，然后exec. 而system不需要你fork新进程，已经封装好了。
</p>

</div>
