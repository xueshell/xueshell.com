<pre class="code bash"><span class="kw2">cat</span> <span class="re4">$1</span> <span class="sy0">|</span> <span class="kw2">sed</span> <span class="re5">-e</span> <span class="st_h">'s/&gt;/?\/g'</span> <span class="sy0">|</span> <span class="kw2">grep</span> <span class="st_h">''</span><span class="sy0">&lt;</span>a<span class="st_h">' | while IFS='</span><span class="st0">&quot;' read a b c
do echo <span class="es2">$b</span>
done</span></pre>

<h2 class="sectionedit1" id="shell中read的选项及用法">Shell中read的选项及用法</h2>
<div class="level2">

<p>
1. Read的一些选项
</p>

<p>
　Read可以带有-a, -d, -e, -n, -p, -r, -t, 和 -s八个选项。
</p>

<p>
-a ：将内容读入到数值中
</p>

<p>
echo -n “Input muliple values into an array:”
read -a array
echo “get ${#array[@]} values in array”
</p>

<p>
-d ：表示delimiter，即定界符，一般情况下是以IFS为参数的间隔，但是通过-d，我们可以定义一直读到出现执行的字符位置。例如read –d madfds value，读到有m的字符的时候就不在继续向后读，例如输入为 hello m，有效值为“hello”，请注意m前面的空格等会被删除。这种方式可以输入多个字符串，例如定义“.”作为结符号等等。
</p>

<p>
-e ：只用于互相交互的脚本，它将readline用于收集输入行。读到这几句话不太明白什么意思，先跳过。
</p>

<p>
-n ：用于限定最多可以有多少字符可以作为有效读入。例如echo –n 4 value1 value2，如果我们试图输入12 34，则只有前面有效的12 3，作为输入，实际上在你输入第4个字符‘3’后，就自动结束输入。这里结果是value为12，value2为3。
</p>

<p>
-p ：用于给出提示符，在前面的例子中我们使用了echo –n “…“来给出提示符，可以使用read –p ‘… my promt?’value的方式只需一个语句来表示。
</p>

<p>
-r ：在参数输入中，我们可以使用’/’表示没有输入完，换行继续输入，如果我们需要行最后的’/’作为有效的字符，可以通过-r来进行。此外在输入字符中，我们希望/n这类特殊字符生效，也应采用-r选项。
</p>

<p>
-s ：对于一些特殊的符号，例如箭头号，不将他们在terminal上打印，例如read –s key，我们按光标，在回车之后，如果我们要求显示，即echo，光标向上，如果不使用-s，在输入的时候，输入处显示^[[A，即在terminal上 打印，之后如果要求echo，光标会上移。
</p>

<p>
-t ：用于表示等待输入的时间，单位为秒，等待时间超过，将继续执行后面的脚本，注意不作为null输入，参数将保留原有的值
</p>

<p>
2. Read的相关实例
</p>

<p>
a. 拼接文件
</p>

<p>
#将afile文件中的前三行与bfile中的前四行拼接在一起
</p>
<pre class="code">while read -u3 i &amp;&amp; read -u4 j;do
echo $i $j
done 3&lt;afile 4&lt;bfile</pre>

<p>
b. 输入不在终端显示
</p>
<pre class="code">read -p &quot;Input passwd:&quot; -s Passwd
echo $Passwd</pre>

<p>
c. 限时输入,否则退出
</p>

<p>
#延迟五秒，没有输入将自动退出
</p>
<pre class="code">read -p &quot;Input a number:&quot; -t 5 Number</pre>

<p>
d. 读取限定字符
</p>

<p>
#从输入中取5个字符
</p>
<pre class="code">read -p &quot;Input a word:&quot; -n 5 Word</pre>

<p>
e. 等待输出q退出
</p>

<p>
#输入，直到输入q，将自动退出
read -dp -p “Input some words end with q:” word
</p>

</div>
<!-- EDIT1 SECTION "Shell中read的选项及用法" [106-2842] -->
<h2 class="sectionedit2" id="read_基本读取">read 基本读取</h2>
<div class="level2">

<p>
read命令 -n(不换行) -p(提示语句) -n(字符个数) -t(等待时间) -s(不回显)
</p>

<p>
1、基本读取
</p>

<p>
read命令接收标准输入（键盘）的输入，或其他文件描述符的输入（后面在说）。得到输入后，read命令将数据放入一个标准变量中。下面是read命令
</p>

<p>
的最简单形式::
</p>
<pre class="code">#!/bin/bash

echo -n &quot;Enter your name:&quot;   //参数-n的作用是不换行，echo默认是换行

read  name                   //从键盘输入

echo &quot;hello $name,welcome to my program&quot;     //显示信息

exit 0                       //退出shell程序。

//********************************</pre>

<p>
由于read命令提供了-p参数，允许在read命令行中直接指定一个提示。
</p>

<p>
所以上面的脚本可以简写成下面的脚本::
</p>
<pre class="code">#!/bin/bash

read -p &quot;Enter your name:&quot; name

echo &quot;hello $name, welcome to my program&quot;

exit 0</pre>

<p>
在上面read后面的变量只有name一个，也可以有多个，这时如果输入多个数据，则第一个数据给第一个变量，第二个数据给第二个变量，如果输入数据个数过多，则最后所有的值都给第一个变量。如果太少输入不会结束。
</p>

<p>
<em><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong>*

在read命令行中也可以不指定变量.如果不指定变量，那么read命令会将接收到的数据放置在环境变量REPLY中。</em>
</p>

<p>
例如::
</p>

<p>
read -p “Enter a number”<em>

环境变量REPLY中包含输入的所有数据，可以像使用其他变量一样在shell脚本中使用环境变量REPLY.</em>
</p>

</div>

<h4 id="计时输入">2、计时输入</h4>
<div class="level4">

<p>
使用read命令存在着潜在危险。脚本很可能会停下来一直等待用户的输入。如果无论是否输入数据脚本都必须继续执行，那么可以使用-t选项指定一个计时器。
</p>

<p>
-t选项指定read命令等待输入的秒数。当计时满时，read命令返回一个非零退出状态.    
</p>
<pre class="code">#!/bin/bash

if read -t 5 -p &quot;please enter your name:&quot; name

then 

    echo &quot;hello $name ,welcome to my script&quot;

else

    echo &quot;sorry,too slow&quot;

fi

exit 0
</pre>

<p>
除了输入时间计时，还可以设置read命令计数输入的字符。当输入的字符数目达到预定数目时，自动退出，并将输入的数据赋值给变量。   
</p>
<pre class="code">#!/bin/bash

read -n1 -p &quot;Do you want to continue [Y/N]?&quot; answer

case $answer in

Y | y)

      echo &quot;fine ,continue&quot;;;

N | n)

      echo &quot;ok,good bye&quot;;;

*)

     echo &quot;error choice&quot;;;

esac

exit 0</pre>

<p>
该例子使用了-n选项，后接数值1，指示read命令只要接受到一个字符就退出。只要按下一个字符进行回答，read命令立即接受输入并将其传给变量。无需按回车键。   
</p>

</div>

<h4 id="默读_输入不显示在监视器上">3、默读（输入不显示在监视器上）</h4>
<div class="level4">

<p>
有时会需要脚本用户输入，但不希望输入的数据显示在监视器上。典型的例子就是输入密码，当然还有很多其他需要隐藏的数据。 
-s选项能够使read命令中输入的数据不显示在监视器上（实际上，数据是显示的，只是read命令将文本颜色设置成与背景相同的颜色）。  
</p>
<pre class="code">#!/bin/bash

read  -s  -p &quot;Enter your password:&quot; pass

echo &quot;your password is $pass&quot;

exit 0 </pre>

</div>

<h4 id="读文件">4、读文件</h4>
<div class="level4">

<p>
最后，还可以使用read命令读取Linux系统上的文件。
</p>

<p>
每次调用read命令都会读取文件中的“一行”文本。当文件没有可读的行时，read命令将以非零状态退出。
</p>

<p>
读取文件的关键是如何将文本中的数据传送给read命令。
</p>

<p>
最常用的方法是对文件使用cat命令并通过管道将结果直接传送给包含read命令的while命令
</p>

<p>
例子::
</p>
<pre class="code">#!/bin/bash

count=1    //赋值语句，不加空格

cat test | while read line        //cat 命令的输出作为read命令的输入,read读到的值放在line中

do

   echo &quot;Line $count:$line&quot;

   count=$[ $count + 1 ]          //注意中括号中的空格。

done

echo &quot;finish&quot;

exit 0</pre>

</div>
<!-- EDIT2 SECTION "read 基本读取" [2843-6808] -->
<h3 class="sectionedit3" id="linux_shell_--_read">Linux shell -- read</h3>
<div class="level3">

<p>
概述：read命令 -d[输入结束字符，默认结束符是换行] 
</p>
<ol>
<li class="level1"><div class="li">p(“提示语句”) </div>
</li>
</ol>
<ol>
<li class="level1"><div class="li">n[字符个数] </div>
</li>
</ol>
<ol>
<li class="level1"><div class="li">t(等待时间) </div>
</li>
</ol>
<ol>
<li class="level1"><div class="li">s(不回显) </div>
</li>
</ol>
<ol>
<li class="level1"><div class="li">a [数组名]</div>
</li>
</ol>

</div>
<!-- EDIT3 SECTION "Linux shell -- read" [6809-7109] -->
<h3 class="sectionedit4" id="基本读取">1、基本读取</h3>
<div class="level3">

<p>
read命令接收标准输入（键盘）的输入，或其他文件描述符的输入（后面在说）。得到输入后，read命令将数据放入一个标准变量中。下面是read命令
</p>

<p>
的最简单形式::
</p>
<pre class="code">#!/bin/bash

echo -n &quot;Enter your name:&quot;   //参数-n的作用是不换行，echo默认是换行

read  name                   //从键盘输入

echo &quot;hello $name,welcome to my program&quot;     //显示信息

exit 0                       //退出shell程序。

//********************************</pre>

<p>
由于read命令提供了-p参数，允许在read命令行中直接指定一个提示。  
所以上面的脚本可以简写成下面的脚本::   
</p>
<pre class="code">
#!/bin/bash

read -p &quot;Enter your name:&quot; name

echo &quot;hello $name, welcome to my program&quot;

exit 0</pre>

<p>
在上面read后面的变量只有name一个，也可以有多个，这时如果输入多个数据，则第一个数据给第一个变量，第二个数据给第二个变量，如果输入数据个数过多，则最后所有的值都给第一个变量。如果太少输入不会结束。  
在read命令行中也可以不指定变量.如果不指定变量，那么read命令会将接收到的数据放置在环境变量REPLY中。   
</p>

<p>
例如::
</p>
<pre class="code">read -p &quot;Enter a number&quot;</pre>

<p>
环境变量REPLY中包含输入的所有数据，可以像使用其他变量一样在shell脚本中使用环境变量REPLY.
</p>

</div>
<!-- EDIT4 SECTION "1、基本读取" [7110-8533] -->
<h3 class="sectionedit5" id="计时输入1">2、计时输入.</h3>
<div class="level3">

<p>
使用read命令存在着潜在危险。脚本很可能会停下来一直等待用户的输入。如果无论是否输入数据脚本都必须继续执行，那么可以使用-t选项指定一个计时器。  
</p>

<p>
-t选项指定read命令等待输入的秒数。当计时满时，read命令返回一个非零退出状态;  
</p>
<pre class="code">#!/bin/bash

if read -t 5 -p &quot;please enter your name:&quot; name

then 

    echo &quot;hello $name ,welcome to my script&quot;

else

    echo &quot;sorry,too slow&quot;

fi

exit 0</pre>

<p>
除了输入时间计时，还可以设置read命令计数输入的字符。当输入的字符数目达到预定数目时，自动退出，并将输入的数据赋值给变量。  
</p>
<pre class="code">#!/bin/bash

read -n 1 -p &quot;Do you want to continue [Y/N]?&quot; answer

case $answer in

Y | y)

      echo &quot;fine ,continue&quot;;;

N | n)

      echo &quot;ok,good bye&quot;;;

*)

     echo &quot;error choice&quot;;;

esac

exit 0</pre>

<p>
该例子使用了-n选项，后接数值1，指示read命令只要接受到一个字符就退出。只要按下一个字符进行回答，read命令立即
</p>

<p>
接受输入并将其传给变量。无需按回车键。
</p>

</div>

<h4 id="默读_输入不显示在监视器上1">3、默读（输入不显示在监视器上）</h4>
<div class="level4">

<p>
有时会需要脚本用户输入，但不希望输入的数据显示在监视器上。典型的例子就是输入密码，当然还有很多其他需要隐藏的数据。   
</p>

<p>
-s选项能够使read命令中输入的数据不显示在监视器上（实际上，数据是显示的，只是read命令将文本颜色设置成与背景相同的颜色）。  
</p>
<pre class="code">#!/bin/bash

read  -s  -p &quot;Enter your password:&quot; pass

echo &quot;your password is $pass&quot;

exit 0 </pre>

</div>
<!-- EDIT5 SECTION "2、计时输入." [8534-10197] -->
<h3 class="sectionedit6" id="读文件1">4、读文件</h3>
<div class="level3">

<p>
最后，还可以使用read命令读取Linux系统上的文件。
</p>

<p>
每次调用read命令都会读取文件中的“一行”文本。当文件没有可读的行时，read命令将以非零状态退出。
</p>

<p>
读取文件的关键是如何将文本中的数据传送给read命令。
</p>

<p>
最常用的方法是对文件使用cat命令并通过管道将结果直接传送给包含read命令的while命令
</p>

<p>
例子::
</p>
<pre class="code">#!/bin/bash

count=1    //赋值语句，不加空格

cat test | while read line        //cat 命令的输出作为read命令的输入,read读到的值放在line中

do

   echo &quot;Line $count:$line&quot;

   count=$[ $count + 1 ]          //注意中括号中的空格。

done

echo &quot;finish&quot;

exit 0</pre>

</div>
<!-- EDIT6 SECTION "4、读文件" [10198-10936] -->
<h3 class="sectionedit7" id="更改结束符">5、更改结束符</h3>
<div class="level3">

<p>
-d[character] 指定结束输入的字符  d–delimiter分隔符，界定符
</p>

<p>
就是读取输入，直到某个字符出现为止，而不是转行结束。当然，“某个字符”不算进去。测试结果：
</p>
<pre class="code">  1, 指定是某个字符后，回车也被读进去，而不会因回车结束
  2, -dstr 不会到str结束，是s结束，所以人家才说是character
  3, -dx str ;# str变量转了n行+输入字符 ; echo $str 并不会把转行输出来，要echo &quot;$str&quot; 才会转行。</pre>

</div>
<!-- EDIT7 SECTION "5、更改结束符" [10937-11465] -->
<h3 class="sectionedit8" id="数组输入">6、数组输入</h3>
<div class="level3">

<p>
把输入内容按分隔符(空格或者跳格之类)分配给数组，连续的空格也算为1个分割。    输入后，数组规格跟c语言一样,用var[n]的格式表示，下标从0开始，    直接echo $var 的效果等于echo ${var[0]}    当echo 数组带下标的时候，记得加{}表达，比如echo ${a[1]}.
</p>

<p>
定义数组变量： read -a arr 就可以了;   
read -a arr[1] 出错。但是你直接 read arr[1] 是允许的，就是直接赋值数组某个元素。
</p>

</div>
<!-- EDIT8 SECTION "6、数组输入" [11466-] -->