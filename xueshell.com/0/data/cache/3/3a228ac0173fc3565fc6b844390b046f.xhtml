
<h3 class="sectionedit1" id="linux_shell_实现多线程">linux shell 实现多线程</h3>
<div class="level3">

<p>
在bash中，使用后台任务来实现任务的“多进程化”。在不加控制的模式下，不管有多少 任务，全部都后台执行。也就是说，在这种情况下，有多少任务就有多少“进程”在同时执行。我们就先实现第一种情况：
</p>

</div>

<h4 id="实例一_正常情况脚本实现多线程">实例一：正常情况脚本实现多线程</h4>
<div class="level4">
<pre class="code bash"><span class="co0">#!/bin/bash</span>
&nbsp;
<span class="kw1">for</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="re2">i</span>=<span class="nu0">0</span>;i<span class="sy0">&lt;</span><span class="nu0">5</span>;i++<span class="br0">&#41;</span><span class="br0">&#41;</span>;<span class="kw1">do</span>
        <span class="br0">&#123;</span>
                <span class="kw2">sleep</span> <span class="nu0">3</span>;<span class="kw3">echo</span> <span class="nu0">1</span><span class="sy0">&gt;&gt;</span>aa <span class="sy0">&amp;&amp;</span> <span class="kw3">echo</span> <span class="st0">&quot;done!&quot;</span>
        <span class="br0">&#125;</span> 
<span class="kw1">done</span>
<span class="kw3">wait</span>
<span class="kw2">cat</span> aa<span class="sy0">|</span><span class="kw2">wc</span> <span class="re5">-l</span>
<span class="kw2">rm</span> aa</pre>

<p>
<span style="color: #800000">这种情况下，程序顺序执行，每个循环3s，共需15s左右。</span>
</p>

<p>
$ time bash test.sh 
done!
done!
done!
done!
done!
5
</p>

<p>
real    0m15.030s
user    0m0.002s
sys     0m0.003s
</p>

</div>

<h4 id="实例二_多进程_实现">实例二：&#039;多进程&#039;实现</h4>
<div class="level4">
<pre class="code bash"><span class="co0">#!/bin/bash</span>
<span class="kw1">for</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="re2">i</span>=<span class="nu0">0</span>;i<span class="sy0">&lt;</span><span class="nu0">5</span>;i++<span class="br0">&#41;</span><span class="br0">&#41;</span>;<span class="kw1">do</span>
        <span class="br0">&#123;</span>
                        <span class="kw2">sleep</span> <span class="nu0">3</span>;<span class="kw3">echo</span> <span class="nu0">1</span><span class="sy0">&gt;&gt;</span>aa <span class="sy0">&amp;&amp;</span> <span class="kw3">echo</span> <span class="st0">&quot;done!&quot;</span>
        <span class="br0">&#125;</span> <span class="sy0">&amp;</span>
<span class="kw1">done</span>
<span class="kw3">wait</span>
<span class="kw2">cat</span> aa<span class="sy0">|</span><span class="kw2">wc</span> <span class="re5">-l</span>
<span class="kw2">rm</span> aa
&nbsp;
&nbsp;</pre>

<p>
这个实例实际上就在上面基础上多加了一个后台执行&amp;符号，此时应该是5个循环任务并发执行，最后需要3s左右时间。
</p>
<pre class="code bash">$ <span class="kw1">time</span> <span class="kw2">bash</span> test.sh 
<span class="kw1">done</span><span class="sy0">!</span>
<span class="kw1">done</span><span class="sy0">!</span>
<span class="kw1">done</span><span class="sy0">!</span>
<span class="kw1">done</span><span class="sy0">!</span>
<span class="kw1">done</span><span class="sy0">!</span>
<span class="nu0">5</span>
&nbsp;
real    0m3.011s
user    0m0.002s
sys     0m0.004s
&nbsp;
&nbsp;</pre>

<p>
效果非常明显。
</p>

<p>
<span style="color: #800000">这里需要说明一下wait的左右。wait是等待前面的后台任务全部完成才往下执行，否则程序本身是不会等待的，这样对后面依赖前面任务结果的命令 来说就可能出错。例如上面wc -l的命令就报错：不存在aa这个文件。</span>
</p>

<p>
wait命令的官方解释如下：
</p>
<pre class="code">    wait [n]
            Wait for the specified process and return its termination status.  n may be a process ID or  a  job  specification; if a job spec is given, all processes in that job&#039;s pipeline are waited for.  If n is not given, all currently active child processes are waited for, and the return status is zero.  If  n  specifies  a  non-existent process  or job, the return status is 127.  Otherwise, the return status is the exit status of the last processor job waited for.</pre>

<p>
以上所讲的实例都是进程数目不可控制的情况，下面描述如何准确控制并发的进程数目。
</p>
<pre class="code bash"><span class="co0">#!/bin/bash</span>
<span class="co0"># 2006-7-12, by wwy</span>
<span class="co0">#———————————————————————————–</span>
<span class="co0"># 此例子说明了一种用wait、read命令模拟多线程的一种技巧</span>
<span class="co0"># 此技巧往往用于多主机检查，比如ssh登录、ping等等这种单进程比较慢而不耗费cpu的情况</span>
<span class="co0"># 还说明了多线程的控制</span>
<span class="co0">#———————————————————————————–</span>
&nbsp;
&nbsp;
<span class="kw1">function</span> a_sub <span class="br0">&#123;</span> <span class="co0"># 此处定义一个函数，作为一个线程(子进程)</span>
<span class="kw2">sleep</span> <span class="nu0">3</span> <span class="co0"># 线程的作用是sleep 3s</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="re2">tmp_fifofile</span>=<span class="st0">&quot;/tmp/$$.fifo&quot;</span>
<span class="kw2">mkfifo</span> <span class="re1">$tmp_fifofile</span>      <span class="co0"># 新建一个fifo类型的文件</span>
<span class="kw3">exec</span> <span class="nu0">6</span><span class="sy0">&lt;&gt;</span><span class="re1">$tmp_fifofile</span>      <span class="co0"># 将fd6指向fifo类型</span>
<span class="kw2">rm</span> <span class="re1">$tmp_fifofile</span>
&nbsp;
&nbsp;
<span class="re2">thread</span>=<span class="nu0">15</span> <span class="co0"># 此处定义线程数</span>
<span class="kw1">for</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="re2">i</span>=<span class="nu0">0</span>;i<span class="sy0">&lt;</span><span class="re1">$thread</span>;i++<span class="br0">&#41;</span><span class="br0">&#41;</span>;<span class="kw1">do</span> 
<span class="kw3">echo</span>
<span class="kw1">done</span> <span class="sy0">&gt;&amp;</span><span class="nu0">6</span> <span class="co0"># 事实上就是在fd6中放置了$thread个回车符</span>
&nbsp;
<span class="kw1">for</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="re2">i</span>=<span class="nu0">0</span>;i<span class="sy0">&lt;</span><span class="nu0">50</span>;i++<span class="br0">&#41;</span><span class="br0">&#41;</span>;<span class="kw1">do</span> <span class="co0"># 50次循环，可以理解为50个主机，或其他</span>
&nbsp;
<span class="kw2">read</span> <span class="re5">-u6</span> 
<span class="co0"># 一个read -u6命令执行一次，就从fd6中减去一个回车符，然后向下执行，</span>
<span class="co0"># fd6中没有回车符的时候，就停在这了，从而实现了线程数量控制</span>
&nbsp;
<span class="br0">&#123;</span> <span class="co0"># 此处子进程开始执行，被放到后台</span>
      a_sub <span class="sy0">&amp;&amp;</span> <span class="br0">&#123;</span> <span class="co0"># 此处可以用来判断子进程的逻辑</span>
       <span class="kw3">echo</span> <span class="st0">&quot;a_sub is finished&quot;</span>
      <span class="br0">&#125;</span> <span class="sy0">||</span> <span class="br0">&#123;</span>
      <span class="kw3">echo</span> <span class="st0">&quot;sub error&quot;</span>
      <span class="br0">&#125;</span>
      <span class="kw3">echo</span> <span class="sy0">&gt;&amp;</span><span class="nu0">6</span> <span class="co0"># 当进程结束以后，再向fd6中加上一个回车符，即补上了read -u6减去的那个</span>
<span class="br0">&#125;</span> <span class="sy0">&amp;</span>
&nbsp;
<span class="kw1">done</span>
&nbsp;
<span class="kw3">wait</span> <span class="co0"># 等待所有的后台子进程结束</span>
<span class="kw3">exec</span> <span class="nu0">6</span><span class="sy0">&gt;&amp;</span>- <span class="co0"># 关闭df6</span>
&nbsp;
&nbsp;
<span class="kw3">exit</span> <span class="nu0">0</span></pre>

<p>
sleep 3s，线程数为15，一共循环50次，所以，此脚本一共的执行时间大约为12秒
</p>

<p>
即：
15×3=45, 所以 3 x 3s = 9s
(50-45=5)&lt;15, 所以 1 x 3s = 3s
所以 9s + 3s = 12s
</p>

<p>
$ time ./multithread.sh &gt;/dev/null
</p>

<p>
real        0m12.025s
user        0m0.020s
sys         0m0.064s
</p>

<p>
而当不使用多线程技巧的时候，执行时间为：50 x 3s = 150s。
</p>

<p>
此程序中的命令
linux &lt;wbr&gt;shell &lt;wbr&gt;实现多线程mkfifo tmpfile
</p>

<p>
和linux中的命令
linux &lt;wbr&gt;shell &lt;wbr&gt;实现多线程mknod tmpfile p
</p>

<p>
效果相同。区别是mkfifo为POSIX标准，因此推荐使用它。该命令创建了一个先入先出的管道文件，并为其分配文件标志符6。管道文件是进程之 间通信的一种方式，注意这一句很重要
linux &lt;wbr&gt;shell &lt;wbr&gt;实现多线程exec 6&lt;&gt;$tmp_fifofile      # 将fd6指向fifo类型
</p>

<p>
如果没有这句，在向文件$tmp_fifofile或者&amp;6写入数据时，程序会被阻塞，直到有read读出了管道文件中的数据为止。而执行了上面这一句后就可以在程序运行期间不断向fifo类 型的文件写入数据而不会阻塞，并且数据会被保存下来以供read程序读出。
</p>

</div>
