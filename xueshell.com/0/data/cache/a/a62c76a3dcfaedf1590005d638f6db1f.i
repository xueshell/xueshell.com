a:446:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"shell参数传递";}i:2;i:1;}i:3;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18;}i:4;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18;}i:5;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:493:"1. $# 传递到脚本的参数个数
2. $* 以一个单字符串显示所有向脚本传递的参数。与位置变量不同，此选项参数可超过9个
3. $$ 脚本运行的当前进程ID号
4. $! 后台运行的最后一个进程的进程ID号
5. $@ 与$#相同，但是使用时加引号，并在引号中返回每个参数
6. $- 显示shell使用的当前选项，与set命令功能相同
7. $? 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。";}i:2;i:20;}i:6;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:513;}i:7;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:513;}i:8;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"$0
脚本名字
$1
位置参数 #1
$2 - $9
位置参数 #2 - #9
${10}
位置参数 #10
$#
位置参数的个数
";}i:2;i:517;}i:9;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:629;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$*";}i:2;i:630;}i:11;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:632;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"
所有的位置参数(作为单个字符串) *
";}i:2;i:633;}i:13;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:681;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$@";}i:2;i:682;}i:15;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:684;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:335:"
所有的位置参数(每个都作为独立的字符串)
${#*}
传递到脚本中的命令行参数的个数
${#@}
传递到脚本中的命令行参数的个数
$?
返回值
$$
脚本的进程ID(PID)
$-
传递到脚本中的标志(使用set)
$_
之前命令的最后一个参数
$!
运行在后台的最后一个作业的进程ID(PID)";}i:2;i:685;}i:17;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1021;}i:18;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:223:"     使用shell处理的时候对参数的处理是个基本模块，所以今天找到一篇简单易懂的文章来进行参考，作为以后shell参数处理的模板，推荐使用getOpts形式进行参数的处理。";}i:2;i:1021;}i:19;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1021;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"0.引言";}i:2;i:1249;}i:21;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1258;}i:22;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:101:" 写程序的时候经常要处理命令行参数，本文描述在Bash下的命令行处理方式。";}i:2;i:1258;}i:23;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:19:" 选项与参数：";}i:2;i:1363;}i:24;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:25:" 如下一个命令行：";}i:2;i:1386;}i:25;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1386;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"./test.sh -f config.conf -v ";}i:2;i:1416;}i:27;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:1444;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"prefix=/home";}i:2;i:1446;}i:29;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1459;}i:30;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:112:" 我们称-f为选项，它需要一个参数，即config.conf, -v 也是一个选项，但它不需要参数。";}i:2;i:1459;}i:31;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:1575;}i:32;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1575;}i:33;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1575;}i:34;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:174:"-prefix我们称之为一个长选项，即选项本身多于一个字符，它也需要一个参数，用等号连接，当然等号不是必须的，/home可以直接写在";}i:2;i:1580;}i:35;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:1754;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"prefix后面，即";}i:2;i:1756;}i:37;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:1774;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"prefix/home,更多的限制后面具体会讲到。";}i:2;i:1776;}i:39;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1827;}i:40;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1827;}i:41;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:1827;}i:42;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1827;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"   在bash中，可以用以下三种方式来处理命令行参数，每种方式都有自己的应用场景。";}i:2;i:1828;}i:44;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1941;}i:45;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1941;}i:46;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1941;}i:47;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1941;}i:48;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" 手工处理方式";}i:2;i:1947;}i:49;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1966;}i:50;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1966;}i:51;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1966;}i:52;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1966;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" getopts";}i:2;i:1972;}i:54;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1980;}i:55;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1980;}i:56;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1980;}i:57;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1980;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" getopt";}i:2;i:1986;}i:59;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1993;}i:60;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1993;}i:61;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1993;}i:62;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:49:" 下面我们依次讨论这三种处理方式。";}i:2;i:1994;}i:63;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1994;}i:64;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"1. 手工处理方式";}i:2;i:2048;}i:65;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2070;}i:66;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:94:" 在手工处理方式中，首先要知道几个变量，还是以上面的命令行为例：";}i:2;i:2070;}i:67;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2168;}i:68;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2168;}i:69;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2168;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:"    $0 ： ./test.sh,即命令本身，相当于C/C++中的argv[0]";}i:2;i:2174;}i:71;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2240;}i:72;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2240;}i:73;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2240;}i:74;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2240;}i:75;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"    $1 ： -f,第一个参数.";}i:2;i:2246;}i:76;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2276;}i:77;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2276;}i:78;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2276;}i:79;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2276;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"    $2 ： config.conf";}i:2;i:2282;}i:81;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2304;}i:82;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2304;}i:83;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2304;}i:84;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2304;}i:85;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"    $3, $4 ";}i:2;i:2310;}i:86;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:2321;}i:87;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" ：类推。";}i:2;i:2324;}i:88;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2337;}i:89;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2337;}i:90;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2337;}i:91;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2337;}i:92;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"    $# 参数的个数，不包括命令本身，上例中$#为4.";}i:2;i:2343;}i:93;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2408;}i:94;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2408;}i:95;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2408;}i:96;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2408;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"    $@ ：参数本身的列表，也不包括命令本身，如上例为 -f config.conf -v ";}i:2;i:2414;}i:98;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:2506;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"prefix=/home";}i:2;i:2508;}i:100;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2520;}i:101;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2520;}i:102;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:2520;}i:103;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2520;}i:104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"    $* ：和$@相同，但";}i:2;i:2526;}i:105;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2553;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$*";}i:2;i:2554;}i:107;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2556;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" 和 ";}i:2;i:2557;}i:109;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2562;}i:110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$@";}i:2;i:2563;}i:111;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2565;}i:112;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"(加引号)并不同，";}i:2;i:2566;}i:113;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2589;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$*";}i:2;i:2590;}i:115;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2592;}i:116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"将所有的参数解释成一个字符串，而";}i:2;i:2593;}i:117;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2641;}i:118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$@";}i:2;i:2642;}i:119;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2644;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"是一个参数数组。如下例所示：";}i:2;i:2645;}i:121;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2687;}i:122;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2687;}i:123;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2687;}i:124;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2687;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"1 #!/bin/bash
2
3 for arg in ";}i:2;i:2689;}i:126;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2718;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$*";}i:2;i:2719;}i:128;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2721;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"
4 do
5     echo $arg
6 done
7
8 for arg in ";}i:2;i:2722;}i:130;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:2766;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$@";}i:2;i:2767;}i:132;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2769;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"
9 do
10     echo $arg
11 done
12";}i:2;i:2770;}i:134;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2803;}i:135;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2803;}i:136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"执行./test.sh -f config.conf -n 10 会打印：";}i:2;i:2805;}i:137;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2854;}i:138;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2854;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"-f config.conf -n 10    #这是";}i:2;i:2856;}i:140;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2887;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$*";}i:2;i:2888;}i:142;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:2890;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"的输出";}i:2;i:2891;}i:144;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2900;}i:145;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2900;}i:146;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"-f   #以下为$@的输出";}i:2;i:2902;}i:147;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2928;}i:148;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2928;}i:149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"config.conf";}i:2;i:2930;}i:150;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2941;}i:151;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2941;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"-n";}i:2;i:2943;}i:153;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2945;}i:154;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2945;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"10";}i:2;i:2947;}i:156;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2950;}i:157;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:190:" 所以，手工处理的方式即对这些变量的处理。因为手工处理高度依赖于你在命令行上所传参数的位置，所以一般都只用来处理较简单的参数。如";}i:2;i:2950;}i:158;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:13:" ./test.sh 10";}i:2;i:3144;}i:159;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:74:" 而很少使用./test -n 10这种带选项的方式。 典型用法为：";}i:2;i:3161;}i:160;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3161;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"#!/bin/bash";}i:2;i:3240;}i:162;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3251;}i:163;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3251;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"if [ x$1 != x ]
then";}i:2;i:3253;}i:165;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3273;}i:166;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:15:"  #...有参数";}i:2;i:3273;}i:167;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3273;}i:168;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"else
then";}i:2;i:3292;}i:169;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3301;}i:170;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:18:"  #...没有参数";}i:2;i:3301;}i:171;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3301;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"fi";}i:2;i:3323;}i:173;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3325;}i:174;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3325;}i:175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"为什么要使用 x$1 != x 这种方式来比较呢？想像一下这种方式比较：";}i:2;i:3328;}i:176;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3416;}i:177;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3416;}i:178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"if [ -n $1 ] #$1不为空";}i:2;i:3419;}i:179;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3444;}i:180;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3444;}i:181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:132:"但如果用户不传参数的时候，$1为空，这时 就会变成 [ -n ] ,所以需要加一个辅助字符串来进行比较。";}i:2;i:3446;}i:182;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3578;}i:183;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3578;}i:184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:173:"手工处理方式能满足大多数的简单需求，配合shift使用也能构造出强大的功能，但在要处理复杂选项的时候建议用下面的两种方法。";}i:2;i:3580;}i:185;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3753;}i:186;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3753;}i:187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"2. getopts/getopt";}i:2;i:3755;}i:188;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3772;}i:189;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3772;}i:190;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:192:"处理命令行参数是一个相似而又复杂的事情，为此，C提供了getopt/getopt_long等函数，
C++的boost提供了Options库，在shell中，处理此事的是getopts和getopt.";}i:2;i:3774;}i:191;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3966;}i:192;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3966;}i:193;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:"getopts和getopt功能相似但又不完全相同，其中getopt是独立的可执行文件，而getopts是由Bash内置的。";}i:2;i:3968;}i:194;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4094;}i:195;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4094;}i:196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"先来看看参数传递的典型用法:";}i:2;i:4096;}i:197;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4137;}i:198;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4137;}i:199;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4137;}i:200;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4137;}i:201;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" ./test.sh -a -b -c ： 短选项，各选项不需参数";}i:2;i:4143;}i:202;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4200;}i:203;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4200;}i:204;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:4200;}i:205;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4200;}i:206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:" ./test.sh -abc   ： 短选项，和上一种方法的效果一样，只是将所有的选项写在一起。";}i:2;i:4206;}i:207;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4315;}i:208;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4315;}i:209;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:4315;}i:210;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4315;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:" ./test.sh -a args -b -c ：短选项，其中-a需要参数，而-b -c不需参数。";}i:2;i:4321;}i:212;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4407;}i:213;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4407;}i:214;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:4407;}i:215;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4407;}i:216;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" ./test.sh ";}i:2;i:4413;}i:217;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:4424;}i:218;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"a-long=args ";}i:2;i:4426;}i:219;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:4438;}i:220;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"b-long ：长选项";}i:2;i:4440;}i:221;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4459;}i:222;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4459;}i:223;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:4459;}i:224;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4459;}i:225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"我们先来看getopts,它不支持长选项。";}i:2;i:4461;}i:226;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4508;}i:227;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4508;}i:228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:"使用getopts非常简单：
代码";}i:2;i:4510;}i:229;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4545;}i:230;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4545;}i:231;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"#test.sh";}i:2;i:4548;}i:232;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4556;}i:233;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4556;}i:234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"#!/bin/bash";}i:2;i:4558;}i:235;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4569;}i:236;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4569;}i:237;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"while getopts ";}i:2;i:4571;}i:238;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:4585;}i:239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"a:bc";}i:2;i:4586;}i:240;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:4590;}i:241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" arg #选项后面的冒号表示该选项需要参数
do";}i:2;i:4591;}i:242;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4648;}i:243;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:340:"      case $arg in
           a)
              echo "a's arg:$OPTARG" #参数存在$OPTARG中
              ;;
           b)
              echo "b"
              ;;
           c)
              echo "c"
              ;;
           ?) #当有不认识的选项的时候arg为?
          echo "unkonw argument"
      exit 1
      ;;
      esac";}i:2;i:4648;}i:244;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4648;}i:245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"done";}i:2;i:5020;}i:246;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5024;}i:247;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5024;}i:248;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:262:"现在就可以使用：
./test.sh -a arg -b -c
或
./test.sh -a arg -bc
来加载了。
应该说绝大多数脚本使用该函数就可以了，如果需要支持长选项以及可选参数，那么就需要使用getopt.
下面是getopt自带的一个例子：";}i:2;i:5027;}i:249;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5289;}i:250;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5289;}i:251;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"#!/bin/bash";}i:2;i:5292;}i:252;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5303;}i:253;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5303;}i:254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:189:"# A small example program for using the new getopt(1) program.
# This program will only work with bash(1)
# An similar program using the tcsh(1) script language can be found
# as parse.tcsh";}i:2;i:5305;}i:255;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5494;}i:256;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5494;}i:257;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"# Example input and output (from the bash prompt):
# ./parse.bash -a par1 'another arg' ";}i:2;i:5496;}i:258;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:5584;}i:259;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"c-long 'wow!*\?' -cmore -b ";}i:2;i:5586;}i:260;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5613;}i:261;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" very long ";}i:2;i:5614;}i:262;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5625;}i:263;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:"
# Option a
# Option c, no argument
# Option c, argument `more'
# Option b, argument ` very long '
# Remaining arguments:
# ";}i:2;i:5626;}i:264;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:5750;}i:265;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"> `par1'
# ";}i:2;i:5752;}i:266;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:5763;}i:267;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"> `another arg'
# ";}i:2;i:5765;}i:268;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:5783;}i:269;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"> `wow!*\?'";}i:2;i:5785;}i:270;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5796;}i:271;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5796;}i:272;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"# Note that we use `";}i:2;i:5798;}i:273;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5818;}i:274;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$@";}i:2;i:5819;}i:275;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5821;}i:276;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:"' to let each command-line parameter expand to a
# separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set ";}i:2;i:5822;}i:277;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:5958;}i:278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"' would nuke the return value of getopt.";}i:2;i:5960;}i:279;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6000;}i:280;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6000;}i:281;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:"#-o表示短选项，两个冒号表示该选项有一个可选参数，可选参数必须紧贴选项
#如-carg 而不能是-c arg
#";}i:2;i:6002;}i:282;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:6135;}i:283;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"long表示长选项
#";}i:2;i:6137;}i:284;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6158;}i:285;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$@";}i:2;i:6159;}i:286;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6161;}i:287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"在上面解释过
# -n:出错时的信息
# ";}i:2;i:6162;}i:288;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:6207;}i:289;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" ：举一个例子比较好理解：
#我们要创建一个名字为 ";}i:2;i:6209;}i:290;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6279;}i:291;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"-f";}i:2;i:6280;}i:292;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6282;}i:293;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:125:"的目录你会怎么办？
# mkdir -f #不成功，因为-f会被mkdir当作选项来解析，这时就可以使用
# mkdir ";}i:2;i:6283;}i:294;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:6408;}i:295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" -f 这样-f就不会被作为选项。";}i:2;i:6410;}i:296;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6449;}i:297;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6449;}i:298;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"TEMP=`getopt -o ab:c:: ";}i:2;i:6451;}i:299;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:6474;}i:300;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"long a-long,b-long:,c-long:: \";}i:2;i:6476;}i:301;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6506;}i:302;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:6506;}i:303;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6506;}i:304;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6506;}i:305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"n 'example.bash' ";}i:2;i:6513;}i:306;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:6530;}i:307;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6532;}i:308;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6533;}i:309;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$@";}i:2;i:6534;}i:310;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6536;}i:311;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"`";}i:2;i:6537;}i:312;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6538;}i:313;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6538;}i:314;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:6538;}i:315;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6538;}i:316;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"if [ $? != 0 ] ; then echo ";}i:2;i:6540;}i:317;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6567;}i:318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"Terminating";}i:2;i:6568;}i:319;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:6579;}i:320;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6582;}i:321;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" >&2 ; exit 1 ; fi";}i:2;i:6583;}i:322;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6601;}i:323;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6601;}i:324;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"# Note the quotes around `$TEMP': they are essential!
#set 会重新排列参数的顺序，也就是改变$1,$2";}i:2;i:6603;}i:325;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:6715;}i:326;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"$n的值，这些值在getopt中重新排列过了
eval set ";}i:2;i:6718;}i:327;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:6778;}i:328;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6780;}i:329;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6781;}i:330;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$TEMP";}i:2;i:6782;}i:331;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6787;}i:332;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6788;}i:333;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6788;}i:334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"#经过getopt的处理，下面处理具体选项。";}i:2;i:6790;}i:335;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6842;}i:336;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6842;}i:337;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"while true ; do";}i:2;i:6844;}i:338;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6859;}i:339;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:689:"      case "$1" in
              -a|--a-long) echo "Option a" ; shift ;;
              -b|--b-long) echo "Option b, argument \`$2'" ; shift 2 ;;
              -c|--c-long)
                      # c has an optional argument. As we are in quoted mode,
                      # an empty parameter will be generated if its optional
                      # argument is not found.
                      case "$2" in
                              "") echo "Option c, no argument"; shift 2 ;;
                              *) echo "Option c, argument \`$2'" ; shift 2 ;;
                      esac ;;
              --) shift ; break ;;
              *) echo "Internal error!" ; exit 1 ;;
      esac";}i:2;i:6859;}i:340;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6859;}i:341;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"done
echo ";}i:2;i:7578;}i:342;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:7588;}i:343;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"Remaining arguments:";}i:2;i:7589;}i:344;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:7609;}i:345;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"
for arg do";}i:2;i:7610;}i:346;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7621;}i:347;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:23:" echo '--> '"\`$arg'" ;";}i:2;i:7621;}i:348;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7621;}i:349;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"done";}i:2;i:7648;}i:350;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7652;}i:351;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7652;}i:352;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:159:"比如我们使用
./test -a -b arg arg1 -c
你可以看到,命令行中多了个arg1参数，在经过getopt和set之后，命令行会变为：
-a -b arg -c ";}i:2;i:7655;}i:353;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:7814;}i:354;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" arg1
$1指向-a,$2指向-b,$3指向arg,$4指向-c,$5指向";}i:2;i:7816;}i:355;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:7875;}i:356;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:",而多出的arg1则被放到了最后。";}i:2;i:7877;}i:357;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7918;}i:358;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7918;}i:359;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:167:"3.总结
一般小脚本手工处理也许就够了，getopts能处理绝大多数的情况，getopt较复杂，功能也更强大。
有问题请指出，不胜感激";}i:2;i:7921;}i:360;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8088;}i:361;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8088;}i:362;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8090;}i:363;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8092;}i:364;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8094;}i:365;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8096;}i:366;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8098;}i:367;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8100;}i:368;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8102;}i:369;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8104;}i:370;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8106;}i:371;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8108;}i:372;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8110;}i:373;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8112;}i:374;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8114;}i:375;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8116;}i:376;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8118;}i:377;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8120;}i:378;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8122;}i:379;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8124;}i:380;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8126;}i:381;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8128;}i:382;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8130;}i:383;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8132;}i:384;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8134;}i:385;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8136;}i:386;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8138;}i:387;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8140;}i:388;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8142;}i:389;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8144;}i:390;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8146;}i:391;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8148;}i:392;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8150;}i:393;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8152;}i:394;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8154;}i:395;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8156;}i:396;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8158;}i:397;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8160;}i:398;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8162;}i:399;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8164;}i:400;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8166;}i:401;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8168;}i:402;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8170;}i:403;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8172;}i:404;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8174;}i:405;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8176;}i:406;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8178;}i:407;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8180;}i:408;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8182;}i:409;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8184;}i:410;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8186;}i:411;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8188;}i:412;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8190;}i:413;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8192;}i:414;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8194;}i:415;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8196;}i:416;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8198;}i:417;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8200;}i:418;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8202;}i:419;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8204;}i:420;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8206;}i:421;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8208;}i:422;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8210;}i:423;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8212;}i:424;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"**";}i:2;i:8214;}i:425;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8216;}i:426;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8216;}i:427;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:455:"shift其实很简单的，就是左移参数列表，shift一次就将最左边的参数$1移出去了，然后
原来的$2现在就变成了$1。
shift后面还可以带上一个数字，指明要移出多少个参数（默认只移出一个），比如说
shift 3 就是移出3个参数，之后原来的$4就变成了现在的$1。
eval就是先将后面的参数执行一遍，将必要的置换都做了，再来执行命令。举个例子：
MYFILE=";}i:2;i:8218;}i:428;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:8673;}i:429;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"cat myfile";}i:2;i:8674;}i:430;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:8684;}i:431;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:141:"
echo $MYFILE   # output: cat myfile
eval $MYFILE   # output: contents of myfile
再举个详细点儿的例子：
#!/bin/bash
# evalit
echo ";}i:2;i:8685;}i:432;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:8826;}i:433;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" Total number of arguments passed: $#";}i:2;i:8827;}i:434;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:8864;}i:435;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"
echo ";}i:2;i:8865;}i:436;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:8871;}i:437;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" The process ID: $$";}i:2;i:8872;}i:438;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:8891;}i:439;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"
echo ";}i:2;i:8892;}i:440;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:8898;}i:441;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" Last argument: ";}i:2;i:8899;}i:442;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:8915;}i:443;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:" $(eval echo \$$#)
运行脚本：
$ ./evalit alpha bravo charlie
output as follows:
Total number of arguments passed: 3
The process ID: 780
Last argument:   charlie ";}i:2;i:8916;}i:444;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8916;}i:445;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:8916;}}