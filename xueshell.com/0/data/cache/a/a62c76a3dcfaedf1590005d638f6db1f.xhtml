
<p>
shell参数传递
</p>

<p>
1. $# 传递到脚本的参数个数
2. $* 以一个单字符串显示所有向脚本传递的参数。与位置变量不同，此选项参数可超过9个
3. $$ 脚本运行的当前进程ID号
4. $! 后台运行的最后一个进程的进程ID号
5. $@ 与$#相同，但是使用时加引号，并在引号中返回每个参数
6. $- 显示shell使用的当前选项，与set命令功能相同
7. $? 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
</p>

<p>
$0
脚本名字
$1
位置参数 #1
$2 - $9
位置参数 #2 - #9
${10}
位置参数 #10
$#
位置参数的个数
“$*”
所有的位置参数(作为单个字符串) *
“$@”
所有的位置参数(每个都作为独立的字符串)
${#*}
传递到脚本中的命令行参数的个数
${#@}
传递到脚本中的命令行参数的个数
$?
返回值
$$
脚本的进程ID(PID)
$-
传递到脚本中的标志(使用set)
$_
之前命令的最后一个参数
$!
运行在后台的最后一个作业的进程ID(PID)
</p>
<pre class="code">     使用shell处理的时候对参数的处理是个基本模块，所以今天找到一篇简单易懂的文章来进行参考，作为以后shell参数处理的模板，推荐使用getOpts形式进行参数的处理。</pre>

<p>
0.引言
</p>
<pre class="code"> 写程序的时候经常要处理命令行参数，本文描述在Bash下的命令行处理方式。</pre>
<pre class="code"> 选项与参数：</pre>
<pre class="code"> 如下一个命令行：</pre>

<p>
./test.sh -f config.conf -v –prefix=/home
</p>
<pre class="code"> 我们称-f为选项，它需要一个参数，即config.conf, -v 也是一个选项，但它不需要参数。</pre>
<ol>
<li class="level1"><div class="li">-prefix我们称之为一个长选项，即选项本身多于一个字符，它也需要一个参数，用等号连接，当然等号不是必须的，/home可以直接写在–prefix后面，即–prefix/home,更多的限制后面具体会讲到。</div>
</li>
</ol>

<p>
   在bash中，可以用以下三种方式来处理命令行参数，每种方式都有自己的应用场景。
</p>
<ul>
<li class="level1"><div class="li"> 手工处理方式</div>
</li>
<li class="level2"><div class="li"> getopts</div>
</li>
<li class="level2"><div class="li"> getopt</div>
</li>
</ul>
<pre class="code"> 下面我们依次讨论这三种处理方式。</pre>

<p>
1. 手工处理方式
</p>
<pre class="code"> 在手工处理方式中，首先要知道几个变量，还是以上面的命令行为例：</pre>
<ul>
<li class="level1"><div class="li">    $0 ： ./test.sh,即命令本身，相当于C/C++中的argv[0]</div>
</li>
<li class="level2"><div class="li">    $1 ： -f,第一个参数.</div>
</li>
<li class="level2"><div class="li">    $2 ： config.conf</div>
</li>
<li class="level2"><div class="li">    $3, $4 … ：类推。</div>
</li>
<li class="level2"><div class="li">    $# 参数的个数，不包括命令本身，上例中$#为4.</div>
</li>
<li class="level2"><div class="li">    $@ ：参数本身的列表，也不包括命令本身，如上例为 -f config.conf -v –prefix=/home</div>
</li>
<li class="level2"><div class="li">    $* ：和$@相同，但“$*” 和 “$@”(加引号)并不同，“$*”将所有的参数解释成一个字符串，而“$@“是一个参数数组。如下例所示：</div>
</li>
</ul>

<p>
1 #!/bin/bash
2
3 for arg in “$*”
4 do
5     echo $arg
6 done
7
8 for arg in “$@”
9 do
10     echo $arg
11 done
12
</p>

<p>
执行./test.sh -f config.conf -n 10 会打印：
</p>

<p>
-f config.conf -n 10    #这是”$*”的输出
</p>

<p>
-f   #以下为$@的输出
</p>

<p>
config.conf
</p>

<p>
-n
</p>

<p>
10
</p>
<pre class="code"> 所以，手工处理的方式即对这些变量的处理。因为手工处理高度依赖于你在命令行上所传参数的位置，所以一般都只用来处理较简单的参数。如</pre>
<pre class="code"> ./test.sh 10</pre>
<pre class="code"> 而很少使用./test -n 10这种带选项的方式。 典型用法为：</pre>

<p>
#!/bin/bash
</p>

<p>
if [ x$1 != x ]
then
</p>
<pre class="code">  #...有参数</pre>

<p>
else
then
</p>
<pre class="code">  #...没有参数</pre>

<p>
fi
</p>

<p>
为什么要使用 x$1 != x 这种方式来比较呢？想像一下这种方式比较：
</p>

<p>
if [ -n $1 ] #$1不为空
</p>

<p>
但如果用户不传参数的时候，$1为空，这时 就会变成 [ -n ] ,所以需要加一个辅助字符串来进行比较。
</p>

<p>
手工处理方式能满足大多数的简单需求，配合shift使用也能构造出强大的功能，但在要处理复杂选项的时候建议用下面的两种方法。
</p>

<p>
2. getopts/getopt
</p>

<p>
处理命令行参数是一个相似而又复杂的事情，为此，C提供了getopt/getopt_long等函数，
C++的boost提供了Options库，在shell中，处理此事的是getopts和getopt.
</p>

<p>
getopts和getopt功能相似但又不完全相同，其中getopt是独立的可执行文件，而getopts是由Bash内置的。
</p>

<p>
先来看看参数传递的典型用法:
</p>
<ul>
<li class="level1"><div class="li"> ./test.sh -a -b -c ： 短选项，各选项不需参数</div>
</li>
<li class="level2"><div class="li"> ./test.sh -abc   ： 短选项，和上一种方法的效果一样，只是将所有的选项写在一起。</div>
</li>
<li class="level2"><div class="li"> ./test.sh -a args -b -c ：短选项，其中-a需要参数，而-b -c不需参数。</div>
</li>
<li class="level2"><div class="li"> ./test.sh –a-long=args –b-long ：长选项</div>
</li>
</ul>

<p>
我们先来看getopts,它不支持长选项。
</p>

<p>
使用getopts非常简单：
代码
</p>

<p>
#test.sh
</p>

<p>
#!/bin/bash
</p>

<p>
while getopts “a:bc” arg #选项后面的冒号表示该选项需要参数
do
</p>
<pre class="code">      case $arg in
           a)
              echo &quot;a&#039;s arg:$OPTARG&quot; #参数存在$OPTARG中
              ;;
           b)
              echo &quot;b&quot;
              ;;
           c)
              echo &quot;c&quot;
              ;;
           ?) #当有不认识的选项的时候arg为?
          echo &quot;unkonw argument&quot;
      exit 1
      ;;
      esac</pre>

<p>
done
</p>

<p>
现在就可以使用：
./test.sh -a arg -b -c
或
./test.sh -a arg -bc
来加载了。
应该说绝大多数脚本使用该函数就可以了，如果需要支持长选项以及可选参数，那么就需要使用getopt.
下面是getopt自带的一个例子：
</p>

<p>
#!/bin/bash
</p>

<p>
# A small example program for using the new getopt(1) program.
# This program will only work with bash(1)
# An similar program using the tcsh(1) script language can be found
# as parse.tcsh
</p>

<p>
# Example input and output (from the bash prompt):
# ./parse.bash -a par1 &#039;another arg&#039; –c-long &#039;wow!*\?&#039; -cmore -b “ very long ”
# Option a
# Option c, no argument
# Option c, argument `more&#039;
# Option b, argument ` very long &#039;
# Remaining arguments:
# –&gt; `par1&#039;
# –&gt; `another arg&#039;
# –&gt; `wow!*\?&#039;
</p>

<p>
# Note that we use `“$@”&#039; to let each command-line parameter expand to a
# separate word. The quotes around `$@&#039; are essential!
# We need TEMP as the `eval set –&#039; would nuke the return value of getopt.
</p>

<p>
#-o表示短选项，两个冒号表示该选项有一个可选参数，可选参数必须紧贴选项
#如-carg 而不能是-c arg
#–long表示长选项
#“$@“在上面解释过
# -n:出错时的信息
# – ：举一个例子比较好理解：
#我们要创建一个名字为 ”-f”的目录你会怎么办？
# mkdir -f #不成功，因为-f会被mkdir当作选项来解析，这时就可以使用
# mkdir – -f 这样-f就不会被作为选项。
</p>

<p>
TEMP=`getopt -o ab:c:: –long a-long,b-long:,c-long:: \
</p>
<ol>
<li class="level1"><div class="li">n &#039;example.bash&#039; – “$@“`</div>
</li>
</ol>

<p>
if [ $? != 0 ] ; then echo “Terminating…” &gt;&amp;2 ; exit 1 ; fi
</p>

<p>
# Note the quotes around `$TEMP&#039;: they are essential!
#set 会重新排列参数的顺序，也就是改变$1,$2…$n的值，这些值在getopt中重新排列过了
eval set – “$TEMP”
</p>

<p>
#经过getopt的处理，下面处理具体选项。
</p>

<p>
while true ; do
</p>
<pre class="code">      case &quot;$1&quot; in
              -a|--a-long) echo &quot;Option a&quot; ; shift ;;
              -b|--b-long) echo &quot;Option b, argument \`$2&#039;&quot; ; shift 2 ;;
              -c|--c-long)
                      # c has an optional argument. As we are in quoted mode,
                      # an empty parameter will be generated if its optional
                      # argument is not found.
                      case &quot;$2&quot; in
                              &quot;&quot;) echo &quot;Option c, no argument&quot;; shift 2 ;;
                              *) echo &quot;Option c, argument \`$2&#039;&quot; ; shift 2 ;;
                      esac ;;
              --) shift ; break ;;
              *) echo &quot;Internal error!&quot; ; exit 1 ;;
      esac</pre>

<p>
done
echo “Remaining arguments:”
for arg do
</p>
<pre class="code"> echo &#039;--&gt; &#039;&quot;\`$arg&#039;&quot; ;</pre>

<p>
done
</p>

<p>
比如我们使用
./test -a -b arg arg1 -c
你可以看到,命令行中多了个arg1参数，在经过getopt和set之后，命令行会变为：
-a -b arg -c – arg1
$1指向-a,$2指向-b,$3指向arg,$4指向-c,$5指向–,而多出的arg1则被放到了最后。
</p>

<p>
3.总结
一般小脚本手工处理也许就够了，getopts能处理绝大多数的情况，getopt较复杂，功能也更强大。
有问题请指出，不胜感激
</p>

<p>
<strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong>**
</p>

<p>
shift其实很简单的，就是左移参数列表，shift一次就将最左边的参数$1移出去了，然后
原来的$2现在就变成了$1。
shift后面还可以带上一个数字，指明要移出多少个参数（默认只移出一个），比如说
shift 3 就是移出3个参数，之后原来的$4就变成了现在的$1。
eval就是先将后面的参数执行一遍，将必要的置换都做了，再来执行命令。举个例子：
MYFILE=“cat myfile”
echo $MYFILE   # output: cat myfile
eval $MYFILE   # output: contents of myfile
再举个详细点儿的例子：
#!/bin/bash
# evalit
echo ” Total number of arguments passed: $#”
echo “ The process ID: $$”
echo “ Last argument: ” $(eval echo \$$#)
运行脚本：
$ ./evalit alpha bravo charlie
output as follows:
Total number of arguments passed: 3
The process ID: 780
Last argument:   charlie 
</p>
