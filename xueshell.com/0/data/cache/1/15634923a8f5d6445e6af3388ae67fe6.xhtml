
<h2 class="sectionedit1" id="shell_处理用户输入">shell 处理用户输入</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> 使用命令行参数</div>
</li>
<li class="level1"><div class="li"> 设置选项</div>
</li>
<li class="level1"><div class="li"> 获取用户输入</div>
</li>
</ul>

<p>
有时编写的脚本需要能和运行脚本的人员进行交互，bash shell提供了一些方法来从用户处获取数据，这些方法有如下三种：
1- 命令行参数（添加在命令后的参数）
2- 命令行选项（修改命令行为的单字符串）
3- 直接读取键盘输入
</p>

</div>
<!-- EDIT1 SECTION "shell 处理用户输入" [1-403] -->
<h3 class="sectionedit2" id="命令行参数">1、命令行参数</h3>
<div class="level3">

<p>
 向shell脚本传递数据最基本的方式就是命令行参数，主要就是说通过一些特殊变量是的bash shell自动把输入的参数赋值给变量才执行脚本。这些变量叫做位置参数，分别有$1为第一个参数、$2为第二个参数、$0为程序名称。。。
</p>

</div>

<h4 id="读取参数">1.1、读取参数</h4>
<div class="level4">

<p>
 如下看个例子就能理解这个位置参数的概念了：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># chmod u+x 1.1test </span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 1.1test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="re2">a</span>=<span class="nu0">1</span>
 <span class="kw1">for</span> <span class="br0">&#40;</span><span class="br0">&#40;</span> <span class="re2">b</span>=<span class="nu0">1</span>; b<span class="sy0">&lt;</span>=<span class="re4">$1</span>; b++ <span class="br0">&#41;</span><span class="br0">&#41;</span>
 <span class="kw1">do</span> 
   <span class="re2">a</span>=$<span class="br0">&#91;</span> <span class="re1">$a</span> <span class="sy0">*</span> <span class="re1">$b</span> <span class="br0">&#93;</span>
 <span class="kw1">done</span>
 <span class="kw3">echo</span> the factorial of <span class="re4">$1</span> is <span class="re1">$a</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./1.1test 5</span>
 the factorial of <span class="nu0">5</span> is <span class="nu0">120</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./1.1test 4</span>
 the factorial of <span class="nu0">4</span> is <span class="nu0">24</span></pre>

<p>
主要来看./xx后面附带的命令行参数，只有一个参数也即为第一个参数很明显赋值为$1，通过for循环计算出累乘结果，所以你输入的第一个参数值改变了，结果也就随着改变。
 如果要输入更多的命令行参数，那么每个命令行参数必须使用空格分隔出来，下面看一个例子：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 1.1test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="re2">total</span>=$<span class="br0">&#91;</span> <span class="re4">$1</span> <span class="sy0">*</span> <span class="re4">$2</span> <span class="br0">&#93;</span>
 <span class="kw3">echo</span> the first param is <span class="re4">$1</span>
 <span class="kw3">echo</span> the second param is <span class="re4">$2</span>
 <span class="kw3">echo</span> the total value is <span class="re1">$total</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./1.1test 2 3</span>
 the first param is <span class="nu0">2</span>
 the second param is <span class="nu0">3</span>
 the total value is <span class="nu0">6</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./1.1test 4 7</span>
 the first param is <span class="nu0">4</span>
 the second param is <span class="nu0">7</span>
 the total value is <span class="nu0">28</span></pre>

<p>
如上脚本很容易理解，我们看到2/3和4/7都分别被赋值给$1和$2，这里就是通过命令行参数之间的空格分开实现的。当然，数值可以给赋值，对于文本字符串也是可以的，如果要将出现空格的连于一体的参数值可以通过单引号或者双引号括起来，这样bash shell就将其视为一个参数值，先来看个例子：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 1.1test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="kw3">echo</span> hello <span class="re4">$1</span>,glad to meet you.
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./1.1test 51cto gdin</span>
 hello 51cto,glad to meet you.
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./1.1test 'netease corporation'</span>
 hello netease corporation,glad to meet you.</pre>

<p>
对于脚本中没有附带$2变量则把gdin参数忽略了。
 还有一点必须说明的：
 如果脚本输入的命令参数多于9个，就必须使用大括号把变量括起来，如{10}，来看个例子：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 1.1test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="re2">total</span>=$<span class="br0">&#91;</span> <span class="co1">${10}</span> + <span class="co1">${11}</span> <span class="br0">&#93;</span>
 <span class="kw3">echo</span> the tenth param is <span class="co1">${10}</span>
 <span class="kw3">echo</span> the eleventh param is <span class="co1">${11}</span>
 <span class="kw3">echo</span> the total is <span class="re1">$total</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./1.1test 1 2 3 4 5 6 7 8 9 10 11</span>
 the tenth param is <span class="nu0">10</span>
 the eleventh param is <span class="nu0">11</span>
 the total is <span class="nu0">21</span></pre>

<p>
对于这样的结果很好理解，只要注意下{10+}这个东东就行了！
</p>

</div>

<h4 id="读取程序名称">1.2、读取程序名称</h4>
<div class="level4">

<p>
 一开始我就在上面提到程序名称用$0即可表示，Ok，先看个例子：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># chmod u+x 1.2test </span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 1.2test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="kw3">echo</span> the name of the program is:<span class="re4">$0</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./1.2test </span>
 the name of the program is:.<span class="sy0">/</span>1.2test
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># /root/1.2test </span>
 the name of the program is:<span class="sy0">/</span>root<span class="sy0">/</span>1.2test
<span class="sy0">&lt;/</span>coe<span class="sy0">&gt;</span>
很明显，得出的结果不是我们要的，我们只要输出1.2test这个结果。它所传递的变量<span class="re4">$0</span>的字符串是程序的完整路径，而不是名称，这里我们可以通过<span class="kw2">basename</span>命令实现只返回程序名称，把脚本修改成如下：
<span class="sy0">&lt;</span>code <span class="kw2">bash</span><span class="sy0">&gt;</span>
&nbsp;
<span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 1.2test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="re2">name</span>=<span class="sy0">`</span><span class="kw2">basename</span> <span class="re4">$0</span><span class="sy0">`</span>
 <span class="kw3">echo</span> the name of the program is:<span class="re1">$name</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./1.2test </span>
 the name of the program is:1.2test
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># $HOME/1.2test</span>
 the name of the program is:1.2test</pre>

<p>
呵呵，这下通过basename实现我们要的结果，有点注意的是使用反单引号来给name赋值，否则命令无法生效！
 通过基于使用脚本的名称可以实现执行不同功能，下面看个例子：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cp 1.2test 51cto</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ln -s 1.2test netease</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ls -l 1.2test 51cto netease </span>
 <span class="re5">-rwxr--r--</span> <span class="nu0">1</span> root root <span class="nu0">179</span> 02-<span class="nu0">13</span> <span class="nu0">11</span>:<span class="nu0">21</span> 1.2test
 <span class="re5">-rwxr--r--</span> <span class="nu0">1</span> root root <span class="nu0">179</span> 02-<span class="nu0">13</span> <span class="nu0">11</span>:<span class="nu0">22</span> 51cto
 lrwxrwxrwx <span class="nu0">1</span> root root   <span class="nu0">7</span> 02-<span class="nu0">13</span> <span class="nu0">11</span>:<span class="nu0">22</span> netease -<span class="sy0">&gt;</span> 1.2test
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 1.2test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="re2">name</span>=<span class="sy0">`</span><span class="kw2">basename</span> <span class="re4">$0</span><span class="sy0">`</span>
 <span class="kw1">if</span> <span class="br0">&#91;</span> <span class="re1">$name</span> = <span class="st0">&quot;51cto&quot;</span> <span class="br0">&#93;</span>
 <span class="kw1">then</span>
   <span class="kw3">echo</span> <span class="re1">$name</span> is a great IT community
 <span class="kw1">elif</span> <span class="br0">&#91;</span> <span class="re1">$name</span> = <span class="st0">&quot;netease&quot;</span> <span class="br0">&#93;</span>
 <span class="kw1">then</span>
   <span class="kw3">echo</span> <span class="re1">$name</span> is a great internet-sp corparation
 <span class="kw1">fi</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./51cto</span>
 51cto is a great IT community
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./netease</span>
 netease is a great internet-sp corparation</pre>

<p>
上面的例子通过脚本名称实现了不同内容的输出，可知basename好用啦！
 脚本是先判断basename，然后根据basename执行函数。
</p>

</div>

<h4 id="测试参数">1.3、测试参数</h4>
<div class="level4">

<p>
 在shell脚本中使用命令行参数要小心，如果执行脚本缺少必要的参数，则会出现报错信息，如下：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 1.1test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="re2">total</span>=$<span class="br0">&#91;</span> <span class="co1">${10}</span> + <span class="co1">${11}</span> <span class="br0">&#93;</span>
 <span class="kw3">echo</span> the tenth param is <span class="co1">${10}</span>
 <span class="kw3">echo</span> the elevnth param is <span class="co1">${11}</span>
 <span class="kw3">echo</span> the total is <span class="re1">$total</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./1.1test </span>
 .<span class="sy0">/</span>1.1test: line <span class="nu0">2</span>: +  : syntax error: operand expected <span class="br0">&#40;</span>error token is <span class="st0">&quot; &quot;</span><span class="br0">&#41;</span>
 the tenth param is
 the elevnth param is
 the total is</pre>

<p>
我们不输入任何命令行参数，则脚本无法执行。
 所以，我们可以通过-n这个参数进行检测：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 1.2test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="kw1">if</span> <span class="br0">&#91;</span> <span class="re5">-n</span> <span class="st0">&quot;$1&quot;</span> <span class="br0">&#93;</span>
 <span class="kw1">then</span>
   <span class="kw3">echo</span> <span class="re4">$1</span> exists <span class="sy0">!</span>
 <span class="kw1">else</span>
   <span class="kw3">echo</span> your inputting is wrong
 <span class="kw1">fi</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./1.2test twentyfour</span>
 twentyfour exists <span class="sy0">!</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./1.2test </span>
 your inputting is wrong</pre>

<p>
由此可见，通过该方法是检测参数是否存在的好方法。
</p>

</div>
<!-- EDIT2 SECTION "1、命令行参数" [404-5909] -->
<h3 class="sectionedit3" id="特殊的参数变量">2、特殊的参数变量</h3>
<div class="level3">

<p>
 在bash shell中有一些特殊的变量用户跟踪命令行参数。
</p>

</div>

<h4 id="参数计数">2.1、参数计数</h4>
<div class="level4">

<p>
 我们可以使用bash shell提供的特殊变量$#来检测执行脚本时所包含的命令行参数的个数，看如下例子：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 2.1test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="kw3">echo</span> there were <span class="re4">$#</span> parameters supplied.
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># chmod u+x 2.1test </span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./2.1test </span>
 there were <span class="nu0">0</span> parameters supplied.
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./2.1test aa bb cc</span>
 there were <span class="nu0">3</span> parameters supplied.</pre>

<p>
所以，$#是一个值得我们记住脑中的好变量！
</p>

</div>

<h4 id="获取所有参数">2.2、获取所有参数</h4>
<div class="level4">

<p>
 有时候需要获取命令行中的参数，并对它们进行迭代。这里主要通过两个变量来实现对命令行参数的迭代，分别是：
 变量$*和变量$@
变量$*将所有参数视为一个单词
 变量$@将分别对待每个参数
 我们看个例子\(≧▽≦)/
</p>
<pre class="code bash"> <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># chmod u+x 2.2test </span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 2.2test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="re2">a</span>=<span class="nu0">1</span>
 <span class="kw1">for</span> param1 <span class="kw1">in</span> <span class="st0">&quot;$*&quot;</span>
 <span class="kw1">do</span> 
   <span class="kw3">echo</span> <span class="st0">&quot;<span class="es1">\$</span>* parameter #<span class="es2">$a</span> = <span class="es2">$param1</span>&quot;</span>
   <span class="re2">a</span>=$<span class="br0">&#91;</span> <span class="re1">$a</span>+<span class="nu0">1</span> <span class="br0">&#93;</span>
 <span class="kw1">done</span>
 <span class="re2">b</span>=<span class="nu0">1</span>
 <span class="kw1">for</span> param2 <span class="kw1">in</span> <span class="st0">&quot;$@&quot;</span>
 <span class="kw1">do</span> 
   <span class="kw3">echo</span> <span class="st0">&quot;<span class="es1">\$</span># parameter #<span class="es2">$b</span> = <span class="es2">$param2</span>&quot;</span>
   <span class="re2">b</span>=$<span class="br0">&#91;</span> <span class="re1">$b</span>+<span class="nu0">1</span> <span class="br0">&#93;</span>
 <span class="kw1">done</span>
 <span class="re2">c</span>=<span class="nu0">1</span>
 <span class="kw1">for</span> param3 <span class="kw1">in</span> <span class="st0">&quot;$#&quot;</span>
 <span class="kw1">do</span> 
   <span class="kw3">echo</span> <span class="st0">&quot;the total counts = <span class="es2">$param3</span>&quot;</span>
   <span class="re2">c</span>=$<span class="br0">&#91;</span> <span class="re1">$c</span>+<span class="nu0">1</span> <span class="br0">&#93;</span>
 <span class="kw1">done</span></pre>
<pre class="code bash"> <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./2.2test a b c d e f</span>
 <span class="re4">$*</span> parameter <span class="co0">#1 = a b c d e f</span>
 <span class="re4">$#</span> parameter <span class="co0">#1 = a</span>
 <span class="re4">$#</span> parameter <span class="co0">#2 = b</span>
 <span class="re4">$#</span> parameter <span class="co0">#3 = c</span>
 <span class="re4">$#</span> parameter <span class="co0">#4 = d</span>
 <span class="re4">$#</span> parameter <span class="co0">#5 = e</span>
 <span class="re4">$#</span> parameter <span class="co0">#6 = f</span>
 the total counts = <span class="nu0">6</span>
<span class="sy0">&lt;/</span>cod<span class="sy0">&gt;</span>
通过一个<span class="kw1">for</span>循环迭代特殊变量，充分体现出<span class="br0">&#91;</span><span class="re2">email</span>=<span class="re4">$*</span>$<span class="sy0">@</span>$<span class="br0">&#93;</span><span class="re4">$*</span>$<span class="sy0">@</span>$<span class="br0">&#91;</span><span class="sy0">/</span>email<span class="br0">&#93;</span><span class="co0">#三个特殊变量用途！</span>
&nbsp;
====<span class="nu0">3</span>、移位====
&nbsp;
<span class="kw2">bash</span> shell提供了一个工具叫<span class="kw3">shift</span>命令，实现改变命令行参数的相对位置
默认将每个参数变量左移一位。即为，<span class="re4">$3</span>的值移动给变量<span class="re4">$2</span>（<span class="re1">$n</span>+<span class="nu0">1</span>-<span class="sy0">&gt;</span><span class="re1">$n</span>），而变量<span class="re4">$1</span>则被丢弃,当然，<span class="re4">$0</span>这个程序名称没变。下面看个例子：
<span class="sy0">&lt;</span>code <span class="kw2">bash</span><span class="sy0">&gt;</span>
<span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 3test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="re2">count</span>=<span class="nu0">1</span>
 <span class="kw1">while</span> <span class="br0">&#91;</span> <span class="re5">-n</span> <span class="st0">&quot;$1&quot;</span> <span class="br0">&#93;</span>
 <span class="kw1">do</span>
 <span class="kw3">echo</span> <span class="st0">&quot;parameter #<span class="es2">$count</span> = $1&quot;</span>
 <span class="re2">count</span>=$<span class="br0">&#91;</span> <span class="re1">$count</span> + <span class="nu0">1</span> <span class="br0">&#93;</span>
 <span class="kw3">shift</span>
 <span class="kw1">done</span></pre>
<pre class="code bash"> <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># chmod u+x 3test </span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./3test 51cto emc linux rac</span>
 parameter <span class="co0">#1 = 51cto</span>
 parameter <span class="co0">#2 = emc</span>
 parameter <span class="co0">#3 = linux</span>
 parameter <span class="co0">#4 = rac</span></pre>

<p>
每测试一个参数，使用shift命令将参数移前一位，所以通过while循环即使得每个参数都变成$1被循环下去显示出来。当然，我们可以指定shift的位数，而不是默认的一位。看如下例子：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 3test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="kw3">echo</span> <span class="st0">&quot;the original parameter : $*&quot;</span>
 <span class="kw3">shift</span> <span class="nu0">3</span>
 <span class="kw3">echo</span> <span class="st0">&quot;the new shift parameter is : $1&quot;</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./3test aa bb cc dd ee</span>
 the original parameter : aa bb <span class="kw2">cc</span> <span class="kw2">dd</span> ee
 the new <span class="kw3">shift</span> parameter is : <span class="kw2">dd</span></pre>

<p>
指定位数为3后，aa bb cc则被忽略了，直接把dd当成$1.
</p>

</div>
<!-- EDIT3 SECTION "2、特殊的参数变量" [5910-8717] -->
<h3 class="sectionedit4" id="处理选项">4、处理选项</h3>
<div class="level3">

<p>
 选项是有破折号引导的单个字母，它更改命令的行为。如下罗列一些标准化选项：
<strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong>
选项                  描述
-a             实现所有对象
-c             生成计数
-d             指定目录
-e             展开对象
-f             指定读取数据的文件
-h             显示命令的帮助信息
-i             忽略大小写
-l             生成长格式的输出 
-n             使用非交互式（批量）模式
-o             指定一个输出文件来重定向输出
-q             以quite模式退出
-r             递归处理目录和文件
-s             以silent模式执行
-v             生成verbose模式
-x             排除和拒绝
-y             设置所有提问回答为yes
 </strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong>
</p>

</div>

<h4 id="处理简单选项">4.1、处理简单选项</h4>
<div class="level4">

<p>
 先来看一个例子：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 4test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="kw1">while</span> <span class="br0">&#91;</span> <span class="re5">-n</span> <span class="st0">&quot;$1&quot;</span> <span class="br0">&#93;</span>
 <span class="kw1">do</span>
 <span class="kw1">case</span> <span class="st0">&quot;$1&quot;</span> <span class="kw1">in</span>
 -a<span class="br0">&#41;</span> <span class="kw3">echo</span> <span class="st0">&quot;the -a option exists&quot;</span><span class="sy0">;;</span>
 -b<span class="br0">&#41;</span> <span class="kw3">echo</span> <span class="st0">&quot;the -b option exists&quot;</span><span class="sy0">;;</span>
 -c<span class="br0">&#41;</span> <span class="kw3">echo</span> <span class="st0">&quot;the -c option exists&quot;</span><span class="sy0">;;</span>
 <span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw3">echo</span> <span class="st0">&quot;the '$1' is not an option &quot;</span><span class="sy0">;;</span>
 <span class="kw1">esac</span>
 <span class="kw3">shift</span>
 <span class="kw1">done</span>
&nbsp;
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./4test -a -b -c -d -e</span>
 the <span class="re5">-a</span> option exists
 the <span class="re5">-b</span> option exists
 the <span class="re5">-c</span> option exists
 the <span class="st_h">'-d'</span> is not an option 
 the <span class="st_h">'-e'</span> is not an option </pre>

<p>
通过case语句循环判断各个选项，并且通过shift灵活移动选项变量。
</p>

</div>

<h4 id="从参数中分离选项">4.2、从参数中分离选项</h4>
<div class="level4">

<p>
 执行shell脚本经常会遇到使用选项又需要使用参数的情况。在linux中的标准方式是通过特殊字符码（–，双破折号）将二者分开，表示说当这个脚本程序发现双破折号后，就自动把剩余的命令行视为参数，而不再是选项了，如下看个例子：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 4test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="kw1">while</span> <span class="br0">&#91;</span> <span class="re5">-n</span> <span class="st0">&quot;$1&quot;</span> <span class="br0">&#93;</span>
 <span class="kw1">do</span>
 <span class="kw1">case</span> <span class="st0">&quot;$1&quot;</span> <span class="kw1">in</span>
 -a<span class="br0">&#41;</span> <span class="kw3">echo</span> <span class="st0">&quot;the -a option exists&quot;</span><span class="sy0">;;</span>
 -b<span class="br0">&#41;</span> <span class="kw3">echo</span> <span class="st0">&quot;the -b option exists&quot;</span><span class="sy0">;;</span>
 -c<span class="br0">&#41;</span> <span class="kw3">echo</span> <span class="st0">&quot;the -c option exists&quot;</span><span class="sy0">;;</span>
 --<span class="br0">&#41;</span> <span class="kw3">shift</span> 
      <span class="kw3">break</span><span class="sy0">;;</span>
 <span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw3">echo</span> <span class="st0">&quot;the '$1' is not an option &quot;</span><span class="sy0">;;</span>
 <span class="kw1">esac</span>
 <span class="kw3">shift</span>
 <span class="kw1">done</span>
 <span class="re2">count</span>=<span class="nu0">1</span>
 <span class="kw1">for</span> param <span class="kw1">in</span> $<span class="sy0">@</span>
 <span class="kw1">do</span>
   <span class="kw3">echo</span> <span class="st0">&quot;parameter #<span class="es2">$count</span>:<span class="es2">$param</span>&quot;</span>
   <span class="re2">count</span>=$<span class="br0">&#91;</span> <span class="re1">$count</span> + <span class="nu0">1</span> <span class="br0">&#93;</span>
 <span class="kw1">done</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./4test -a -c -f -- -b test</span>
 the <span class="re5">-a</span> option exists
 the <span class="re5">-c</span> option exists
 the <span class="st_h">'-f'</span> is not an option 
 parameter <span class="co0">#1:-b</span>
 parameter <span class="co0">#2:test</span></pre>

<p>
如上先通过while循环，把满足条件的选项显示出来，不满足条件的选项也显示出，并说明 is not an option ，当使用–把剩下的被脚本识别为参数的命令行则通过break跳出循环，并且在shift作用下置位成$1,然后在for循环下逐一显示出来，表示现实出来的即为参数，而非选项！
 如上的脚本得仔细分析，不然很容易出错。
 如果不通过双破折号隔离，如下的结果也是我们想象之中的：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./4test -a -c -f -b test</span>
 the <span class="re5">-a</span> option exists
 the <span class="re5">-c</span> option exists
 the <span class="st_h">'-f'</span> is not an option 
 the <span class="re5">-b</span> option exists
 the <span class="st_h">'test'</span> is not an option </pre>

<p>
完全是while循环的判断，没法跳出来执行for循环。
</p>

</div>
<!-- EDIT4 SECTION "4、处理选项" [8718-11791] -->
<h3 class="sectionedit5" id="获取用户输入">5、获取用户输入</h3>
<div class="level3">

<p>
 有时在脚本执行过程中需要询问一个问题并等待执行脚本的人员应答，bash shell提供的read命令可以实现这一需求。
</p>

</div>

<h4 id="基本读取">5.1、基本读取</h4>
<div class="level4">

<p>
read命令接受标准输入（键盘输入），如下示例：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># chmod u+x 5.1test </span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 5.1test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="kw3">echo</span> <span class="re5">-n</span> <span class="st0">&quot;please input your name:&quot;</span>
 <span class="kw2">read</span> name
 <span class="kw3">echo</span> <span class="st0">&quot;hello <span class="es2">$name</span>, welcome to IT website&quot;</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./5.1test </span>
 please input your name:twentyfour
 hello twentyfour, welcome to IT website
<span class="sy0">&lt;/</span>cod<span class="sy0">&gt;</span>
通过一个-n选项使得脚本执行输入不用换行显示。
 如上通过<span class="kw3">echo</span>显示结果，实际上可以直接通过<span class="kw2">read</span>命令在-p选项下直接把输入的内容附加给后面指定的变量，如下例子，效果跟上面完全一样：
<span class="sy0">&lt;</span>code <span class="kw2">bash</span><span class="sy0">&gt;</span>
<span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 5.1test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="kw2">read</span> <span class="re5">-p</span> <span class="st0">&quot;please input your name:&quot;</span> name
 <span class="kw3">echo</span> <span class="st0">&quot;hello <span class="es2">$name</span>, welcome to IT website&quot;</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./5.1test </span>
 please input your name:CCIE
 hello CCIE, welcome to IT website</pre>

<p>
所以，我们更多可以采用这种方法。
 如上的两个方法，我们都是把输入的值赋给了变量name，实际上我们可以不使用这个变量name。这么一来，read命令会把输入的命令赋给一个环境变量REPLY，先来看一个效果：
</p>
<pre class="code">[root@wzp ~]# read
 the content will be sent to \$REPLY
 [root@wzp ~]# echo $REPLY
 the content will be sent to $REPLY</pre>

<p>
我使用\把变量转义不被识别，在read命令下输入的内容将被缓存赋给环境变量$REPLY，这下再来看个例子：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 5.1test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="kw2">read</span> <span class="re5">-p</span> <span class="st0">&quot;please input your name:&quot;</span> 
 <span class="kw3">echo</span> <span class="st0">&quot;hello <span class="es2">$REPLY</span>, welcome to IT website&quot;</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./5.1test </span>
 please input your name:IBM
 hello IBM, welcome to IT website</pre>

<p>
很明显，这个例子跟如上的很接近，但是这个脚本没使用name变量，所以我输入的IBM被系统赋给了环境变量$REPLY。
</p>

</div>

<h4 id="计时">5.2、计时</h4>
<div class="level4">

<p>
 如上我们可以通过read命令实现交互性的操作，但是假如没有执行脚本的人员操作，脚本则无法自动运行下去。这个时候就可以使用-t选项指定一个计时器，表示等待时间段（单位为秒），如果超过指定的时间，read命令将返回一个非零退出状态，通过判断语句则使脚本可以自动跳过运行下去，我们先看一个例子：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># chmod u+x 5.2test </span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 5.2test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="kw1">if</span> <span class="kw2">read</span> <span class="re5">-t</span> <span class="nu0">5</span> <span class="re5">-p</span> <span class="st0">&quot;please input your name:&quot;</span>
 <span class="kw1">then</span>
   <span class="kw3">echo</span> <span class="st0">&quot;hello <span class="es2">$REPLY</span>, welcome to come back here&quot;</span>
 <span class="kw1">else</span>
   <span class="kw3">echo</span> <span class="st0">&quot;sorry , you are too slow &quot;</span>
 <span class="kw1">fi</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./5.2test </span>
 please input your name:twentyfour
 hello twentyfour, welcome to come back here
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./5.2test </span>
 please input your name:sorry , you are too slow </pre>

<p>
如上通过-t 5是的输入超过5秒则跳到else的判断结果，有点需要注意就是-p必须放置在-t的后面，否则报错！如上我没有任何输入，超过5秒，则脚本返回了sorry , you are too slow的内容。
 到这里还有一个挺经典的-n选项不得不提，除了如上输入时间计时，read还可以通过添加-n选项计数输入的字符。等输入的字符达到预定数目时就自动退出，这里借助case看一个例子：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 5.2test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="kw2">read</span> <span class="re5">-n1</span> <span class="re5">-p</span> <span class="st0">&quot;do you want to continue [Y/N]?&quot;</span>
 <span class="kw1">case</span> <span class="re1">$REPLY</span> <span class="kw1">in</span>
 Y <span class="sy0">|</span> y<span class="br0">&#41;</span> <span class="kw3">echo</span>
           <span class="kw3">echo</span> <span class="st0">&quot;fine ,continue on ..&quot;</span><span class="sy0">;;</span>
 N <span class="sy0">|</span> n<span class="br0">&#41;</span> <span class="kw3">echo</span> 
           <span class="kw3">echo</span> <span class="st0">&quot;OK, goodbye...&quot;</span><span class="sy0">;;</span>
 <span class="kw1">esac</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./5.2test </span>
 <span class="kw1">do</span> you want to <span class="kw3">continue</span> <span class="br0">&#91;</span>Y<span class="sy0">/</span>N<span class="br0">&#93;</span>?y
 fine ,<span class="kw3">continue</span> on ..
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./5.2test </span>
 <span class="kw1">do</span> you want to <span class="kw3">continue</span> <span class="br0">&#91;</span>Y<span class="sy0">/</span>N<span class="br0">&#93;</span>?N
 OK, goodbye...</pre>

<p>
如上-n后面是数字1，表示read命令接收到一个字符就退出，所以输入Y/N后不用回车就马上执行下去了。这里出现了两个echo，主要是使得结果换行显示，更显人性化。还有就是通过|符号识别大小写，也是人性化。
</p>

</div>

<h4 id="默读">5.3、默读</h4>
<div class="level4">

<p>
 有时候需要脚本用户进行输入，但输入的数据不显示出来，比如像password的输入。这里可以借用read命令下的-s选项，使得输入的数据颜色跟背景颜色一致，实现不显示数据的效果，看如下例子：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 5.3test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="kw2">read</span> <span class="re5">-s</span> <span class="re5">-p</span> <span class="st0">&quot;please input your passwd:&quot;</span>
 <span class="kw3">echo</span> your <span class="kw2">passwd</span> is <span class="re1">$REPLY</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># chmod u+x 5.3test </span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./5.3test </span>
 please input your passwd:your <span class="kw2">passwd</span> is aaa
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./5.3test </span>
 please input your passwd:your <span class="kw2">passwd</span> is 51cto</pre>

<p>
哈哈，这不失为一个非常棒的选项。还有，别以为数据颜色跟背景颜色一样后，你可以通过数据把数据选上而显示出来，linux命令行下输入的数据不占位，压根无法让你选上！
</p>

</div>

<h4 id="读取文件">5.4、读取文件</h4>
<div class="level4">

<p>
read命令可以读取linux系统上存储的文件数据，每调用一次read命令，都会去读取一行文本（注意，是一行，不是整个文件内容），当read命令读完的文本内容将以非零状态退出。借用while命令看一个例子：
</p>
<pre class="code bash"><span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 5.4test </span>
 <span class="co0">#!/bin/bash</span>
 <span class="re2">count</span>=<span class="nu0">1</span>
 <span class="kw2">cat</span> 51cto.test <span class="sy0">|</span> <span class="kw1">while</span> <span class="kw2">read</span> line
 <span class="kw1">do</span> 
 <span class="kw3">echo</span> <span class="st0">&quot;LINE <span class="es2">$count</span> : <span class="es2">$line</span>&quot;</span>
 <span class="re2">count</span>=$<span class="br0">&#91;</span> <span class="re1">$count</span> + <span class="nu0">1</span> <span class="br0">&#93;</span>
 <span class="kw1">done</span>
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># cat 51cto.test </span>
 aaaaaaaaaa
 bbbbbbbbbb
 cccccccccc
 <span class="br0">&#91;</span>root<span class="sy0">@</span>wzp ~<span class="br0">&#93;</span><span class="co0"># ./5.4test </span>
 LINE <span class="nu0">1</span> : aaaaaaaaaa
 LINE <span class="nu0">2</span> : bbbbbbbbbb
 LINE <span class="nu0">3</span> : cccccccccc</pre>

<p>
这里的51cto.test跟脚本文件放置同一个目录，当然最后就把要读取的文件以绝对路径写入脚本防止脚本读取不到。while命令使用read不断循环读取文件51cto.test中每一行，然后显示出来，直到read读取完后以非零状态退出而结束！
</p>

</div>
<!-- EDIT5 SECTION "5、获取用户输入" [11792-] -->