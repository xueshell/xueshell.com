<span class="co0">#!/bin/bash</span>
<span class="co0"># 2006-7-12, by wwy</span>
<span class="co0">#———————————————————————————–</span>
<span class="co0"># 此例子说明了一种用wait、read命令模拟多线程的一种技巧</span>
<span class="co0"># 此技巧往往用于多主机检查，比如ssh登录、ping等等这种单进程比较慢而不耗费cpu的情况</span>
<span class="co0"># 还说明了多线程的控制</span>
<span class="co0">#———————————————————————————–</span>
&nbsp;
&nbsp;
<span class="kw1">function</span> a_sub <span class="br0">&#123;</span> <span class="co0"># 此处定义一个函数，作为一个线程(子进程)</span>
<span class="kw2">sleep</span> <span class="nu0">3</span> <span class="co0"># 线程的作用是sleep 3s</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="re2">tmp_fifofile</span>=<span class="st0">&quot;/tmp/$$.fifo&quot;</span>
<span class="kw2">mkfifo</span> <span class="re1">$tmp_fifofile</span>      <span class="co0"># 新建一个fifo类型的文件</span>
<span class="kw3">exec</span> <span class="nu0">6</span><span class="sy0">&lt;&gt;</span><span class="re1">$tmp_fifofile</span>      <span class="co0"># 将fd6指向fifo类型</span>
<span class="kw2">rm</span> <span class="re1">$tmp_fifofile</span>
&nbsp;
&nbsp;
<span class="re2">thread</span>=<span class="nu0">15</span> <span class="co0"># 此处定义线程数</span>
<span class="kw1">for</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="re2">i</span>=<span class="nu0">0</span>;i<span class="sy0">&lt;</span><span class="re1">$thread</span>;i++<span class="br0">&#41;</span><span class="br0">&#41;</span>;<span class="kw1">do</span> 
<span class="kw3">echo</span>
<span class="kw1">done</span> <span class="sy0">&gt;&amp;</span><span class="nu0">6</span> <span class="co0"># 事实上就是在fd6中放置了$thread个回车符</span>
&nbsp;
<span class="kw1">for</span> <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="re2">i</span>=<span class="nu0">0</span>;i<span class="sy0">&lt;</span><span class="nu0">50</span>;i++<span class="br0">&#41;</span><span class="br0">&#41;</span>;<span class="kw1">do</span> <span class="co0"># 50次循环，可以理解为50个主机，或其他</span>
&nbsp;
<span class="kw2">read</span> <span class="re5">-u6</span> 
<span class="co0"># 一个read -u6命令执行一次，就从fd6中减去一个回车符，然后向下执行，</span>
<span class="co0"># fd6中没有回车符的时候，就停在这了，从而实现了线程数量控制</span>
&nbsp;
<span class="br0">&#123;</span> <span class="co0"># 此处子进程开始执行，被放到后台</span>
      a_sub <span class="sy0">&amp;&amp;</span> <span class="br0">&#123;</span> <span class="co0"># 此处可以用来判断子进程的逻辑</span>
       <span class="kw3">echo</span> <span class="st0">&quot;a_sub is finished&quot;</span>
      <span class="br0">&#125;</span> <span class="sy0">||</span> <span class="br0">&#123;</span>
      <span class="kw3">echo</span> <span class="st0">&quot;sub error&quot;</span>
      <span class="br0">&#125;</span>
      <span class="kw3">echo</span> <span class="sy0">&gt;&amp;</span><span class="nu0">6</span> <span class="co0"># 当进程结束以后，再向fd6中加上一个回车符，即补上了read -u6减去的那个</span>
<span class="br0">&#125;</span> <span class="sy0">&amp;</span>
&nbsp;
<span class="kw1">done</span>
&nbsp;
<span class="kw3">wait</span> <span class="co0"># 等待所有的后台子进程结束</span>
<span class="kw3">exec</span> <span class="nu0">6</span><span class="sy0">&gt;&amp;</span>- <span class="co0"># 关闭df6</span>
&nbsp;
&nbsp;
<span class="kw3">exit</span> <span class="nu0">0</span>