a:1559:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Unix系列shell程序编写(上) ";}i:2;i:1;}i:3;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34;}i:4;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34;}i:5;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" *Shell是什么? ";}i:2;i:36;}i:6;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:54;}i:7;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:54;}i:8;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:237:"　　任何发明都具有供用户使用的界面。UNIX供用户使用的界面就是Shell(DOS的command熟悉吧，但UNIX的要强大的多)。 
Shell为用户提供了输入命令和参数并可得到命令执行结果的环境。 ";}i:2;i:56;}i:9;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:293;}i:10;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:293;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:277:" 　　为了不同的需要，UNIX提供了不同的Shell。现在的UNIX大部分都支持BourneShell，以下教程就以BourneShell(Bsh)为例，一步步的领略UNIX 
 Shell的强大功能，占先其强大魅力，达到更方便灵活的管理、应用UNIX的目的。 ";}i:2;i:295;}i:12;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:572;}i:13;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:572;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" 　　1.UNIX内核和Shell的交互方法 ";}i:2;i:574;}i:15;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:617;}i:16;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:617;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:812:" 　　启动UNIX时，程序UNIX(内核)将被调入计算机内存，并一直保留在内存中直到机器关闭。在引导过程中，程序 
init将进入后台运行一直到机器关闭。该程序查询文件/etc/inittab，该文件列出了连接终端的各个端口及其特征。当发现一个活动的终端时，init程序调用getty程序在终端上显示login等登陆信息。(username和passwd)，在输入密码后， 
getty调用login进程，该进程根据文件/etc/passwd的内容来验证用户的身份。若用户通过身份验证，login进程 
 把用户的home目录设置成当前目录并把控制交给一系列setup程序。setup程序可以是指定的应用程序，通常setup程序 
 为一个Shell程序，如:/bin/sh 即Bourne Shell（command出来了，呵呵）。 ";}i:2;i:619;}i:18;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1431;}i:19;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1431;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:304:" 　　得到控制后，Shell程序读取并执行文件/etc/.profile以及.profile。这两个文件分别建立了系统范围内的和 
 该用户自己的工作环境。最后Shell显示命令提示符，如$。(这是以bsh为例，若是csh,为.cshrc,ksh为.kshrc,bash为.bashrc等等) 
　　　 ";}i:2;i:1433;}i:21;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1737;}i:22;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1737;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" 　　注不妨把/etc/.profile和.profile看成DOS的autoexec.bat 或 
config.sys文件) ";}i:2;i:1739;}i:24;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1830;}i:25;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1830;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:308:"　　当shell退出时，内核把控制交给init程序,该程序重新启动自动登陆过程。有两种方法使shell退出，一是用户执行exit命令，二是 
 内核(例如root用kill命令)发出一个kill命令结束shell进程。shell退出后，内核回收用户及程序使用的资源。 ";}i:2;i:1832;}i:27;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2140;}i:28;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2140;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" 　　用户登陆后，用户命令同计算机交互的关系为:命令进程";}i:2;i:2142;}i:30;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"---";}i:2;i:2222;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:">Shell程序";}i:2;i:2225;}i:32;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"---";}i:2;i:2237;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:">UNIX内核";}i:2;i:2240;}i:34;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"---";}i:2;i:2251;}i:35;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:307:">计算机硬件。当用户输入一个命令，如$ls, 
 Shell将定位其可执行文件/bin/ls并把其传递给内核执行。内核产生一个新的子进程调用并执行/bin/ls。当程序执行完毕后，内核取消 
 该子进程并把控制交给其父进程，即Shell程序。例如执行: ";}i:2;i:2254;}i:36;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2561;}i:37;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2561;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"　　　　$ps ";}i:2;i:2563;}i:39;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2579;}i:40;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2579;}i:41;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:"　　　　该命令将会列出用户正在执行的进程，即Shell程序(下来详细说说，别急现在)和ps程序。若执行: ";}i:2;i:2581;}i:42;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2718;}i:43;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2718;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"　　　　$sleep 10 & 
　　　　$ps ";}i:2;i:2720;}i:45;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2761;}i:46;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2761;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:"　　其中第一条命令将产生一个在后台执行的sleep子进程。ps命令执行时会显示出该子进程。 ";}i:2;i:2763;}i:48;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2885;}i:49;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2885;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:542:" 　　每当用户执行一条命令时，就会产生一个子进程。该子进程的执行与其父进程或Shell完全无关，这样可以使Shell去做其他工作。(Shell只是把用户的意图告诉内核，然后该干嘛干嘛) 
现在windows有个计划任务(在固定的时间，日期自动执行某任务),其实UNIX很早就有这个功能了，也就是所谓的Shell的自动执行。一些UNIX 
资源，如cron可以自动执行Shell程序而无需用户的参与，(这个功能好象在/var/spool/crotab目录里)。 ";}i:2;i:2887;}i:51;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3429;}i:52;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3429;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:266:"Crontab 程序对于系统管理员来说是非常有用的。Cron 
服务用于计划程序在特定时间（月、日、周、时、分）运行。我们以root的crontab 为例。根用户的 
crontab 文件放在 /var/spool/crontab/root 中，其格式如下： ";}i:2;i:3431;}i:54;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3697;}i:55;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3697;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:621:" 　　(1) 　(2) 　(3) 　(4) 　(5)　 (6) 
　　 0　　 0 　　*　　 * 　　3　　 /usr/bin/updatedb 
　　　　　　1. 分钟 (0-60) 
　　　　　　2. 小时 (0-23) 
　　　　　　3. 日 (1-31) 
　　　　　　4. 月 (1-12) 
　　　　　　5. 星期 (1-7) 
　　　　　　6. 所要运行的程序 
 　　2.Shell的功能和特点 
 　　1>命令行解释 
 　　2>使用保留字 
 　　3>使用Shell元字符(通配符) 
　　4>可处理程序命令 
 　　5>使用输入输出重定向和管道 
 　　6>维护一些变量 
 　　7>运行环境控制 
 　　8>支持Shell编程 ";}i:2;i:3699;}i:57;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4320;}i:58;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4320;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" 　　对于";}i:2;i:4322;}i:60;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:4335;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"命令行解释";}i:2;i:4336;}i:62;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:4351;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"就不多说了，就是在shell提示符(例如:";}i:2;i:4352;}i:64;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:4401;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"$";}i:2;i:4402;}i:66;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:4403;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:",";}i:2;i:4404;}i:68;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:4405;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"%";}i:2;i:4406;}i:70;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:4407;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:",";}i:2;i:4408;}i:72;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:4409;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"#";}i:2;i:4410;}i:74;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:4411;}i:75;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"等)后输入一行unix命令，Shell将接收用户的输入。 ";}i:2;i:4412;}i:76;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4477;}i:77;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4477;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" 　　";}i:2;i:4479;}i:79;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:4486;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"使用保留字";}i:2;i:4487;}i:81;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:4502;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:191:":Shell有一些具有特殊意义的字，例如在Shell脚本中，do,done,for等字用来控制循环操作，if,then等控制条件操作。 
 保留字随Shell环境的不同而不同。 ";}i:2;i:4503;}i:83;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4694;}i:84;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4694;}i:85;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" 　　";}i:2;i:4696;}i:86;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:4703;}i:87;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"通配符";}i:2;i:4704;}i:88;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:4713;}i:89;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:420:"：* 匹配任何位置 
 　　　　　　　? 匹配单个字符 
 　　　　　　　[] 匹配的字符范围或列表 例如: 
　　　　　　　 
 　　　　　　　　　 $ls [a-c]* 
　　　　　　　　　 
 　　　　　　　　　 将列出以a-c范围内字符开头的所有文件 
 　　　　　　　　　 $ls [a,m,t]* 
　　　　　　　　　将列出以e,m或t开头的所有文件 ";}i:2;i:4714;}i:90;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5134;}i:91;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5134;}i:92;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" 　　";}i:2;i:5136;}i:93;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5143;}i:94;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"程序命令";}i:2;i:5144;}i:95;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5156;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:281:"
：当用户输入命令后，Shell读取环境变量$path(一般在用户自己的.profile中设置)，该变量包含了命令可执行文件可能存在的目录列表。 
shell从这些目录中寻找命令所对应的可执行文件，然后将该文件送给内核执行。 ";}i:2;i:5157;}i:97;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5439;}i:98;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5439;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" 　　";}i:2;i:5441;}i:100;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5448;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"输入输出重定向及管道";}i:2;i:5449;}i:102;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5479;}i:103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" ：重定向的功能同DOS的重定向功能： ";}i:2;i:5480;}i:104;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5530;}i:105;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5530;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" 　　　　 ";}i:2;i:5532;}i:107;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5546;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:">";}i:2;i:5547;}i:109;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5548;}i:110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" 重定向输出 
 　　　　 ";}i:2;i:5549;}i:111;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5581;}i:112;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"<";}i:2;i:5582;}i:113;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5583;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" 重定向输入 ";}i:2;i:5584;}i:115;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5601;}i:116;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5601;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:" 　　而管道符号，是unix功能强大的一个地方,符号是一条竖线:";}i:2;i:5603;}i:118;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:5685;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"|";}i:2;i:5686;}i:120;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:5687;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:143:"，用法: 
command 1 | command 2 他的功能是把第一个命令command 1执行的结果作为command 
 2的输入传给command 2，例如: ";}i:2;i:5688;}i:122;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5831;}i:123;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5831;}i:124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"　　　　$ls -s|sort -nr|pg ";}i:2;i:5833;}i:125;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5864;}i:126;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5864;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:265:"　　该命令列出当前目录中的所有文件，并把输出送给sort命令作为输入，sort命令按数字递减的顺序把ls的输出排序。然后把排序后的 
 内容传送给pg命令，pg命令在显示器上显示sort命令排序后的内容。 ";}i:2;i:5866;}i:128;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6131;}i:129;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6131;}i:130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" 　　";}i:2;i:6133;}i:131;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6140;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"维护变量";}i:2;i:6141;}i:133;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6153;}i:134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:"
：Shell可以维护一些变量。变量中存放一些数据供以后使用。用户可以用";}i:2;i:6154;}i:135;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6251;}i:136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"=";}i:2;i:6252;}i:137;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:6253;}i:138;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"给变量赋值，如: ";}i:2;i:6254;}i:139;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6277;}i:140;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6277;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"　　　　　　　　　$lookup=/usr/mydir ";}i:2;i:6279;}i:142;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6325;}i:143;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6325;}i:144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:267:"该命令建立一个名为lookup的变量并给其赋值/usr/mydir,以后用户可以在命令行中使用lookup来代替/usr/mydir，例如: 
　　　　　　　　　 
 　　　　　　　　　$echo $lookup 
　　　　　　　　　结果显示:/usr/mydir ";}i:2;i:6327;}i:145;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6594;}i:146;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6594;}i:147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"　　　　　　　　　为了使变量能被子进程使用,可用exprot命令，例如: ";}i:2;i:6596;}i:148;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6689;}i:149;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6689;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:"　　　　　　　　　$lookup=/usr/mydir 
　　　　　　　　　$export lookup ";}i:2;i:6691;}i:151;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6780;}i:152;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6780;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"　　";}i:2;i:6782;}i:154;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6788;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"运行环境控制";}i:2;i:6789;}i:156;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:6807;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:"
：当用户登陆启动shell后，shell要为用户创建一个工作的环境，如下: ";}i:2;i:6808;}i:158;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6900;}i:159;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6900;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:245:"　　1>当login程序激活用户shell后，将为用户建立环境变量。从/etc/profile和.profile文件中读出，在这些文件中一般都用$TERM 
变量设置终端类型，用$PATH变量设置Shell寻找可执行文件的路径。 ";}i:2;i:6902;}i:161;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7147;}i:162;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7147;}i:163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:" 　　2>从/etc/passwd文件或命令行启动shell时，用户可以给shell程序指定一些参数，例如";}i:2;i:7149;}i:164;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:7260;}i:165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"-x";}i:2;i:7261;}i:166;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:7263;}i:167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:"，可以在命令执行前显示该命令及其参数。后面详细介绍这些参数。 ";}i:2;i:7264;}i:168;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7355;}i:169;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7355;}i:170;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" 　　";}i:2;i:7357;}i:171;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:7364;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"shell编程";}i:2;i:7365;}i:173;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:7376;}i:174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" ：本文主要介绍的内容。 ";}i:2;i:7377;}i:175;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7412;}i:176;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7412;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:250:" 　　shell本身也是一种语言(*可以先理解为unix命令的组合，加上类C的条件，循环等程序控制语句,类似dos批处理，但要强大的多),用户可以 
 通过shell编程(脚本,文本文件)，完成特定的工作。 ";}i:2;i:7414;}i:178;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7664;}i:179;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7664;}i:180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"SHELL变量 ";}i:2;i:7666;}i:181;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7678;}i:182;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7678;}i:183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" 　　下面我们详细的介绍Bourne Shell的编程: ";}i:2;i:7680;}i:184;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7737;}i:185;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7737;}i:186;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:368:"　　自从贝尔实验室设计了Bourne 
 Shell。从那时起许多厂商根据不同的硬件平台设计了许多版本得unix。但在众多版本的unix中，Bourne Shell 
一直保持一致。 
 　　1>Bsh的启动：用户在登陆后，系统根据文件/etc/passwd中有关该用户的信息项启动Shell。例如某用户在passwd中 
 的信息项为: ";}i:2;i:7739;}i:187;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8107;}i:188;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8107;}i:189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"　　　　ice_walk411:103:Imsnow ,ice_walk:/home/ice_walk:/bin/bsh ";}i:2;i:8109;}i:190;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8178;}i:191;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8178;}i:192;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"　　则表明，用户名是ice_walk等信息，在最后一项";}i:2;i:8180;}i:193;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:8245;}i:194;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"/bin/bsh";}i:2;i:8246;}i:195;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:8254;}i:196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:"表明用户的sh环境类型是bsh,于是系统启动之。在启动或执行(包括下面我们要讲 
 的shell程序";}i:2;i:8255;}i:197;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:8375;}i:198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"脚本）过程中可以使用以下一些参数，我们一一说明: ";}i:2;i:8377;}i:199;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8448;}i:200;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8448;}i:201;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"　　-a 将所有变量输出 
 　　-c ";}i:2;i:8450;}i:202;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:8492;}i:203;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"string";}i:2;i:8493;}i:204;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:8499;}i:205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:477:"从string中读取命令 
 　　-e 使用非交互式模式 
 　　-f 禁止shell文件名产生 
 　　-h 定义 
 　　-i 交互式模式 
 　　-k 为命令的执行设置选项 
 　　-n 读取命令但不执行 
 　　-r 受限模式 
 　　-s 命令从标准输入读取 
 　　-t 执行一命令，然后退出shell 
　　-u 在替换时，使用未设置的变量将会出错 
 　　-v 显示shell的输入行 
 　　-x 跟踪模式，显示执行的命令 ";}i:2;i:8500;}i:206;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8977;}i:207;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8977;}i:208;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:" 许多模式可以组合起来用,您可以试试了，但-ei好象不行，你说why呢？ ";}i:2;i:8979;}i:209;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9072;}i:210;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9072;}i:211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:" 　　使用set可以设置或取消shell的选项来改变shell环境。打开选项用";}i:2;i:9074;}i:212;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:9163;}i:213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"-";}i:2;i:9164;}i:214;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:9165;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:",关闭选项用";}i:2;i:9166;}i:216;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:9182;}i:217;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"+";}i:2;i:9183;}i:218;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:9184;}i:219;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:125:",多数unix允许打开或关闭a、f、e、h、k、n、 
u、v和x选项。若显示Shell中已经设置的选项，执行: ";}i:2;i:9185;}i:220;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9310;}i:221;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9310;}i:222;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"　　　　$echo $- ";}i:2;i:9312;}i:223;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9333;}i:224;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9333;}i:225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:221:"　　Bsh中每个用户的home目录下都有一个.profile文件，可以修改该文件来修改shell环境。为了增加一个可执行文件的路径(例如/ice_walk/bin)， 
 可以把下面代码加入.profile中 ";}i:2;i:9335;}i:226;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9556;}i:227;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9556;}i:228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" 　　　　PATH=$PATH:/ice_walk/bin;exprot PATH ";}i:2;i:9558;}i:229;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9608;}i:230;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9608;}i:231;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"　　 .profile中shell的环境变量意思如下: ";}i:2;i:9610;}i:232;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9662;}i:233;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9662;}i:234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:391:"　　　　CDPATH 执行cd命令时使用的搜索路径 
 　　　　HOME 用户的home目录 
 　　　　IFS 内部的域分割符，一般为空格符、制表符、或换行符 
 　　　　MAIL 指定特定文件(信箱)的路径，有UNIX邮件系统使用 
 　　　　PATH 寻找命令的搜索路径(同dos的config.sys的 path) 
　　　　PS1 主命令提示符，默认是";}i:2;i:9664;}i:235;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:10055;}i:236;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"$";}i:2;i:10056;}i:237;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:10057;}i:238;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"
　　　　PS2 从命令提示符，默认是";}i:2;i:10058;}i:239;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:10106;}i:240;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:">";}i:2;i:10107;}i:241;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:10108;}i:242;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"
　　　　TERM 使用终端类型 ";}i:2;i:10109;}i:243;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10147;}i:244;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10147;}i:245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" 　　2>Bsh里特殊字符及其含义 ";}i:2;i:10149;}i:246;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10189;}i:247;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10189;}i:248;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:257:" 　　在Bsh中有一组非字母字符。这些字符的用途分为四类:作为特殊变量名、产生文件名、数据或程序控制以及引用和逃逸字符控制。他们 
 可以让用户在Shell中使用最少的代码完成复杂的任务。 ";}i:2;i:10191;}i:249;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10448;}i:250;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10448;}i:251;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:701:" 　　　　　*> Shell变量名使用的特殊字符 
 　　　　　　　　$# 传送给命令Shell的参数序号 
 　　　　　　　　$- 在Shell启动或使用set命令时提供选项 
 　　　　　　　　$? 上一条命令执行后返回的值 
 　　　　　　　　$$ 当前shell的进程号 
 　　　　　　　　$! 上一个子进程的进程号 
 　　　　　　　　$@ 所有的参数，每个都用双括号括起 
 　　　　　　　　$* 所有参数，用双括号括起 
 　　　　　　　　$n 位置参数值，n表示位置 
 　　　　　　　　$0 当前shell名 
 　　　　　*>产生文件名的特殊字符 
 　　　　　　　　包括";}i:2;i:10450;}i:252;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:11151;}i:253;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"*";}i:2;i:11152;}i:254;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:11153;}i:255;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:",";}i:2;i:11154;}i:256;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:11155;}i:257;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"?";}i:2;i:11156;}i:258;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:11157;}i:259;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:",";}i:2;i:11158;}i:260;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:11159;}i:261;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"[]";}i:2;i:11160;}i:262;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:11162;}i:263;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:221:"，上面讲过，不再多说。 
 　　　　　*>数据或程序控制使用的特殊字符 
 　　　　　　　　>(file) 输出重定向到文件中(没有文件则创建，有则覆盖) 
　　　　　　　　";}i:2;i:11163;}i:264;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:">>";}i:2;i:11384;}i:265;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:440:"(file) 
输出重定向到文件中(没有则创建，有则追加到文件尾部) 
　　　　　　　　<(file) 输入重定向到文件 
 　　　　　　　　; 命令分割符 
 　　　　　　　　| 管道符 
 　　　　　　　　& 后台运行(例如:sleep 10 & 
　　　　　　　　` ` 命令替换，重定向一条命令的输出作为另一命令的参数 
 　　　　　*>对于引用或逃逸的特殊字符 ";}i:2;i:11386;}i:266;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11826;}i:267;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11826;}i:268;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"Bsh用单引号' '和双引号";}i:2;i:11828;}i:269;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:11858;}i:270;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"
 ";}i:2;i:11859;}i:271;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:11862;}i:272;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:196:"将特殊字符或由空白分隔的字引用起来组成一个简单的数据串.使用单引号和双引号的区别是双引号中的内容可进行参数和变量替换.逃逸字符也一样. ";}i:2;i:11863;}i:273;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12059;}i:274;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12059;}i:275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"　　　　　　　　$echo ";}i:2;i:12061;}i:276;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:12091;}i:277;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"$HOME $PATH";}i:2;i:12092;}i:278;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:12103;}i:279;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:"
　　　　 　　　 结果显示$/u/ice_walk/bin:/etc:/usr/bin 
　　　　　　　　而$echo '$HOME $PATH' 结果显示$HOME $PATH ";}i:2;i:12104;}i:280;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12244;}i:281;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12244;}i:282;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"　　shell的逃逸符是一个";}i:2;i:12246;}i:283;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:12278;}i:284;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"\";}i:2;i:12279;}i:285;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:12280;}i:286;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:",表示其后的字符不具有特殊的含义或不是shell的函数 ";}i:2;i:12281;}i:287;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12351;}i:288;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12351;}i:289;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" 　　　　　　　　$echo \$HOME $PATH 
　　　　　　　　结果显$$HOME /bin:/etc:/usr/bin: ";}i:2;i:12353;}i:290;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12458;}i:291;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12458;}i:292;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" 3>Bsh的变量 ";}i:2;i:12460;}i:293;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12476;}i:294;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12476;}i:295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" 　　前面我们在多个地方引用了变量,当Shell遇到一个";}i:2;i:12478;}i:296;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:12548;}i:297;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"$";}i:2;i:12549;}i:298;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:12550;}i:299;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:348:"符时(没有被引用或逃逸)，它将认为其后为一变量。不论该变量是环境变量还是用户自定义的变量，在命令行中变量名要被变量值替换。例如命令:ls 
 $HOME将列出变量HOME对应目录下的文件。 
 用户可以在命令行中的任何地方进行变量替换。包括命令名本身，例如： ";}i:2;i:12551;}i:300;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12899;}i:301;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12899;}i:302;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" 　　　　$dir=ls 
　　　　$$dir f* ";}i:2;i:12901;}i:303;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12944;}i:304;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12944;}i:305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"　　将列出以f开头的文件。 ";}i:2;i:12946;}i:306;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12984;}i:307;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12984;}i:308;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:" 　　现在详细的介绍下Bsh的变量。Bsh中有四类变量:用户定义的变量、位置变量(shell参数)、预定义变量及环境变量。 ";}i:2;i:12986;}i:309;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13140;}i:310;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13140;}i:311;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" 　　用户定义的变量： ";}i:2;i:13142;}i:312;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13174;}i:313;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13174;}i:314;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:205:" 　　用户定义的变量由字母和下划线组成，并且变量名的第一个字符不能为数字(0~9)。与其他UNIX名字一样，变量名是大小写敏感的。用户可以在命令行上用";}i:2;i:13176;}i:315;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:13381;}i:316;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"=";}i:2;i:13382;}i:317;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:13383;}i:318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"给变量赋值，例如: ";}i:2;i:13384;}i:319;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13410;}i:320;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13410;}i:321;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"　　　　$NAME=ice_walk ";}i:2;i:13412;}i:322;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13439;}i:323;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13439;}i:324;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:"　　给变量NAME赋值为ice_walk,在应用变量NAME的时候，在NAME前加";}i:2;i:13441;}i:325;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:13522;}i:326;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"$";}i:2;i:13523;}i:327;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:13524;}i:328;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:142:"即可，前面已说，不再废话(别说我废话多，关键是没当过老师)。可以用变量和其他字符组成新的字，例如: ";}i:2;i:13525;}i:329;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13667;}i:330;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13667;}i:331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"　　　　$SUN=sun 
　　　　$echo ${SUN}day ";}i:2;i:13669;}i:332;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13719;}i:333;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13719;}i:334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:393:"　　在应用shell变量时候，可以在变量名字两边$后面加上{}，以更加清楚的显示给shell,哪个是真正的变量，以实现字符串的合并等功能。 
 　 
 　　结果显示:sunday(注意不能echo 
 $SUNday,因为SUNday变量没定义，读者试下执行结果) 
用户也可以在命令行上同时对多个变量赋值，赋值语句之间用空格分开: ";}i:2;i:13721;}i:335;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14114;}i:336;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14114;}i:337;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"　　　　$X=x Y=y ";}i:2;i:14116;}i:338;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14137;}i:339;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14137;}i:340;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"　　　　注意变量赋值是从右到左进行的 ";}i:2;i:14139;}i:341;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14194;}i:342;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14194;}i:343;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" 　　　　$X=$Y Y=y 
　　　　X的值是y 
　　　　$X=z Y=$Z ";}i:2;i:14196;}i:344;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14267;}i:345;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14267;}i:346;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"　　　　Y的值是空(变量未赋值时，shell不报错，而是赋值为空) ";}i:2;i:14269;}i:347;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14353;}i:348;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14353;}i:349;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"　　用户可以使用";}i:2;i:14355;}i:350;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:14379;}i:351;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"unset <变量>";}i:2;i:14380;}i:352;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:14394;}i:353;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"命令清除给变量赋的值 ";}i:2;i:14395;}i:354;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14426;}i:355;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14426;}i:356;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" 用户使用变量时要在其前面加一";}i:2;i:14428;}i:357;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:14471;}i:358;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"$";}i:2;i:14472;}i:359;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:14473;}i:360;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:175:"符，使变量名被变量值所替换。Bsh可以进行变量的条件替换，即只有某种条件发生时才进行替换。替换条件放在一对大括号{}中，如: ";}i:2;i:14474;}i:361;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14649;}i:362;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14649;}i:363;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:"　　　　${variable: -value} 
 variable是一变量值，value是变量替换使用的默认值 ";}i:2;i:14651;}i:364;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14750;}i:365;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14750;}i:366;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:307:" 　　　　$echo Hello $UNAME 
　　　　结果显示:Hello 
　　　　$echo Hello ${UNAME: -there} 
　　　　结果显示:Hello there 
　　　　$echo $UNAME 
　　　　结果显示: (空) 
　　　　$UNAME=John 
　　　　$echo Hello ${UNAME: -there} 
　　　　结果显示:Hello John ";}i:2;i:14752;}i:367;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15059;}i:368;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15059;}i:369;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:239:"　　可以看出，变量替换时将使用命令行中定义的默认值，但变量的值并没有因此而改变。另外一种替换的方法是不但使用默认值进行替换，而且将默认值赋给该变量。其形式如下: ";}i:2;i:15061;}i:370;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15300;}i:371;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15300;}i:372;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"　　　　${variable:=value} ";}i:2;i:15302;}i:373;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15333;}i:374;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15333;}i:375;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:"　　该形式在变量替换后同时把值value符给变量variable。 ";}i:2;i:15335;}i:376;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15409;}i:377;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15409;}i:378;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:304:" 　　　　$echo Hello $UNAME 
　　　　结果显示:Hello 
　　　　$echo Hello ${UNAME:=there} 
　　　　结果显示:Hello there 
　　　　$echo $UNAME 
　　　　结果显示:there 
　　　　$UNAME=John 
　　　　$echo Hello ${UNAME:-there} 
　　　　结果显示:Hello John ";}i:2;i:15411;}i:379;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15715;}i:380;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15715;}i:381;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:"　　变量替换的值也可以是` `括起来的命令: ";}i:2;i:15717;}i:382;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15776;}i:383;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15776;}i:384;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"　　　　$USERDIR={$Mydir: -`pwd`} ";}i:2;i:15778;}i:385;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15816;}i:386;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15816;}i:387;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:95:"　　第三种变量的替换方法是只有当变量已赋值时才用指定值替换形式: ";}i:2;i:15818;}i:388;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15913;}i:389;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15913;}i:390;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"　　　　${variable: +value} ";}i:2;i:15915;}i:391;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15947;}i:392;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15947;}i:393;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:"　　　　只有变量variable已赋值时，其值才用value替换，否则不进行任何替换，例如: ";}i:2;i:15949;}i:394;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16060;}i:395;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16060;}i:396;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"　　　　$ERROPT=A 
　　　　$echo ${ERROPT: +";}i:2;i:16062;}i:397;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:16114;}i:398;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"Error tracking is acitive";}i:2;i:16115;}i:399;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:16140;}i:400;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:"} 
　　　　结果显示:Error tracking is acitive 
　　　　$ERROPT= 
　　　　$echo ${ERROPT: +";}i:2;i:16141;}i:401;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:16247;}i:402;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"Error tracking is acitive";}i:2;i:16248;}i:403;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:16273;}i:404;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:"} 
　　　　结果显示: (空) ";}i:2;i:16274;}i:405;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16309;}i:406;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16309;}i:407;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"　　我们还可以使用错误检查的条件进行变量替换: ";}i:2;i:16311;}i:408;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16379;}i:409;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16379;}i:410;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"　　　　${variablemessage} ";}i:2;i:16381;}i:411;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16412;}i:412;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16412;}i:413;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:171:"当变量variable已设置时，正常替换。否则消息message将送到标准错误输出(若此替换出现在shell程序中,那么该程序将终止)。　例如： ";}i:2;i:16414;}i:414;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16585;}i:415;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16585;}i:416;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" 　　　　$UNAME= 
　　　　$echo $ {UNAME";}i:2;i:16587;}i:417;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:16635;}i:418;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"UNAME HAS NOT BEEN SET";}i:2;i:16636;}i:419;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:16658;}i:420;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"} 
　　　　结果显示:UNAME HAS NOT BEEN SET ";}i:2;i:16659;}i:421;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16710;}i:422;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16710;}i:423;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:"　　　　$UNAME=Stephanie 
　　　　$echo $ {UNAME";}i:2;i:16712;}i:424;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:16768;}i:425;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"UNAME HAS NOT BEEN SET";}i:2;i:16769;}i:426;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:16791;}i:427;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"} ";}i:2;i:16792;}i:428;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16794;}i:429;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16794;}i:430;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:"　　　　结果显示:Stephanie 
　　　　当没有指定message时，shell将显示一条默认的消息，例如: ";}i:2;i:16796;}i:431;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16918;}i:432;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16918;}i:433;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:"　　　　$UNAME= 
　　　　$echo $ {UNAME} 
　　　　结果显示:sh:UNAME:parameter null or not set ";}i:2;i:16920;}i:434;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17030;}i:435;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17030;}i:436;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" 4>位置变量或Shell参数 ";}i:2;i:17032;}i:437;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17062;}i:438;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17062;}i:439;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:262:" 　　在shell解释用户的命令时，将把命令行的第一个字作为命令，而其他的字作为参数。当命令对应的可执行文件为Shell程序时，这些参数将作为位置变量传送给该程序。第一个参数记为$1,第二个为$2";}i:2;i:17064;}i:440;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:17326;}i:441;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:".第九个为$9。其中1到9是真正的参数名，";}i:2;i:17329;}i:442;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:17382;}i:443;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"$";}i:2;i:17383;}i:444;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:17384;}i:445;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"符只是用来标识变量的替换。 ";}i:2;i:17385;}i:446;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17425;}i:447;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17425;}i:448;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:" 　　位置变量$0指命令对应的可执行文件名。在后面将详细介绍位置变量。 ";}i:2;i:17427;}i:449;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17527;}i:450;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17527;}i:451;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" 　　1.只读变量 ";}i:2;i:17529;}i:452;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17551;}i:453;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17551;}i:454;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:" 　　用户将变量赋值后，为了防止以后对该变量的修改，可以用以下命令将该变量设置为只读变量： ";}i:2;i:17553;}i:455;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17687;}i:456;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17687;}i:457;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" 　　　　readonly variable ";}i:2;i:17689;}i:458;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17720;}i:459;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17720;}i:460;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"　　2.export命令 ";}i:2;i:17722;}i:461;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17743;}i:462;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17743;}i:463;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:318:" 　　shell执行一个程序时，首先为该程序建立一个新的执行环境，称为子shell。在Bourne 
 Shell中变量都是局部的，即他们只在创建他们的Shell中有意义。用户可以用export命令让变量被其他子Shell识别。但某用户的变量是没法让其他用户使用的。 ";}i:2;i:17745;}i:464;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18063;}i:465;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18063;}i:466;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:223:" 　　当用户启动一个新shell时,该shell将使用默认的提示符。因为赋给变量PS1的值只在当前shell中有效。为了让子Shell使用当前Shell中定义的提示符号，可以使用export命令： ";}i:2;i:18065;}i:467;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18288;}i:468;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18288;}i:469;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" 　　　　$PS1=";}i:2;i:18290;}i:470;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:18308;}i:471;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"Enter command:";}i:2;i:18309;}i:472;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:18323;}i:473;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:"
　　　　Enter command:export PS1 
　　　　Enter command:sh 
　　　　Enter command: ";}i:2;i:18324;}i:474;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18421;}i:475;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18421;}i:476;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:255:"　　　　此时变量PS1变成了全局变量。它可以被其子Shell使用。当变量被设置成全局的以后，将一直保持有效直到用户退出该变量所在的Shell。用户可以在文件.profile中给一个变量永久赋值。详见";}i:2;i:18423;}i:477;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:18678;}i:478;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"规范Shell";}i:2;i:18679;}i:479;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:18690;}i:480;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"。 ";}i:2;i:18691;}i:481;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18695;}i:482;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18695;}i:483;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" 基本语句 ";}i:2;i:18697;}i:484;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18711;}i:485;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18711;}i:486;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:291:" 　　从本节起，我们将详细介绍Shell程序设计的基本知识，通过编写Shell脚本，用户可以根据自己的需要有条件的或者重复的执行命令。通过Shell程序，可以把单个的UNIX命令组合成一个完全实用的工具，完成用户的任务。 ";}i:2;i:18713;}i:487;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19004;}i:488;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19004;}i:489;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" 　　1>什么是Shell程序 ";}i:2;i:19006;}i:490;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19036;}i:491;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19036;}i:492;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" 　　当用户在UNIX Shell中输入了一条复杂的命令，如: ";}i:2;i:19038;}i:493;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19108;}i:494;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19108;}i:495;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"　　　　$ls -R /|greo myname |pg ";}i:2;i:19110;}i:496;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19147;}i:497;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19147;}i:498;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:185:"　　我们可以称用户在对Shell编程，当把这条语句写在一个文件里，并且符给该文件可执行权限，那么该文件就是我们传统上说的Shell程序。 ";}i:2;i:19149;}i:499;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19334;}i:500;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19334;}i:501;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" 　　2>简单的Shell程序 ";}i:2;i:19336;}i:502;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19366;}i:503;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19366;}i:504;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:" 　　假设用户每天使用下述命令备份自己的数据文件: ";}i:2;i:19368;}i:505;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19440;}i:506;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19440;}i:507;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"　　　　$cd /usr/icewalk;ls * |cpio -o > /dev/fd0 ";}i:2;i:19442;}i:508;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19496;}i:509;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19496;}i:510;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:"　　我们可以把它写在一个文件，如:ba.sh中: ";}i:2;i:19498;}i:511;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19557;}i:512;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19557;}i:513;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"　　　　$cat >ba.sh 
　　　　cd /usr/icewalk 
　　　　ls * |cpio -o > /dev/fd0 
　　　　^D 　(ctrl_d) ";}i:2;i:19559;}i:514;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19678;}i:515;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19678;}i:516;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:"　　程序ba.sh就是Shell脚本，用户可以用vi或其他编辑工具编写更复杂的脚本。 ";}i:2;i:19680;}i:517;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19783;}i:518;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19783;}i:519;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:" 　　此时用户备份文件只需要执行Shell程序ba.sh,执行时需在当前Shell中创建一个子Shell: ";}i:2;i:19785;}i:520;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19899;}i:521;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19899;}i:522;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"　　　　$sh ba.sh ";}i:2;i:19901;}i:523;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19923;}i:524;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19923;}i:525;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:"　　程序sh与用户登陆时执行的Bourne 
 Shell相同，但当Sh命令带参数ba.sh后，它将不再是一个交互式的Shell，而是直接从文件ba.sh中读取命令。 ";}i:2;i:19925;}i:526;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20109;}i:527;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20109;}i:528;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" 　　执行ba.sh中命令的另一方法是给文件ba.sh执行权限： ";}i:2;i:20111;}i:529;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20186;}i:530;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20186;}i:531;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" 　　　　$chmod +x ba.sh ";}i:2;i:20188;}i:532;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20217;}i:533;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20217;}i:534;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:220:"　　此时，用户可以输入文件名ba.sh做为一个命令来备份自己的数据，需要注意的是，用这种方法执行命令的时候，文件ba.sh必须存在于环境变量$PATH所指定的路径上。 ";}i:2;i:20219;}i:535;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20439;}i:536;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20439;}i:537;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Unix系列shell程序编写(中) ";}i:2;i:20445;}i:538;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20478;}i:539;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20478;}i:540;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"3>在Shell中使用数据变量 ";}i:2;i:20480;}i:541;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20512;}i:542;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20512;}i:543;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" 　　用户可以在Shell中使用数据变量，例如ba.sh程序: ";}i:2;i:20514;}i:544;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20584;}i:545;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20584;}i:546;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"　　　　cd/usr/icewalk 
　　　　ls|cpio -o > /dev/fd0 ";}i:2;i:20586;}i:547;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20648;}i:548;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20648;}i:549;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:152:"　　该程序中要备份的目录为一常量，即该程序只能用来备份一个目录。若在该程序中使用变量，则会使其更通用: ";}i:2;i:20650;}i:550;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20802;}i:551;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20802;}i:552;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"　　　　workdir=$1 
　　　　cd $workdir 
　　　　ls * |cpio -o > /dev/fd0 ";}i:2;i:20804;}i:553;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20890;}i:554;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20890;}i:555;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:284:"　　通过这一改变，用户可以使用程序备份变量$workdir指定的目录。例如我们要备份/home/www的内容，只要运行ba.sh 
 /home/www即可实现。(若不明白 
$1，下面将详细介绍shell参数的传递，$1代表本sh程序-ba.sh的第一个参数) ";}i:2;i:20892;}i:556;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21176;}i:557;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21176;}i:558;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"　　4>在Shell程序中加上注释 ";}i:2;i:21178;}i:559;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21216;}i:560;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21216;}i:561;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" 　　为了增加程序的可读性，我们提倡加入注释。在Shell程序中注释将以";}i:2;i:21218;}i:562;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:21314;}i:563;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"#";}i:2;i:21315;}i:564;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:21316;}i:565;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"号开始。当Shell解释到";}i:2;i:21317;}i:566;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:21346;}i:567;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"#";}i:2;i:21347;}i:568;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:21348;}i:569;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"时，会认为从";}i:2;i:21349;}i:570;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:21367;}i:571;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"#";}i:2;i:21368;}i:572;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:21369;}i:573;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"号起一直到该行行尾为注释。 ";}i:2;i:21370;}i:574;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21410;}i:575;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21410;}i:576;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" 　　5>对Shell变量进行算术运算 ";}i:2;i:21412;}i:577;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21454;}i:578;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21454;}i:579;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:229:" 　　高级语言中变量是具有类型的，即变量将被限制为某一数据类型，如整数或字符类型。Shell变量通常按字符进行存储，为了对Shell变量进行算术运算，必须使用expr命令。 ";}i:2;i:21456;}i:580;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21685;}i:581;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21685;}i:582;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:" 　　expr命令将把一个算术表达式作为参数，通常形式如下: ";}i:2;i:21687;}i:583;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21766;}i:584;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21766;}i:585;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"　　　　expr [数字] [操作符] [数字] ";}i:2;i:21768;}i:586;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21815;}i:587;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21815;}i:588;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:160:"　　由于Shell是按字符形式存储变量的，所以用户必须保证参加算术运算的操作数必须为数值。下面是有效的算术操作符: ";}i:2;i:21817;}i:589;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21977;}i:590;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21977;}i:591;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:373:"　　　　+　　　两个整数相加 
 　　　　-　　　第一个数减去第二个数 
 　　　　*　　　两整数相乘 
 　　　　/　　　第一个整数除以第二个整数 
 　　　　%　　　两整数相除，取余数 
 　　例如: 
　　　　$expr 2 + 1 
　 　　 结果显示：3 
　　　　$expr 5 - 3 
　 　　 结果显示：2 ";}i:2;i:21979;}i:592;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22352;}i:593;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22352;}i:594;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:203:"若expr的一个参数是变量，那么在表达式计算之前用变量值替换变量名。 
 　　　　$int=3 
　　　　$expr $int + 4 
　　　　结果显示:7 
　　用户不能单纯使用";}i:2;i:22354;}i:595;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:22557;}i:596;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"*";}i:2;i:22558;}i:597;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:22559;}i:598;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:"做乘法,若输入: 
　　　　$expr 4*5 
　　系统将会报错，因为Shell看到";}i:2;i:22560;}i:599;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:22649;}i:600;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"*";}i:2;i:22650;}i:601;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:22651;}i:602;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:306:"将会首先进行文件名替换。正确形式为: 
　　　　$expr 4 \* 5 
　 　　 结果显示:20 
　　多个算术表达式可以组合在一起，例如: 
　　　　$expr 5 + 7 / 3 
　　　　结果显示:7 
　　运算次序是先乘除后加减，若要改变运算次序，必须使用";}i:2;i:22652;}i:603;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:22958;}i:604;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"`";}i:2;i:22959;}i:605;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:22960;}i:606;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:177:"号,如: 
　　　　$int=`expr 5 + 7` 
　　　　$expr $int/3 
　　 　 结果显示:4 
　　　　或者： 
 　　　　$expr `expr 5+7`/3 
　　　　结果显示:4 ";}i:2;i:22961;}i:607;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23138;}i:608;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23138;}i:609;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:"　　6>向Shell程序传递参数 ";}i:2;i:23140;}i:610;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23175;}i:611;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23175;}i:612;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:290:" 　　一个程序可以使用两种方法获得输入数据。一是执行时使用参数。另一种方法是交互式地获得数据。vi编辑程序可以通过交互式的方法获得数据，而ls和expr则从参数中取得数据。以上两种方法Shell程序都可以使用。在";}i:2;i:23177;}i:613;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:23467;}i:614;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"交互式读入数据";}i:2;i:23468;}i:615;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:23489;}i:616;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"一节中将介绍Shell程序通过交互式的方法获得参数。 ";}i:2;i:23490;}i:617;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23559;}i:618;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23559;}i:619;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:189:" 　　通过命令行给Shell程序传递参数可以扩大程序的用途。以前面提到的ba.sh程序为例: 
　　$cat >re.sh 
　　cd $workdir 
　　cpio -i < /dev/fd0 
　　^d ";}i:2;i:23561;}i:620;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23750;}i:621;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23750;}i:622;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:172:"　　程序re.sh恢复了ba.sh程序备份的所有文件。若只从软盘上恢复一个指定的文件，可以用该文件名作为参数，传递给Shell程序re.sh: ";}i:2;i:23752;}i:623;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23924;}i:624;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23924;}i:625;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:"　　程序改写如下: 
　　$cat >re2.sh 
　　cd $workdir 
　　cpio -i $1 < /dev/fd0 
　　^d ";}i:2;i:23926;}i:626;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24030;}i:627;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24030;}i:628;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:"　　用户可以指定要恢复的文件，例如fname ";}i:2;i:24032;}i:629;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24089;}i:630;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24089;}i:631;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"　　$re2.sh fname ";}i:2;i:24091;}i:632;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24111;}i:633;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24111;}i:634;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:"此时文件fname作为第一个位置参数传递给re2.sh,re2.sh的缺点是要恢复两个或多个文件要重复运行，我们可以用$*变量传递不确定的参数给程序: ";}i:2;i:24113;}i:635;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24297;}i:636;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24297;}i:637;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"　　$cat >re3.sh 
　　cd $workdir 
　　cpio -i $* < /dev/fd0 
　　^d ";}i:2;i:24299;}i:638;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24376;}i:639;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24376;}i:640;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:190:"　　我们就可以恢复多个文件，例如fname1,fname2,fname3 
　　$re3.sh fname1 fname2 fname3 
　　(以上程序re.sh,re2.sh,re3.sh，假设用户已经chmod了可执行权利) ";}i:2;i:24378;}i:641;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24568;}i:642;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24568;}i:643;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:207:"　　因为没有赋值的变量可以作为NULL看待，所以若是程序re3.sh在执行时候没赋予参数，那么一个空值将被插入到cpio命令中。该命令将恢复所有保存的文件。 ";}i:2;i:24570;}i:644;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24777;}i:645;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24777;}i:646;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" 条件判断语句 ";}i:2;i:24779;}i:647;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24799;}i:648;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24799;}i:649;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:152:" 　　条件判断语句是程序设计语言中十分重要的语句，该语句的含义是当某一条件满足时，执行指定的一组命令。 ";}i:2;i:24801;}i:650;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24953;}i:651;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24953;}i:652;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"1>if - then语句 ";}i:2;i:24955;}i:653;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24973;}i:654;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24973;}i:655;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:146:" 　　格式: if command1 
　　　　　then 
　　　　　　　command2 
　　　　　　　command3 
　　　　　fi　　　　　　";}i:2;i:24975;}i:656;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"---";}i:2;i:25121;}i:657;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"(if 语句结束) 
　　　　　　　command4 ";}i:2;i:25124;}i:658;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25173;}i:659;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25173;}i:660;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:372:"　　每个程序或命令执行结束后都有一个返回的状态，用户可以用Shell变量$?获得这一状态。if语句检查前面命令执行的返回状态，若该命令成功执行，那么在then和fi之间的命令都将被执行。在上面的命令序列中，command1和command4总要执行。若command1成功执行,command2和command3也将执行。 ";}i:2;i:25175;}i:661;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25547;}i:662;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25547;}i:663;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:162:" 　　请看下面程序: 
　　　　#unload -program to backup and remove files 
　　　　cd $1 
　　　　ls -a | cpio -o > /dev/mnt0 
　　　　rm * ";}i:2;i:25549;}i:664;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25711;}i:665;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25711;}i:666;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:218:"　　该程序在备份资料后，删除档案，但当cpio命令不能成功执行时，rm命令还是把资料删除了，我们可不希望这样，为了避免此情况，可以用if 
- then语句: 
　　　　#";}i:2;i:25713;}i:667;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:25931;}i:668;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"卸载和判断删除程序 ";}i:2;i:25933;}i:669;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25961;}i:670;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25961;}i:671;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:175:" 　　　　cd $1 
　　　　if ls -a | cpio > /dev/mnt0 
　　　　then 
　　　　　　rm * 
　　　　fi 
　　上面程序在cpio执行成功后才删除档案 ";}i:2;i:25963;}i:672;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26138;}i:673;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26138;}i:674;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:169:" 同时，若执行没有成功，我们希望得到提示，sh中的echo命令可以向用户显示消息，并显示后换行，上面程序可以写成: 
　　 　 #";}i:2;i:26140;}i:675;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:26309;}i:676;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:131:"卸载和判断删除程序 
 　　　　cd $1 
　　　　if ls -a | cpio > /dev/mnt0 
　　　　then 
　　　　　　echo ";}i:2;i:26311;}i:677;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:26442;}i:678;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"正删除文件资料";}i:2;i:26443;}i:679;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:26464;}i:680;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:26467;}i:681;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:26468;}i:682;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:26471;}i:683;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"
　　　　　　rm * 
　　　　fi ";}i:2;i:26472;}i:684;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26513;}i:685;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26513;}i:686;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:"　　echo命令可以使用一些特殊的逃逸字符进行格式化输出，下面是这些字符及其含义: ";}i:2;i:26515;}i:687;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26629;}i:688;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26629;}i:689;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:362:"　　　　\b　　Backspace 
　　　　\c　　显示后不换行 
 　　　　\f　　在终端上屏幕的开始处显示 
 　　　　\n　　换行 
 　　　　\r　　回车 
 　　　　\t　　制表符 
 　　　　\v　　垂直制表符 
 　　　　\　　 反斜框 
 　　　　\0nnn 用1,2或3位8进制整数表示一个ASCII码字符 ";}i:2;i:26631;}i:690;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26993;}i:691;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26993;}i:692;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"2>if - then - else语句 ";}i:2;i:26995;}i:693;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27020;}i:694;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27020;}i:695;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:216:" 　　不用多说它的作用，别的高级语言中都有，格式为: 
　　if command1 
　　then 
　　　　command2 
　　　　command3 
　　else 
　　　　command4 
　　　　command5 
　　fi ";}i:2;i:27022;}i:696;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27238;}i:697;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27238;}i:698;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:142:"　　在此结构中，command1中是先执行，当command1成功执行时，将执行command2和command3，否则执行command4和command5 ";}i:2;i:27240;}i:699;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27382;}i:700;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27382;}i:701;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:"　　注意看下面程序: 
　　　　#备份程序 
 　　　　cd $1 
　　　　if ls -a |cpio -o > /dev/mnt0 
　　　　then 
　　　　　　echo ";}i:2;i:27384;}i:702;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:27545;}i:703;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"删除源资料";}i:2;i:27546;}i:704;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:27561;}i:705;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:27564;}i:706;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:27565;}i:707;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:27568;}i:708;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:"
　　　　　　rm * 
　　　　else 
　　　　　　echo ";}i:2;i:27569;}i:709;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:27636;}i:710;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"磁带备份失败!";}i:2;i:27637;}i:711;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:27656;}i:712;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"
　　　　fi ";}i:2;i:27657;}i:713;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27674;}i:714;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27674;}i:715;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" 3>test命令进行条件测试 ";}i:2;i:27676;}i:716;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27708;}i:717;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27708;}i:718;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:351:" 　　if语句可以通过测试命令执行的返回状态来控制命令的执行，若要测试其他条件，在bsh中可以使用test命令。该命令检测某一条件，当条件为真时返回0，否则返回非0值。test命令可以使Shell程序中的if语句象其他程序语言中的条件判断语句一样，具有很强的功能。 ";}i:2;i:27710;}i:719;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28061;}i:720;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28061;}i:721;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:325:" 　　test命令的使用方法为: 
　　　　test condition 
　　可测试的条件分为4类: 
　　1)测试两个字符串之间的关系。 
 　　2)测试两个整数之间关系。 
 　　3)测试文件是否存在或是否具有某种状态或属性。 
 　　4)测试多个条件的与(and)或(or)组合。 ";}i:2;i:28063;}i:722;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28388;}i:723;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28388;}i:724;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"1、条件语句";}i:2;i:28390;}i:725;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:">>";}i:2;i:28406;}i:726;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"test语句 ";}i:2;i:28408;}i:727;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28419;}i:728;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28419;}i:729;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"1>测试字符串间的关系 ";}i:2;i:28421;}i:730;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28451;}i:731;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28451;}i:732;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:" 　　bsh把所有的命令行和变量都看作字符串。一些命令如expr和test可以把字符当作数字进行操作。 ";}i:2;i:28453;}i:733;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28583;}i:734;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28583;}i:735;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:" 　　同样任何数字也可以作为字符串进行操作。 ";}i:2;i:28585;}i:736;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28650;}i:737;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28650;}i:738;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:528:" 　　用户可以比较两个字符串相等或不等，也可以测试一个串是否赋了值。有关串的操作符如下: 
　　　　str1 = str2　　　　　　当两个串有相同内容、长度时为真 
 　　　　str1 != str2　　　　　 当串str1和str2不等时为真 
 　　　　-n str1　　　　　　　 当串的长度大于0时为真(串非空) 
　　　　-z str1　　　　　　　 当串的长度为0时为真(空串) 
　　　　str1　　　　　　　　 当串str1为非空时为真 ";}i:2;i:28652;}i:739;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29180;}i:740;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29180;}i:741;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:" 　　不但Shell程序可以使用test进行条件判断，test命令也可以独立执行，如: ";}i:2;i:29182;}i:742;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29282;}i:743;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29282;}i:744;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:"　　　　$str1=abcd 
　　　　$test $str1 = abcd 
　　　　$echo $? 
　　　　结果显示:0 ";}i:2;i:29284;}i:745;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29389;}i:746;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29389;}i:747;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:196:"与上例中第一行赋值语句中的等号不同，test命令中的等号两边必须要有空格。本例test命令共有3个参数。注意两个串相等必须是长度和内容都相等。 ";}i:2;i:29391;}i:748;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29587;}i:749;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29587;}i:750;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" 　　　　$str1=";}i:2;i:29589;}i:751;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:29608;}i:752;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"abcd ";}i:2;i:29609;}i:753;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:29614;}i:754;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"
　　　　$test ";}i:2;i:29615;}i:755;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:29635;}i:756;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$str1";}i:2;i:29636;}i:757;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:29641;}i:758;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" = abcd 
　　　　$echo $? 
　　　　结果显示:1 ";}i:2;i:29642;}i:759;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29700;}i:760;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29700;}i:761;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:"　　上面str1包含5个字符，其中最后一个为空格符。而test命令中的另一个串只有4个字符，所以两串不等，test返回1。 ";}i:2;i:29702;}i:762;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29856;}i:763;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29856;}i:764;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:" 　　不带任何操作符和使用-n操作符测试一个串结果是一样的，例如: ";}i:2;i:29858;}i:765;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29950;}i:766;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29950;}i:767;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:189:"　　　　$str1=abce 
　　　　$test $str1 
　　　　$echo $? 
　　　　结果显示:0　　　　 
 　　　　$test -n $str1 
　　　　$echo $? 
　　　　结果显示:0 ";}i:2;i:29952;}i:768;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30141;}i:769;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30141;}i:770;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:"　　但是，上面两条命令也有一点差别，反映出了使用test命令潜在的问题，请看下例: ";}i:2;i:30143;}i:771;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30257;}i:772;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30257;}i:773;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"　　　　$str1=";}i:2;i:30259;}i:774;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:30277;}i:775;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"　　　";}i:2;i:30278;}i:776;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:30287;}i:777;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:"
　　　　$test $str1 
　　　　$echo $? 
　　　　结果显示:1 
　　　　$test -n ";}i:2;i:30288;}i:778;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:30386;}i:779;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"$str1";}i:2;i:30387;}i:780;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:30392;}i:781;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:"
　　　　$echo $? 
　　　　结果显示:0 
　　　　$test -n $str1 
　　　　结果显示:test:argument expected ";}i:2;i:30393;}i:782;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30521;}i:783;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30521;}i:784;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:446:"　　上例中，第一次测试为假因为Shell在执行命令行之前首先要进行变量替换，即把$str1换成空格，然后shell又将命令行上的空格删除，故test命令测试到的为空串。而在第二次测试中，变量替换后空格位于括号内，故不会被删除，test测试到的是一个包含空格的串，在第三次测试中，shell把空格删除，只把-n传个test命令，所以显示参数错。 ";}i:2;i:30523;}i:785;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30969;}i:786;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30969;}i:787;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"2>测试两个整数之间关系 ";}i:2;i:30971;}i:788;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31004;}i:789;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31004;}i:790;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:159:" 　　test命令与expr命令一样，也可以把字符转变成整数，然后对其操作。test命令对两个数进行比较，使用的操作符如下: ";}i:2;i:31006;}i:791;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31165;}i:792;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31165;}i:793;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:366:"　　　　int1 -eq int2　　　　两数相等为真 
 　　　　int1 -ne int2　　　　两数不等为真 
 　　　　int1 -gt int2　　　　int1大于int2为真 
 　　　　int1 -ge int2　　　　int1大于等于int2为真 
 　　　　int1 -lt int2　　　　int1小于int2为真 
 　　　　int1 -le int2　　　　int1小于等于int2为真 ";}i:2;i:31167;}i:794;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31533;}i:795;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31533;}i:796;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:" 　　下面的例子反映了字符串比较与数字比较的不同: ";}i:2;i:31535;}i:797;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31607;}i:798;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31607;}i:799;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:216:"　　　　$str1=1234 
　　　　$str2=01234 
　　　　$test $str1 = $str2 
　　　　$echo $? 
　　　　结果显示:1 
　　　　$test $str1 -eq $str2 
　　　　$echo $? 
　　　　结果显示:0 ";}i:2;i:31609;}i:800;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31825;}i:801;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31825;}i:802;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" 3>有关文件的测试 ";}i:2;i:31827;}i:803;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31852;}i:804;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31852;}i:805;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:240:" 　　使用test进行的第三类测试是测试文件的状态，用户可以测试文件是否存在，是否可写以及其他文件属性。下面是文件测试时使用的选项。注意只有文件存在时，才有可能为真。 ";}i:2;i:31854;}i:806;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32094;}i:807;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32094;}i:808;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:935:" 　　-r file　　　　　用户可读为真 
 　　-w file　　　　　用户可写为真 
 　　-x file　　　　　用户可执行为真 
 　　-f file　　　　　文件为正规文件为真 
 　　-d file　　　　　文件为目录为真 
 　　-c file　　　　　文件为字符特殊文件为真 
 　　-b file　　　　　文件为块特殊文件为真 
 　　-s file　　　　　文件大小非0时为真 
 　　-t file　　　　　当文件描述符(默认为1)指定的设备为终端时为真 
4>复杂的条件测试(and 、or 、not) 
　　-a 　 　　　　　 与 
 　　-o　　　　　　　 或 
 　　!　　　　　　　　非 
 　　就是组合条件了，任何高级语言中都有的(NOT 、AND 、OR)，例如: 
　　　　$test -r em.null -a -s em.null 
　　　　$echo $? 
　　　　结果显示:1 
　　　　说明了em.null并不是可读并且非空的文件 ";}i:2;i:32096;}i:809;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33031;}i:810;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33031;}i:811;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"5>另一种执行test的方法 ";}i:2;i:33033;}i:812;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33064;}i:813;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33064;}i:814;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:" 　　bsh中还有另一种执行test命令的方法，就是把测试条件放到一对[ 
 ]中，例如: 
　　　　$int1=4 
　　　　$[ $int1 -gt 2 ] 
　　　　$echo $? 
　　　　结果显示:0 ";}i:2;i:33066;}i:815;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33275;}i:816;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33275;}i:817;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:136:"要注意在[ 的后面和 ]符号的前面要有一个空格。 
 　　下面我们用test命令写个简单但比较完善的程序: ";}i:2;i:33277;}i:818;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33413;}i:819;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33413;}i:820;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"　　　　#";}i:2;i:33415;}i:821;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:33428;}i:822;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:" 备份程序 
 　　 
 　　　　#";}i:2;i:33430;}i:823;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:33468;}i:824;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" 检查参数 
 　　　　if [ $# -ne 1 ] 
　　　　then ";}i:2;i:33470;}i:825;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33532;}i:826;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33532;}i:827;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"　　　　　　echo ";}i:2;i:33534;}i:828;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:33557;}i:829;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"请在程序名后面指出要备份文件所在目录!";}i:2;i:33558;}i:830;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:33613;}i:831;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:"
　　　　　　exit 1 
　　　　fi 
　　　　#";}i:2;i:33614;}i:832;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:33671;}i:833;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" 检查目录名是否有效 
 　　　　if [ ! -d ";}i:2;i:33673;}i:834;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:33726;}i:835;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$1";}i:2;i:33727;}i:836;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:33729;}i:837;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" ] 
　　　　then 
　　　　　　echo ";}i:2;i:33730;}i:838;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:33775;}i:839;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"$1 不是一个目录!";}i:2;i:33776;}i:840;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:33798;}i:841;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:214:"
　　　　　　exit 2 
　　　　fi 
　　　　cd $1 
　　　　ls -a | cpio -o >/dev/mnt0 
　　　　if [ $? -eq 0 ] 
　　　　then 
　　　　　　rm * 
　　　　else 
　　　　　　echo ";}i:2;i:33799;}i:842;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:34014;}i:843;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"cpio执行不成功!备份失败";}i:2;i:34015;}i:844;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:34047;}i:845;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:34050;}i:846;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"
　　　　　　exit 3 
　　　　fi ";}i:2;i:34051;}i:847;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34094;}i:848;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34094;}i:849;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" 6>空命令 ";}i:2;i:34096;}i:850;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34109;}i:851;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34109;}i:852;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" 　　在Bsh中用 : 代表空命令，就是充个数，什么都不做 ";}i:2;i:34111;}i:853;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34185;}i:854;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34185;}i:855;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"7>嵌套if语句和elif结构 ";}i:2;i:34187;}i:856;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34217;}i:857;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34217;}i:858;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:681:" 　　检查条件1 
　　A:当条件1为真，则执行一部分操作 
 　　B:若条件1为假，检查条件2 
　　　　1)若条件2为真，执行另外一部分操作 
 　　　　2)若条件2为假，检查条件3 
　　　　3)若条件3为真，执行其他一部分操作 
 　　语法如下: 
　　　　if command 
　　　　then 
　　　　　　command 
　　　　else 
　　　　　　if command 
　　　　　　then 
　　　　　　　　command 
　　　　　　else 
　　　　　　　　if command 
　　　　　　　　then 
　　　　　　　　　　command 
　　　　　　　　fi 
　　　　　　fi 
　　　　fi ";}i:2;i:34219;}i:859;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34900;}i:860;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34900;}i:861;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" 8>elif语句 ";}i:2;i:34902;}i:862;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34916;}i:863;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34916;}i:864;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:212:" 　　嵌套if语句有时会给用户带来混乱，特别是什么时候fi语句很难判断。因此Bourne 
 Shell又提供了elif语句。elif是else-if的缩写，它表示是if语句的继续。格式为: ";}i:2;i:34918;}i:865;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35130;}i:866;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35130;}i:867;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:226:"　　　　if command 
　　　　then 
　　　　　　command 
　　　　elif command 
　　　　then 
　　　　　　command 
　　　　elif command 
　　　　then 
　　　　　　command 
　　　　fi ";}i:2;i:35132;}i:868;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35358;}i:869;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35358;}i:870;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:"　　上面介绍的嵌套if语句和elif语句完成相同的功能，用户可以根据自己的喜好选择一种使用。 ";}i:2;i:35360;}i:871;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35487;}i:872;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35487;}i:873;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"9>case语句 ";}i:2;i:35489;}i:874;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35502;}i:875;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35502;}i:876;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:225:" 　　前面说的elif语句替代if-then-else语句，但有时在编程时还会遇到对同一变量进行多次的测试，该情况可以用多个elif语句实现,但还有一种更简单的方法就是用case语句。 ";}i:2;i:35504;}i:877;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35729;}i:878;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35729;}i:879;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:225:" 　　case语句不但取代了多个elif和then语句，还可以用变量值对多个模式进行匹配，当某个模式与变量值匹配后，其后的一系列命令将被执行，下面是case语句使用的语句。 ";}i:2;i:35731;}i:880;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35956;}i:881;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35956;}i:882;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:159:" 　　case value in 
　　　pattem 1) 
　　　　command 
　　　　command;; 
　　　pattem 2) 
　　　　command 
　　　　command;; 
　　　";}i:2;i:35958;}i:883;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:36117;}i:884;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:". 
　　　pattem) 
　　　　command; 
　　esac ";}i:2;i:36120;}i:885;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36174;}i:886;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36174;}i:887;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"　　case语句只执行其中的一组命令，当变量值与多个模式相匹配时，只有第一个匹配的模式对应的命令被执行。";}i:2;i:36176;}i:888;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:36324;}i:889;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:";;";}i:2;i:36325;}i:890;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:36327;}i:891;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"表示该模式对应的命令部分程序。 ";}i:2;i:36328;}i:892;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36374;}i:893;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36374;}i:894;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" 　　通过学习下面的read语句，我们们再举例子说明case语句的用法。 ";}i:2;i:36376;}i:895;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36467;}i:896;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36467;}i:897;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"10>read语句 ";}i:2;i:36469;}i:898;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36483;}i:899;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36483;}i:900;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:146:" 　　Shell程序不但可以通过命令行参数得到输入数据，还可以使用read命令提示用户输入数据，其语法格式为： ";}i:2;i:36485;}i:901;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36631;}i:902;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36631;}i:903;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" 　　read var1 var2";}i:2;i:36633;}i:904;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:36654;}i:905;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:36657;}i:906;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:36658;}i:907;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"varn ";}i:2;i:36661;}i:908;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36666;}i:909;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36666;}i:910;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:642:"当Bsh遇到一个read语句时，在标准输入文件中读取数据直到一个换行符。此时Shell在解释输入行时，不进行文件名或变量的替换，只是简单地删除多余的空格。然后Shell将输入行的第一个字的内容给变量1,第二个给变量2,直到所有变量都赋上值或是输入行为空。若输入行中字的个数超过变量个数，Shell将把输入行中剩余的所有字的内容都赋给最后一个变量。当变量个数多于输入行字的个数时候，多于的变量将赋一个空值。输入行的每一个字是由空格分隔的一个字母和数字组成的字符串。 ";}i:2;i:36668;}i:911;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37310;}i:912;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37310;}i:913;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:188:" 　　$read var1 var2 var3 
　　 　输入:Hello my friend 
　　 
 　　$echo $var1 $var2 $var3 
　　　 结果显示:Hello my friend 
　　$echo $var2 
　　　 结果显示:my ";}i:2;i:37312;}i:914;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37500;}i:915;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37500;}i:916;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"下面用个read和case的例子结束本部分的学习: ";}i:2;i:37502;}i:917;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37560;}i:918;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37560;}i:919;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"　　#";}i:2;i:37562;}i:920;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:37569;}i:921;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"交互式备份，恢复程序 
 　　echo ";}i:2;i:37571;}i:922;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:37615;}i:923;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"输入要备份文件所在目录:\c";}i:2;i:37616;}i:924;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:37652;}i:925;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"
　　read WORKDIR 
　　if [ !-d $WORKDIR ] 
　　then 
　　　　echo ";}i:2;i:37653;}i:926;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:37731;}i:927;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Sorry,$WORKDIR is not a directory";}i:2;i:37732;}i:928;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:37765;}i:929;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:"
　　　　exit 1 
　　fi 
　　cd $WORKDIR 
　　echo ";}i:2;i:37766;}i:930;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:37828;}i:931;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"输入选择:";}i:2;i:37829;}i:932;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:37842;}i:933;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"
　　echo _ 
　　echo ";}i:2;i:37843;}i:934;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:37870;}i:935;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"1.恢复到 $WORKDIR";}i:2;i:37871;}i:936;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:37891;}i:937;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
　　echo ";}i:2;i:37892;}i:938;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:37905;}i:939;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"2.备份 $WORKDIR";}i:2;i:37906;}i:940;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:37923;}i:941;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"
　　echo ";}i:2;i:37924;}i:942;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:37937;}i:943;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"0.退出";}i:2;i:37938;}i:944;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:37946;}i:945;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"
　　echo 
　　echo ";}i:2;i:37947;}i:946;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:37972;}i:947;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"\c";}i:2;i:37973;}i:948;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:37975;}i:949;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"
　　read CHOICE 
　　case ";}i:2;i:37976;}i:950;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:38008;}i:951;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"$CHOICE";}i:2;i:38009;}i:952;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:38016;}i:953;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" in 
　　　1)echo ";}i:2;i:38017;}i:954;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:38038;}i:955;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"恢复中";}i:2;i:38039;}i:956;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:38048;}i:957;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:38051;}i:958;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:38052;}i:959;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:38055;}i:960;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"
　　　　cpio -i < /dev/mnt0;; 
　　　2)echo ";}i:2;i:38056;}i:961;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:38109;}i:962;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"备份中";}i:2;i:38110;}i:963;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:38119;}i:964;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:38122;}i:965;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:38123;}i:966;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:38126;}i:967;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:"
　　　　ls | cpio -o > /dev/mnt0;; 
　　　0)exit 1 
　　　*)exit 1 
　　esac 
　　if [ $? -ne 0 ] 
　　then 
　　　echo ";}i:2;i:38127;}i:968;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:38268;}i:969;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"程序运行中出现错误!";}i:2;i:38269;}i:970;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:38297;}i:971;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"
　　else 
　　　echo ";}i:2;i:38298;}i:972;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:38326;}i:973;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"操作成功!";}i:2;i:38327;}i:974;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:38340;}i:975;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"
　　fi 　 
 　 
 　　在上面代码中，";}i:2;i:38341;}i:976;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:38391;}i:977;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"*";}i:2;i:38392;}i:978;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:38393;}i:979;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"定义了其他模式下不匹配时的默认操作。 ";}i:2;i:38394;}i:980;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38449;}i:981;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38449;}i:982;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" 循环语句 ";}i:2;i:38451;}i:983;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38465;}i:984;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38465;}i:985;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:318:" 　　前面介绍的程序和所学的语句都是从头到尾成一条主线下来，或是成分支结构，在日常管理UNIX的过程中，经常要重复的做一些操作，处理批量的问题，这就涉及到了循环结构，同高级语言相似，UNIX的Shell也提供了强大的循环处理语句。 ";}i:2;i:38467;}i:986;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38785;}i:987;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38785;}i:988;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:" 　　Bsh语言中有三种循环语句-while循环、until循环、for循环，下面通过具体的例子分别介绍这三种结构。 ";}i:2;i:38787;}i:989;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38926;}i:990;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38926;}i:991;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"While循环 ";}i:2;i:38928;}i:992;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38940;}i:993;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38940;}i:994;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:" 　　在while循环语句中，当某一条件为真时，执行指定的命令。语句的结构如下： ";}i:2;i:38942;}i:995;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39051;}i:996;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39051;}i:997;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:"while command 
 do 
　　command 
　　command 
　　… … 
done ";}i:2;i:39053;}i:998;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39123;}i:999;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39123;}i:1000;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"示例代码如下： ";}i:2;i:39125;}i:1001;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39147;}i:1002;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39147;}i:1003;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"#测试while循环小程序 ";}i:2;i:39149;}i:1004;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39177;}i:1005;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39177;}i:1006;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:"x_t=1 
　　while [ $x_t -lt 5 ] 
　　do 
　　　　　mm=` expr $x_t \* $int `　　#注意";}i:2;i:39179;}i:1007;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:39276;}i:1008;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"\";}i:2;i:39277;}i:1009;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:39278;}i:1010;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"的作用 
 　　　　　echo ";}i:2;i:39279;}i:1011;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:39311;}i:1012;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"$mm";}i:2;i:39312;}i:1013;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:39315;}i:1014;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"
　　　　　x_t=` expr $x_t + 1 `　　　#注意expr的用法 
 　　done 
　　echo ";}i:2;i:39316;}i:1015;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:39409;}i:1016;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"THE WHILE IS END!\n";}i:2;i:39410;}i:1017;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:39429;}i:1018;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39430;}i:1019;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39430;}i:1020;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"程序的执行结果如下: 
1 
 4 
 9 
 16 
 THE WHILE IS END ";}i:2;i:39433;}i:1021;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39497;}i:1022;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39497;}i:1023;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:424:"　　在上述程序中，当变量x_t的值小于5的时候，执行while循环中的语句。在第五次循环时， 
[ $x_t-lt5]命令返回非零值，于是程序执行done后面的代码。 
 现在利用while循环，可以改进我们早些时候用的备份数据的例子，当用户指定的目录备份完毕后，使用while循环使程序执行一次可以备份多个用户指定的目录。代码如下： ";}i:2;i:39499;}i:1024;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39923;}i:1025;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39923;}i:1026;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"echo ";}i:2;i:39925;}i:1027;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:39930;}i:1028;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"欢迎使用备份小程序";}i:2;i:39931;}i:1029;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:39958;}i:1030;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39959;}i:1031;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39959;}i:1032;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:"　　ANS=Y 
　　while [ $ANS = Y -o $ANS = y ] 
　　do 
　　　　echo _ 
　　　　#读目录名 
 　　　　echo ";}i:2;i:39962;}i:1033;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:40088;}i:1034;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"输入要备份的目录名：\c";}i:2;i:40089;}i:1035;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:40121;}i:1036;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:"
　　　　read DIR 
　　　　if [ ! -d $DIR ] 
　　　　then 
　　　　　　　　echo ";}i:2;i:40122;}i:1037;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:40223;}i:1038;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"$DIR不是一个目录!";}i:2;i:40224;}i:1039;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:40247;}i:1040;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"
　　　　　　　　exit 1 
　　　　fi 
　　　　cd $DIR 
　　　　echo ";}i:2;i:40248;}i:1041;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:40336;}i:1042;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"请选择:";}i:2;i:40337;}i:1043;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:40347;}i:1044;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"
　　　　echo _ 
　　　　echo ";}i:2;i:40348;}i:1045;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:40387;}i:1046;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"1 恢复数据到 $DIR";}i:2;i:40388;}i:1047;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:40410;}i:1048;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"
　　　　echo ";}i:2;i:40411;}i:1049;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:40430;}i:1050;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"2 备份$DIR的数据";}i:2;i:40431;}i:1051;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:40452;}i:1052;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"
　　　　echo 
　　　　echo ";}i:2;i:40453;}i:1053;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:40490;}i:1054;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"请选择:\c";}i:2;i:40491;}i:1055;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:40503;}i:1056;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"
　　　　read CHOICE 
　　　　case ";}i:2;i:40504;}i:1057;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:40548;}i:1058;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"$CHOICE";}i:2;i:40549;}i:1059;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:40556;}i:1060;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" in 
　　　　　　　1) echo ";}i:2;i:40557;}i:1061;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:40591;}i:1062;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"恢复中… …";}i:2;i:40592;}i:1063;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:40608;}i:1064;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"
　　　　　　　　cpio -i 　　　　　　　2) echo ";}i:2;i:40609;}i:1065;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:40672;}i:1066;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"备份中… …";}i:2;i:40673;}i:1067;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:40689;}i:1068;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"
　　　　　　　　cpio -o >/dev/rmt0;; 
　　　　　　　*) echo ";}i:2;i:40690;}i:1069;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:40767;}i:1070;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"选择无效";}i:2;i:40768;}i:1071;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:40780;}i:1072;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"
　　　　esac 
　　　　if [ $? -ne 0 ] 
　　　　then 
　　　　　　　echo ";}i:2;i:40781;}i:1073;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:40874;}i:1074;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"cpio执行过程中出现问题";}i:2;i:40875;}i:1075;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:40906;}i:1076;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:"
　　　　　　　exit 2 
　　　　fi 
　　　　echo ";}i:2;i:40907;}i:1077;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:40971;}i:1078;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"继续别的目录吗？(Y/y)\c";}i:2;i:40972;}i:1079;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:41003;}i:1080;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"
　　　　read ANS 
　　done ";}i:2;i:41004;}i:1081;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41039;}i:1082;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41039;}i:1083;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:348:"　　在程序开始，我们给变量ANS符值为Y,根据whlie的判断条件，程序进入while循环，执行do-done中的语句，每次循环都要求用户输入ANS的值用来判断是否进行下次重复执行do-done中的语句。如果用户输入的条件不满足while语句条件，循环结束，程序执行done后面的语句。 ";}i:2;i:41041;}i:1084;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41389;}i:1085;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41389;}i:1086;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Unix系列shell程序编写(下) ";}i:2;i:41395;}i:1087;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41428;}i:1088;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41428;}i:1089;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Until语句 ";}i:2;i:41430;}i:1090;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41442;}i:1091;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41442;}i:1092;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:194:" 　　While语句中，只要某条件为真，则重复执行循环代码，until语句正好同while相反，该语句使循环代码重复执行，直到遇到某一条件为真才停止。 ";}i:2;i:41444;}i:1093;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41638;}i:1094;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41638;}i:1095;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:"Until语句的结构如下： 
until command 
　　do 
　　　　command 
　　　　command 
　　　　… … 
　　done ";}i:2;i:41640;}i:1096;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41770;}i:1097;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41770;}i:1098;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:"　　可以用until语句替换上面备份程序的while语句，完成同样的功能: ";}i:2;i:41772;}i:1099;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41862;}i:1100;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41862;}i:1101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"until [ $ANS != Y -a $ANS != y ] ";}i:2;i:41864;}i:1102;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41897;}i:1103;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41897;}i:1104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:501:" for 循环 
 　　在介绍for循环之前，我们要学个非常有用的unix命令:shift。我们知道，对于位置变量或命令行参数，其个数必须是确定的，或者当Shell程序不知道其个数时，可以把所有参数一起赋值给变量$*。若用户要求Shell在不知道位置变量个数的情况下，还能逐个的把参数一一处理，也就是在$1后为$2,在$2后面为$3等。在 
shift命令执行前变量$1的值在shift命令执行后就不可用了。 ";}i:2;i:41899;}i:1105;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:42400;}i:1106;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:42400;}i:1107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" 示例如下： ";}i:2;i:42402;}i:1108;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:42419;}i:1109;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:42419;}i:1110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"#测试shift命令(x_shift.sh) 
 until [ $# -eq 0 ] 
 do 
 echo ";}i:2;i:42421;}i:1111;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:42485;}i:1112;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"第一个参数为: $1 参数个数为: $#";}i:2;i:42486;}i:1113;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:42528;}i:1114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:"
shift 
 done 
执行以上程序x_shift.sh： 
$./x_shift.sh 1 2 3 4 ";}i:2;i:42529;}i:1115;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:42600;}i:1116;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:42600;}i:1117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"结果显示如下： ";}i:2;i:42602;}i:1118;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:42624;}i:1119;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:42624;}i:1120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:168:" 第一个参数为: 1 参数个数为: 3 
第一个参数为: 2 参数个数为: 2 
第一个参数为: 3 参数个数为: 1 
第一个参数为: 4 参数个数为: 0 ";}i:2;i:42626;}i:1121;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:42794;}i:1122;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:42794;}i:1123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:167:"从上可知shift命令每执行一次，变量的个数($#)减一，而变量值提前一位，下面代码用until和shift命令计算所有命令行参数的和。 ";}i:2;i:42796;}i:1124;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:42963;}i:1125;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:42963;}i:1126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"#shift上档命令的应用(x_shift2.sh) 
 if [ $# -eq 0 ] 
 then 
 echo ";}i:2;i:42965;}i:1127;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:43038;}i:1128;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Usage_shift2.sh 参数";}i:2;i:43039;}i:1129;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:43061;}i:1130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"
exit 1 
 fi 
 sum=0 
 until [ $# -eq 0 ] 
 do 
 sum=`expr $sum + $1` 
 shift 
 done 
 echo ";}i:2;i:43062;}i:1131;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:43155;}i:1132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"sum is: $sum";}i:2;i:43156;}i:1133;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:43168;}i:1134;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43169;}i:1135;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43169;}i:1136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"执行上述程序: ";}i:2;i:43172;}i:1137;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43192;}i:1138;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43192;}i:1139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" $x_shift2.sh 10 20 15 ";}i:2;i:43194;}i:1140;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43217;}i:1141;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43217;}i:1142;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"其显示结果为： ";}i:2;i:43219;}i:1143;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43241;}i:1144;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43241;}i:1145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"45 ";}i:2;i:43243;}i:1146;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43246;}i:1147;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43246;}i:1148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:203:"　　shift命令还有另外一个重要用途,Bsh定义了9个位置变量，从$1到$9,这并不意味着用户在命令行只能使用9个参数，借助shift命令可以访问多于9个的参数。 ";}i:2;i:43248;}i:1149;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43451;}i:1150;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43451;}i:1151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:179:" 　　Shift命令一次移动参数的个数由其所带的参数指定。例如当shell程序处理完前九个命令行参数后，可以使用shift 
 9命令把$10移到$1。 ";}i:2;i:43453;}i:1152;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43632;}i:1153;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43632;}i:1154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:320:" 　　在熟悉了shift命令后，我们一起看看，Bsh程序中非常有用的for循环语句，这种循环同上面说的while和until循环不同，for语句中的循环是否执行并不由某个条件的真和假来决定，决定for循环是否继续的条件是参数表中是否还有未处理的参数。 ";}i:2;i:43634;}i:1155;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43954;}i:1156;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43954;}i:1157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"For语句的结构如下： ";}i:2;i:43956;}i:1158;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43984;}i:1159;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43984;}i:1160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"for variable in arg1 arg2 … argn 
 do 
 command 
 command 
… … 
done ";}i:2;i:43986;}i:1161;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44061;}i:1162;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44061;}i:1163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:"下面是for循环的简单例子: ";}i:2;i:44063;}i:1164;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44098;}i:1165;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44098;}i:1166;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"for LETTER in a b c d 
 do 
 echo $LETTER 
 done ";}i:2;i:44100;}i:1167;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44149;}i:1168;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44149;}i:1169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"程序执行结果如下： ";}i:2;i:44151;}i:1170;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44179;}i:1171;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44179;}i:1172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"a 
 b 
 c 
 d ";}i:2;i:44181;}i:1173;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44195;}i:1174;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44195;}i:1175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:"在上面计算参数和的例子中，我们可以用for循环，实现如下： ";}i:2;i:44197;}i:1176;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44279;}i:1177;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44279;}i:1178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"#测试 for 程序(x_for.sh) ";}i:2;i:44281;}i:1179;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44310;}i:1180;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44310;}i:1181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" if [ $# -eq 0 ] 
 then 
　　　echo ";}i:2;i:44312;}i:1182;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:44351;}i:1183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"Usage_for.sh 参数… …";}i:2;i:44352;}i:1184;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:44378;}i:1185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:"
　　　exit 1 
 fi 
 sum=0 
 for I in $* 
 do 
　　　sum=`expr $sum + $I` 
 done 
 echo ";}i:2;i:44379;}i:1186;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:44474;}i:1187;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"sum is: $sum";}i:2;i:44475;}i:1188;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:44487;}i:1189;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44488;}i:1190;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44488;}i:1191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"中断循环指令 ";}i:2;i:44491;}i:1192;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44510;}i:1193;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44510;}i:1194;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:356:" 　　在程序循环语句中，我们有时候希望遇到某中情况时候结束本次循环执行下次循环或结束这个循环，这就涉及到两条语句:continue和break。continue命令可使程序忽略其后循环体中的其他指令，直接进行下次循环，而break命令则立刻结束循环，执行循环体后面的的语句。 ";}i:2;i:44512;}i:1195;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44868;}i:1196;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44868;}i:1197;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:192:"#测试continue 
 I=1 
 while [ $I -lt 10 ] 
 do 
　　if [ $I -eq 3 ] 
　　then 
　　　　continue 
　　fi 
　　if [ $I -eq 7 ] 
　　then 
　　　　break 
　　fi 
　　echo ";}i:2;i:44870;}i:1198;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:45062;}i:1199;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"$I\c";}i:2;i:45063;}i:1200;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:45067;}i:1201;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"
 done ";}i:2;i:45068;}i:1202;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45076;}i:1203;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45076;}i:1204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"执行上面程序，结果如下： ";}i:2;i:45078;}i:1205;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45115;}i:1206;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45115;}i:1207;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"12456789 ";}i:2;i:45117;}i:1208;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45126;}i:1209;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45126;}i:1210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"与或结构 ";}i:2;i:45128;}i:1211;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45141;}i:1212;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45141;}i:1213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" 使用与/或结构有条件的执行命令 ";}i:2;i:45143;}i:1214;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45188;}i:1215;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45188;}i:1216;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:452:" 　　Shell程序中可以使用多种不同的方法完成相同的功能，例如until和while语句就可以完成相同的功能，同样，除了if-then-else结构可以使命令有条件的执行外，$$和||操作符也能完成上述功能。在C语言中这两个操作符分别表示逻辑与和逻辑或操作。在Bourne 
 Shell中，用&&连接两条命令的含义只有前面一条命令成功执行了，后面的命令才会执行。 ";}i:2;i:45190;}i:1217;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45642;}i:1218;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45642;}i:1219;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" 　　&&操作的形式为: ";}i:2;i:45644;}i:1220;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45673;}i:1221;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45673;}i:1222;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"　　　　command && command ";}i:2;i:45675;}i:1223;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45706;}i:1224;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45706;}i:1225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"　　例如语句: ";}i:2;i:45708;}i:1226;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45728;}i:1227;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45728;}i:1228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"　　　　rm $TEMPDIR/* && echo ";}i:2;i:45730;}i:1229;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:45764;}i:1230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"Files successfully removed";}i:2;i:45765;}i:1231;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:45791;}i:1232;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45792;}i:1233;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45792;}i:1234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:"　　只有rm命令成功执行以后，才会执行echo命令。若用if-then语句实现上述功能，形式为: ";}i:2;i:45795;}i:1235;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45912;}i:1236;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45912;}i:1237;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"　　　　if rm $TEMPDIR/* 
　　　　then 
　　　　　　echo ";}i:2;i:45914;}i:1238;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:45985;}i:1239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"Files successfully removed";}i:2;i:45986;}i:1240;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:46012;}i:1241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:"
　　　　fi 
　　相反，用||连接两条命令的含义为只有第一条命令执行失败才执行第二条命令，例如: ";}i:2;i:46013;}i:1242;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46149;}i:1243;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46149;}i:1244;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"　　　　rm $TEMPDIR/* || echo ";}i:2;i:46151;}i:1245;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:46185;}i:1246;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"File were not removed";}i:2;i:46186;}i:1247;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:46207;}i:1248;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46208;}i:1249;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46208;}i:1250;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"　　上面语句的等价形式为: ";}i:2;i:46211;}i:1251;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46249;}i:1252;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46249;}i:1253;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:"　　　　if rm $TEMPDIR/* 
　　　　then 
　　　　　　: 
　　　　else 
　　　　　　echo ";}i:2;i:46251;}i:1254;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:46361;}i:1255;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Files were not removed";}i:2;i:46362;}i:1256;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:46384;}i:1257;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:157:"
　　　　fi 
　　这两种操作符可以联合使用，如在下面的命令行中，只有command1和command2执行成功后，command3才会执行: ";}i:2;i:46385;}i:1258;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46543;}i:1259;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46543;}i:1260;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"　　　　command1 && command2 && command3 ";}i:2;i:46545;}i:1261;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46590;}i:1262;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46590;}i:1263;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"　　下面的命令行表示只有command1成功执行，command2不成功执行时，才会执行command3。 ";}i:2;i:46592;}i:1264;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46704;}i:1265;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46704;}i:1266;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:290:" 　　&&和||操作符可以简化命令条件执行的格式，但一般只用于一条命令的条件执行。如果许多命令都使用这两个操作符，那么整个程序的可读性将变的很差，所以在多条命令的条件执行时，最好采用可读性好的if语句。 ";}i:2;i:46706;}i:1267;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46996;}i:1268;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46996;}i:1269;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" 函数 ";}i:2;i:46998;}i:1270;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47006;}i:1271;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47006;}i:1272;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:214:" 　　现在我们介绍Shell程序中的函数部分，基本上任何高级语言都支持函数这个东西，能让我们胜好多事情的东西，至少省的频繁的敲击相同的东西，好了come 
 on ";}i:2;i:47008;}i:1273;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47222;}i:1274;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47222;}i:1275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" Shell程序中的函数 ";}i:2;i:47224;}i:1276;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47249;}i:1277;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47249;}i:1278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" 　　函数又叫做子程序，可以在程序中的任何地方被调用，其格式如下: ";}i:2;i:47251;}i:1279;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47347;}i:1280;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47347;}i:1281;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"　　函数名字() 
　　{ 
　　　　command 
　　　　";}i:2;i:47349;}i:1282;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:47413;}i:1283;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:47416;}i:1284;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:47417;}i:1285;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"
　　　　command; 
　　} ";}i:2;i:47420;}i:1286;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47452;}i:1287;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47452;}i:1288;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"　　Shell程序的任何地方都可以用命令 
";}i:2;i:47454;}i:1289;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:47506;}i:1290;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"函数名字";}i:2;i:47507;}i:1291;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:47519;}i:1292;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:206:"　调用，使用函数的好处有两点，一点是使用函数可以把一个复杂的程序化为多个模块，易于管理,符合结构化程序的设计思想，另一个好处是代码的重用。 ";}i:2;i:47520;}i:1293;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47726;}i:1294;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47726;}i:1295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:276:" 　　Shell函数和Shel程序比较相似，它们的区别在于Shell程序在子Shell中运行，而Shell函数在当前Shell中运行。因此，在当前Shell中可以看到Shell函数对变量的修改。在任何Shell中都可以定义函数，包括交互式Shell。 ";}i:2;i:47728;}i:1296;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48004;}i:1297;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48004;}i:1298;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" 　　例如: ";}i:2;i:48006;}i:1299;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48021;}i:1300;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48021;}i:1301;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"　　　　$dir() {ls -l;} ";}i:2;i:48023;}i:1302;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48051;}i:1303;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48051;}i:1304;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:285:"　　　　结果是我们在$后面打dir,其显示结果同ls 
-l的作用是相同的。该dir函数将一直保留到用户从系统退出，或执行了如下所示的unset命令： 
 　　　　$unset dir 
　　　　下面的例子说明了函数还可以接受位置参数: ";}i:2;i:48053;}i:1305;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48338;}i:1306;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48338;}i:1307;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"　　　　$dir(){_ 
　　　　>echo ";}i:2;i:48340;}i:1308;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:48380;}i:1309;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:"permission 　　　ln owner　　　group 　　　file sz last 
 access 
　　　　>ls -l $*; 
　　　　>} ";}i:2;i:48381;}i:1310;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48495;}i:1311;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48495;}i:1312;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"　　　　运行 dir a* 看产生什么结果 ";}i:2;i:48497;}i:1313;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48545;}i:1314;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48545;}i:1315;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:" 　　　　参数a*传递到dir函数中并且代替了$* ";}i:2;i:48547;}i:1316;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48607;}i:1317;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48607;}i:1318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:"　　　　通常Shell程序将在子Shell中执行，该程序对变量的改变只在子Shell中有效而在当前Shell中无效。";}i:2;i:48609;}i:1319;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:48743;}i:1320;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:48744;}i:1321;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:48745;}i:1322;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:293:"命令可以使Shell程序在当前Shell中执行。用户可以在当前Shell中定义函数和对变量赋值。通常用下面命令来重新初使化.profile对Shell环境的设置。 
 　　　　$ . .profile 
　　由于看到这部分相对简单，我们还是顺便说说trap好了 ";}i:2;i:48746;}i:1323;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49039;}i:1324;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49039;}i:1325;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" 使用trap命令进行例外处理 ";}i:2;i:49041;}i:1326;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49077;}i:1327;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49077;}i:1328;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:655:" 　　用户编写程序在程序运行时可能会发生一些例外情况，比如执行该程序的用户按中断键或使用kill命令，或者控制终端突然与系统断开等。unix系统中的上述情况会使系统向进程发一个信号，通常情况下该信号使进程终止运行。有时侯用户希望进程在接到终止信号时进行一些特殊的操作。若进程在运行时产生一些临时文件，又因接受到的信号而终止。那么该进程产生的临时文件将保留下来。在bsh中，用户可以使用trap命令修改进程接收到终止信号时进行的默认操作。 
 　　trap命令格式如下: ";}i:2;i:49079;}i:1329;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49734;}i:1330;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49734;}i:1331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"　　　　　trap command_string signals ";}i:2;i:49736;}i:1332;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49779;}i:1333;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49779;}i:1334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:371:"多数系统中共有15种发给进程的信号，默认情况下大多数信号都会使程序终止。用户最好查阅自己系统的文挡，看看本系统内使用的信号种类。除了信号为9(真正的kill信号)不能使用trap命令外，其他信号所带来的操作都可以用trap命令进行指定。下面是trap命令中经常使用的几种信号: ";}i:2;i:49782;}i:1335;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:50153;}i:1336;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:50153;}i:1337;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:173:"　　　　信号　　　功能 
 　　　　 
 　　　　 1 　 　　挂起 
 　　　　 2　　　　操作中断 
 　　　　 15　　　 软终止(kill信号) ";}i:2;i:50155;}i:1338;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:50328;}i:1339;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:50328;}i:1340;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:171:"　　若命令串中包含不只一条命令，必须使用引号将整个命令括起来，具体是单引号还是双引号，由用户是否需要变量替换决定。";}i:2;i:50330;}i:1341;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:50501;}i:1342;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"
 ";}i:2;i:50502;}i:1343;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:50505;}i:1344;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"替换，' '不替换。 ";}i:2;i:50506;}i:1345;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:50531;}i:1346;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:50531;}i:1347;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:" 　　使用下面trap命令可以使程序在接收到挂起、中断或kill信号时，首先把临时文件删除，然后退出: ";}i:2;i:50533;}i:1348;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:50667;}i:1349;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:50667;}i:1350;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"　　　　trap ";}i:2;i:50669;}i:1351;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:50686;}i:1352;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"rm $TEMPDIR/* $$;exit";}i:2;i:50687;}i:1353;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:50708;}i:1354;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" 1 2 15 ";}i:2;i:50709;}i:1355;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:50717;}i:1356;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:50717;}i:1357;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:545:"　　在上面例子中，当Shell读取trap命令时，首先对$TEMPDIR和$$进行变量替换，替换之后的命令串将被保存在trap表中，若上例中trap命令使用单引号时，trap命令执行时候，不进行变量替换，而把命令串　rm 
 $TEMPDIR/* 
 $$;exit　放到trap表中，当检测到信号时，程序解释执行trap表中的命令串，此时进行变量替换。前面变量$TEMPDIR和$$的值为执行trap指令时候的值，后一种情况中变量的值为程序接收到信号时候的值，所以 
";}i:2;i:50719;}i:1358;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:51264;}i:1359;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"、'一定要区分仔细。 ";}i:2;i:51265;}i:1360;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51294;}i:1361;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51294;}i:1362;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" 　　下面命令的含义为用户按二次中断键后，程序才终止: ";}i:2;i:51296;}i:1363;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51374;}i:1364;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51374;}i:1365;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"　　　　trap 'trap 2' 2 ";}i:2;i:51376;}i:1366;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51404;}i:1367;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51404;}i:1368;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:304:"　　一般trap命令中的命令串中几乎都包含exit语句，上面rm的例子若无exit语句，接收到信号rm命令执行完后程序将挂起。但有时用户也需要程序在接到信号后挂起，例如当终端和系统断开后，用户发出挂起信号，并执行空命令,如下: ";}i:2;i:51406;}i:1369;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51710;}i:1370;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51710;}i:1371;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"　　　　trap : 1 ";}i:2;i:51712;}i:1372;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51733;}i:1373;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51733;}i:1374;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:"　　若用户想取消前trap指令设置的命令串，可以再执行trap命令，在命令中不指定命令串表示接收到信号后进行默认的操作，命令如下: 
　　　　trap 1 ";}i:2;i:51735;}i:1375;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51933;}i:1376;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51933;}i:1377;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"规范Shell ";}i:2;i:51935;}i:1378;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51947;}i:1379;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51947;}i:1380;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"获取UNIX类型的选项: ";}i:2;i:51949;}i:1381;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51976;}i:1382;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51976;}i:1383;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:"　　unix有一个优点就是标准UNIX命令在执行时都具有相同的命令行格式: ";}i:2;i:51978;}i:1384;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52072;}i:1385;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52072;}i:1386;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"　　command -options parameters ";}i:2;i:52074;}i:1387;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52108;}i:1388;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52108;}i:1389;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:172:"　　如果在执行Shell程序也采用上述格式，Bourne 
 Shell中提供了一条获取和处理命令行选项的语句，即getopts语句。该语句的格式为: ";}i:2;i:52110;}i:1390;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52282;}i:1391;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52282;}i:1392;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"　　getopts option_string variable ";}i:2;i:52284;}i:1393;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52321;}i:1394;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52321;}i:1395;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:430:"　　其中option_string中包含一个有效的单字符选项。若getopts命令在命令行中发现了连字符，那么它将用连字符后面的字符同option_string相比较。若有匹配，则把变量variable的值设为该选项。若无匹配，则variable设为?。当getopts发现连字符后面没有字符，会返回一个非零的状态值。Shell程序中可以利用getopts的返回值建立一个循环。 ";}i:2;i:52323;}i:1396;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52753;}i:1397;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52753;}i:1398;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:983:" 　　下面代码说明了date命令中怎么使用getopts命令处理各种选项，该程序除了完成unix的标准命令date的功能外，还增加了许多新的选项。 
 　　#新date程序 
 　　if [ $# -lt 1 ] 
　　then 
　　　　date 
　　else 
　　　　while getopts mdyDHMSTJjwahr OPTION 
　　　　do 
　　　　　　case $OPTION 
　　　　　　in 
　　　　　　　　m)date '+%m';; 
　　　　　　　　d)date '+%d';; 
　　　　　　　　y)date '+%y';; 
　　　　　　　　D)date '+%D';; 
　　　　　　　　H0date '+%H';; 
　　　　　　　　M)date '+%M';; 
　　　　　　　　S)date '+%S';; 
　　　　　　　　T)date '+%T';; 
　　　　　　　　j)date '+%j';; 
　　　　　　　　J)date '+%y%j';; 
　　　　　　　　w)date '+%w';; 
　　　　　　　　a)date '+%a';; 
　　　　　　　　h)date '+%h';; 
　　　　　　　　r)date '+%r';; 
　　　　　　　　\?)echo ";}i:2;i:52755;}i:1399;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:53738;}i:1400;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"无效的选项!$OPTION";}i:2;i:53739;}i:1401;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:53762;}i:1402;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:";; 
　　　　　　esac 
　　　　done 
　　fi ";}i:2;i:53763;}i:1403;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:53818;}i:1404;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:53818;}i:1405;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:413:"有时侯选项中还带一个值，getopts命令同样也支持这一功能。这时需要在option_string中选项字母后加一个冒号。当getopts命令发现冒号后，会从命令行该选项后读取该值。若该值存在，那么将被存在一个特殊的变量OPTARG中。如果该值不存在，getopts命令将在OPTARG中存放一个问号，并且在标准错误输出上显示一条消息。 ";}i:2;i:53820;}i:1406;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:54233;}i:1407;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:54233;}i:1408;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:177:" 　　下面的例子，实现拷贝一个文件，并给文件赋一个新的名字。-c选项指定程序拷贝的次数，-v选项要求显示新创建文件的文件名。 ";}i:2;i:54235;}i:1409;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:54412;}i:1410;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:54412;}i:1411;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" 　　#";}i:2;i:54414;}i:1412;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:54422;}i:1413;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"拷贝程序 ";}i:2;i:54424;}i:1414;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:54437;}i:1415;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:54437;}i:1416;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:214:" 　　COPIES=1 
　　VERBOSE=N 
　　while getopts vc:OPTION 
　　do 
　　　　case $OPTION 
　　　　in 
　　　　　　c)COPIES=$OPTARG;; 
　　　　　　v)VERBOSE=Y;; 
　　　　　　\?)echo ";}i:2;i:54439;}i:1417;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:54653;}i:1418;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"无效参数!";}i:2;i:54654;}i:1419;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:54667;}i:1420;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:"
　　　　　　　 exit 1;; 
　　　　esac 
　　done 
　　if [ $OPTIND -gt $# ] 
　　then 
　　　　echo ";}i:2;i:54668;}i:1421;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:54790;}i:1422;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"No file name specified";}i:2;i:54791;}i:1423;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:54813;}i:1424;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:329:"
　　 　 exit 2 
　　fi 
　　shift 'expr $OPTIND - 1' 
　　FILE=$1 
　　COPY=0 
　　while [ $COPIES -gt $COPY ] 
　　do 
　　　　COPY='expr $COPY + 1' 
　　　　cp $FILE $ {FILE} $ {COPY} 
　　　　if [ VERBOSE = Y } 
　　　　then 
　　　　　　echo ${FILE} $ {COPY} 
　　　　fi 
　　done ";}i:2;i:54814;}i:1425;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55144;}i:1426;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55144;}i:1427;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"规范Shell: ";}i:2;i:55146;}i:1428;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55159;}i:1429;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55159;}i:1430;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:"　　我们知道环境变量PS1是提示符,看下面程序chdir: 
　　if [ ! -d ";}i:2;i:55161;}i:1431;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:55246;}i:1432;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$!";}i:2;i:55247;}i:1433;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:55249;}i:1434;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" ] 
　　then 
　　　　echo ";}i:2;i:55250;}i:1435;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:55283;}i:1436;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"$1 is not a directory";}i:2;i:55284;}i:1437;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:55305;}i:1438;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"
　　　　exit 1 
　　fi 
　　cd $1 
　　PS1=";}i:2;i:55306;}i:1439;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:55361;}i:1440;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"'pwd'>";}i:2;i:55362;}i:1441;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:55368;}i:1442;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"
　　export PS1 ";}i:2;i:55369;}i:1443;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55388;}i:1444;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55388;}i:1445;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"　　我们执行: ";}i:2;i:55390;}i:1446;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55410;}i:1447;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55410;}i:1448;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"　　 　$chdir /usr/ice666 ";}i:2;i:55412;}i:1449;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55441;}i:1450;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55441;}i:1451;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"　　结果提示符号变成/usr/ice666>了吗？没有，为什么? ";}i:2;i:55443;}i:1452;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55514;}i:1453;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55514;}i:1454;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:462:"　　原因在于:chdir在子Shell中执行，变量PS1的修改在当前Shell中也不会起作用，若要chdir完成意想中的功能，必须在当前Shell中执行该命令。最好的方法就是把其改成一个函数并且在.profile文件中定义。但若要把函数放到单个文件中并在当前Shell中执行，则需要使用 
. 命令，并将chdir重写成一个函数，把其中的exit改写成return。下面代码是 
.ice_ps的内容: ";}i:2;i:55516;}i:1455;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55978;}i:1456;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55978;}i:1457;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"　　#";}i:2;i:55980;}i:1458;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:55987;}i:1459;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"提示符 
 　　chdir() 
　　{ 
　　if [ !-d ";}i:2;i:55989;}i:1460;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:56040;}i:1461;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"$1";}i:2;i:56041;}i:1462;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:56043;}i:1463;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" ] 
　　then 
　　　　echo ";}i:2;i:56044;}i:1464;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:56077;}i:1465;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" $1 is not a directory";}i:2;i:56078;}i:1466;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:56100;}i:1467;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"
　　　　return 
　　fi 
　　cd $1 
　　PS1=";}i:2;i:56101;}i:1468;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:56156;}i:1469;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"'pwd'>";}i:2;i:56157;}i:1470;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:56163;}i:1471;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"
　　export PS1; 
　　} ";}i:2;i:56164;}i:1472;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:56193;}i:1473;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:56193;}i:1474;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:"　　然后我们在.profile文件中加入下面语句 ";}i:2;i:56195;}i:1475;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:56252;}i:1476;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:56252;}i:1477;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" 　　.ice_ps ";}i:2;i:56254;}i:1478;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:56269;}i:1479;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:56269;}i:1480;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:128:"　　然后在切换目录的时候，我们用chdir命令，结果是什么呢，自己实验好了! 
　 
 调试Shell程序 ";}i:2;i:56271;}i:1481;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:56399;}i:1482;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:56399;}i:1483;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"1>调试shell程序 ";}i:2;i:56401;}i:1484;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:56421;}i:1485;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:56421;}i:1486;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:310:" 　　用户刚编写完Shell程序中，不可避免的会有错误，这时我们可以利用Bsh中提供的跟踪选项，该选项会显示刚刚执行的命令及参数。用户可以通过set命令打开-x选项或在启动Shell使用-x选项将Shell设置成跟踪模式。例如有下面代码ice_tx: ";}i:2;i:56423;}i:1487;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:56733;}i:1488;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:56733;}i:1489;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"　　if [ $# -eq 0 ] 
　　then 
　　　　echo ";}i:2;i:56735;}i:1490;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:56787;}i:1491;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"usage:sumints integer list";}i:2;i:56788;}i:1492;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:56814;}i:1493;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:"
　　　　exit 1 
　　fi 
　　sum=0 
　　until [ $# -eq 0 ] 
　　do 
　　　　sum='expr $sum + $1' 
　　　　shift 
　　done 
　　echo $sum ";}i:2;i:56815;}i:1494;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:56977;}i:1495;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:56977;}i:1496;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:"　　我们用跟踪模式运行: ";}i:2;i:56979;}i:1497;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:57014;}i:1498;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:57014;}i:1499;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:306:"　　$sh -x ice_tx 2 3 4 
　　结果显示: 
　　+[ 3 -eq 0 ] 
　　+sum=0 
　　+[ 3 -eq 0 ] 
　　+expr 0+2 
　　+sum=2 
　　+shift 
　　+[ 2 -eq 0 ] 
　　+expr 2+3 
　　+sum=5 
　　+shift 
　　+[ 1 -eq 0 ] 
　　+expr 5+4 
　　+sum=9 
　　+[ 0 -eq 0 ] 
　　+echo 9 
　　9 ";}i:2;i:57016;}i:1500;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:57322;}i:1501;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:57322;}i:1502;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:185:"　　从上面可以看出，跟踪模式下Shell显示执行的每一条命令以及该命令使用的变量替换后的参数值。一些控制字如if、then、until等没显示。 ";}i:2;i:57324;}i:1503;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:57509;}i:1504;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:57509;}i:1505;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"2>命令分组 ";}i:2;i:57511;}i:1506;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:57526;}i:1507;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:57526;}i:1508;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:" 　　Shell中若干命令可以组成一个单元一起执行。为了标识一组命令，这些命令必须放到";}i:2;i:57528;}i:1509;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:57645;}i:1510;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"()";}i:2;i:57646;}i:1511;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:57648;}i:1512;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"或";}i:2;i:57649;}i:1513;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:57652;}i:1514;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"{}";}i:2;i:57653;}i:1515;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:57655;}i:1516;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"中。放在";}i:2;i:57656;}i:1517;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:57668;}i:1518;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"()";}i:2;i:57669;}i:1519;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:57671;}i:1520;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"中的命令将在子Shell中运行，而放在";}i:2;i:57672;}i:1521;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:57719;}i:1522;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"{}";}i:2;i:57720;}i:1523;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:57722;}i:1524;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:158:"中的命令将在当前Shell中运行。子Shell中运行的命令不影响当前Shell的变量。当前Shell中运行的命令影响当前Shell的变量。 ";}i:2;i:57723;}i:1525;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:57881;}i:1526;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:57881;}i:1527;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:196:" 　　$NUMBER=2 
　　$(A=2;B=2;NUMBER='expr $A+$B';echo $NUMBER) 
　　结果为:4 
　　$echo $NUMBER 
　　结果为:2 
　　如果把上面的()变成{}，结果会是怎么样的呢？ ";}i:2;i:57883;}i:1528;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:58079;}i:1529;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:58079;}i:1530;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"3>使用Shell分层管理器shl ";}i:2;i:58081;}i:1531;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:58113;}i:1532;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:58113;}i:1533;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:308:"　　UNIX是一个多道程序设计的操作系统，一些UNIX系统利用这一特性提供了Shell层次管理器shl。使用shl用户一次可以打开多个层次的Shell，其中活跃的Shell可以从终端上获得输入。但所有Shell的输出都可在终端上显示，除非显示被禁止。 ";}i:2;i:58115;}i:1534;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:58423;}i:1535;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:58423;}i:1536;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:181:" 　　多个Shell中有一个为shl,当用户在某个Shell中工作时，可以通过使用特殊字符(一般为Ctrl+z)返回shl。为了同其他Shell区别，shl中提示符为";}i:2;i:58425;}i:1537;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:58606;}i:1538;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:">>";}i:2;i:58607;}i:1539;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:">";}i:2;i:58609;}i:1540;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:58610;}i:1541;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:"。当用户工作在Shell层次管理器中时，可以创建、激活和删除Shell，下面是shl中使用的命令。 ";}i:2;i:58611;}i:1542;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:58733;}i:1543;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:58733;}i:1544;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:428:" 　　create name　　　　产生名为name的层次 
 　　delete name　　　　删除名为name的层次 
 　　block name　　　　 禁止名为name的层次的输出 
 　　unblock name　　　 恢复名为name的层次的输出 
 　　resume name　　　　激活名为name的层次 
 　　toggle　　　　　　 激活近来经常使用的层次 
 　　name　　　　　　　 激活名为name的层次 ";}i:2;i:58735;}i:1545;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59163;}i:1546;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59163;}i:1547;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:" 　　layers [-l] name　 
 对于表中的每个层次，显示其正在运行的进程的进程号，-l选项要求显示详细信息。 ";}i:2;i:59165;}i:1548;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59305;}i:1549;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59305;}i:1550;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:" 　　help 　　　　　　　显示shl命令的帮助信息 
 　　quit　　　　　　　 退出shl以及所有被激活的层次 ";}i:2;i:59307;}i:1551;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59445;}i:1552;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59445;}i:1553;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" 总结 ";}i:2;i:59447;}i:1554;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59455;}i:1555;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59455;}i:1556;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:469:" 　　在前面我们主要介绍了sh的变量、基本语法、程序设计等。如果掌握了这些内容，在学习其他UNIX下编程语言的时候，相信有一定的好处，我们说了，在大多数的UNIX中都提供Bourn 
 Shell，而且很少有象sh这样强大的脚本编辑语言了，是系统管理员和程序员的一笔财富，并且不需要额外的软件环境，对文件等处理借助unix命令，实现起来比c实现还要简单。";}i:2;i:59457;}i:1557;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59457;}i:1558;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:59457;}}