
<h2 class="sectionedit1" id="using_tickets">Using Tickets</h2>
<div class="level2">

<p>
SINCE 1.4.0
</p>

</div>
<!-- EDIT1 SECTION "Using Tickets" [1-38] -->
<h3 class="sectionedit2" id="creating_standard_tickets">Creating Standard Tickets</h3>
<div class="level3">

<p>
Standard tickets can be created using the web ui. These ticket types include Bug, Enhancement, task, and Question.
</p>

</div>
<!-- EDIT2 SECTION "Creating Standard Tickets" [39-190] -->
<h3 class="sectionedit3" id="creating_a_proposal_ticket">Creating a Proposal Ticket</h3>
<div class="level3">

<p>
Proposal tickets are created by pushing a single commit to the magic ref. They can not be created from the web ui.
</p>

<p>
Why is there a single commit limitation for creating a Proposal Ticket?
</p>

<p>
Because the ticket which will be created for your commit will use your commit&#039;s message to define the Ticket&#039;s title and description. After the ticket is created, you can add as many commits as you want to the ticket&#039;s branch.
</p>

<p>
Why would I create a proposal ticket?
</p>

<p>
Because you are too lazy to create a ticket in the web ui first. The proposal ticket is a convenience mechanism. It allows you to propose a change using Git, not your browser.
</p>

<p>
Who can create a proposal ticket?
</p>

<p>
Any authenticated user who can clone your repository.
</p>
<pre class="code">git clone https://server/r/repo.git
cd repo
git checkout -b mytopic
...add a single commit...
git push origin HEAD:refs/for/new
# read ticket id from server output
git branch --set-upstream-to=origin/ticket/{id}</pre>

</div>
<!-- EDIT3 SECTION "Creating a Proposal Ticket" [191-1176] -->
<h3 class="sectionedit4" id="creating_the_first_patchset_for_an_existing_ticket">Creating the first Patchset for an Existing Ticket</h3>
<div class="level3">

<p>
If you have an existing ticket that does not yet have a proposed patchset you can push using the ticket branch ref.
</p>

<p>
Who can create the first patchset for an existing ticket?
</p>

<p>
Any authenticated user who can clone your repository.
</p>
<pre class="code">git clone https://server/r/repo.git
cd repo
git checkout -b ticket/{id}
...add one or more commits...
git push --set-upstream origin ticket/{id}</pre>

</div>
<!-- EDIT4 SECTION "Creating the first Patchset for an Existing Ticket" [1177-1627] -->
<h3 class="sectionedit5" id="safely_adding_commits_to_a_patchset_for_an_existing_ticket">Safely adding commits to a Patchset for an Existing Ticket</h3>
<div class="level3">

<p>
Who can add commits to an existing patchset?
</p>
<ol>
<li class="level1"><div class="li"> The ticket author</div>
</li>
<li class="level1"><div class="li"> The initial patchset author</div>
</li>
<li class="level1"><div class="li"> The person set as responsible</div>
</li>
<li class="level1"><div class="li"> Any user with write (RW) permissions to the repository</div>
</li>
</ol>
<pre class="code">git fetch &amp;&amp; git checkout ticket/{id}
git pull --ff-only
...add one or more commits...
git push</pre>

</div>
<!-- EDIT5 SECTION "Safely adding commits to a Patchset for an Existing Ticket" [1628-1999] -->
<h3 class="sectionedit6" id="rewriting_a_patchset_amend_rebase_squash">Rewriting a Patchset (amend, rebase, squash)</h3>
<div class="level3">

<p>
Who can rewrite a patchset?
</p>

<p>
See the above rules for who can add commits to a patchset. You do not need rewind (RW+) to the repository to push a non-fast-forward patchset. Gitblit will detect the non-fast-forward update and create a new patchset ref. This preserves the previous patchset.
</p>
<pre class="code">git fetch &amp;&amp; git checkout ticket/{id}
git pull --ff-only
...amend, rebase, squash...
git push origin HEAD:refs/for/{id}</pre>

<p>
OR if you have RW+ permissions, then you can push using -f flag.
</p>
<pre class="code">git push -f</pre>

<p>
Updating your copy of a rewritten Patchset
</p>

<p>
If a patchset has been rewritten you can no longer simply pull to update. Let&#039;s assume your checkout does not have any unshared commits - i.e. it represents the previous patchset. The simplest way to update your branch to the current patchset is to reset it.
</p>
<pre class="code">git fetch &amp;&amp; git checkout ticket/{id}
git reset --hard origin/ticket/{id}</pre>

<p>
If you do have unshared commits then you&#039;ll could make a new temporary branch and then cherry-pick your changes onto the rewritten patchset.
</p>
<pre class="code">git branch oldticket ticket/{id}
git fetch &amp;&amp; git checkout ticket/{id}
git reset --hard origin/ticket/{id}
git cherry-pick &lt;commitid1&gt; &lt;commitid2&gt;
git branch -D oldticket</pre>

<p>
Git is a very flexible tool, there are no doubt several other strategies you could use to resolve this situation. The above solution is just one way.
</p>

</div>
<!-- EDIT6 SECTION "Rewriting a Patchset (amend, rebase, squash)" [2000-3443] -->
<h3 class="sectionedit7" id="ticket_refspecs">Ticket RefSpecs</h3>
<div class="level3">

<p>
Gitblit supports two primary push ref specs: the magic ref and the patchset ref.
</p>

</div>

<h4 id="to_create_a_new_proposal_ticket">to create a new proposal ticket</h4>
<div class="level4">
<div class="table sectionedit8"><table class="inline">
	<tr class="row0">
		<th class="col0 leftalign">ref                    </th><th class="col1 leftalign"> description                              </th>
	</tr>
	<tr class="row1">
		<td class="col0 leftalign">refs/for/new           </td><td class="col1 leftalign"> new proposal for the default branch      </td>
	</tr>
	<tr class="row2">
		<td class="col0 leftalign">refs/for/default       </td><td class="col1 leftalign"> new proposal for the default branch      </td>
	</tr>
	<tr class="row3">
		<td class="col0 leftalign">refs/for/{branch}      </td><td class="col1 leftalign"> new proposal for the specified branch    </td>
	</tr>
</table></div>
<!-- EDIT8 TABLE [3591-3866] -->
</div>

<h4 id="to_add_a_proposal_patchset_first_patchset_to_an_existing_ticket">to add a proposal patchset (first patchset) to an existing ticket</h4>
<div class="level4">
<div class="table sectionedit9"><table class="inline">
	<tr class="row0">
		<th class="col0 leftalign">ref                       </th><th class="col1 leftalign">description                                    </th>
	</tr>
	<tr class="row1">
		<td class="col0 leftalign">refs/for/{id}             </td><td class="col1 leftalign">add new patchset to an existing ticket          </td>
	</tr>
</table></div>
<!-- EDIT9 TABLE [3944-4098] -->
</div>
<!-- EDIT7 SECTION "Ticket RefSpecs" [3444-4099] -->
<h3 class="sectionedit10" id="to_add_commits_to_an_existing_patchset">to add commits to an existing patchset</h3>
<div class="level3">
<div class="table sectionedit11"><table class="inline">
	<tr class="row0">
		<th class="col0 leftalign">ref                        </th><th class="col1 leftalign">description                         </th>
	</tr>
	<tr class="row1">
		<td class="col0 leftalign">refs/heads/ticket/{id}     </td><td class="col1 leftalign">fast-forward an existing patchset   </td>
	</tr>
</table></div>
<!-- EDIT11 TABLE [4149-4284] -->
</div>
<!-- EDIT10 SECTION "to add commits to an existing patchset" [4100-4285] -->
<h3 class="sectionedit12" id="to_rewrite_a_patchset_amend_rebase_squash">to rewrite a patchset (amend, rebase, squash)</h3>
<div class="level3">
<div class="table sectionedit13"><table class="inline">
	<tr class="row0">
		<th class="col0 leftalign">magic ref                   </th><th class="col1 leftalign">description             </th>
	</tr>
	<tr class="row1">
		<td class="col0 leftalign">refs/for/{id}               </td><td class="col1 leftalign"> to rewrite a patchset   </td>
	</tr>
</table></div>
<!-- EDIT13 TABLE [4342-4454] -->
</div>
<!-- EDIT12 SECTION "to rewrite a patchset (amend, rebase, squash)" [4286-4455] -->
<h3 class="sectionedit14" id="ticket_refspec_tricks">Ticket RefSpec Tricks</h3>
<div class="level3">

<p>
Gitblit supports setting some ticket fields from the push refspec.
refs/for/master%topic=bug/42,r=james,m=1.4.1,cc=dave,cc=mark
</p>
<div class="table sectionedit15"><table class="inline">
	<tr class="row0">
		<th class="col0 leftalign">parameter       </th><th class="col1 leftalign"> description                                                      </th>
	</tr>
	<tr class="row1">
		<td class="col0 leftalign">t               </td><td class="col1 leftalign">assign a topic to the ticket (matched against bugtraq config)     </td>
	</tr>
	<tr class="row2">
		<td class="col0 leftalign">r               </td><td class="col1 leftalign">set the responsible user                                          </td>
	</tr>
	<tr class="row3">
		<td class="col0 leftalign">m  </td><td class="col1 leftalign">set the milestone for patchset integration  </td>
	</tr>
	<tr class="row4">
		<td class="col0 leftalign">cc  </td><td class="col1 leftalign">add this account to the watch list (multiple ccs allowed)  </td>
	</tr>
</table></div>
<!-- EDIT15 TABLE [4618-4995] -->
</div>

<h4 id="examples">examples</h4>
<div class="level4">

<p>
Create a new patchset for ticket 12, add james and mark to the watch list, and set the topic to JIRA-123 which will be regex-matched against the repository bugtraq configuration.
</p>
<pre class="code">git push origin HEAD:refs/for/12%cc=james,cc=mark,t=JIRA-123</pre>

<p>
Add some commits (fast-forward) to ticket 12. Set the milestone to 1.4.1.
</p>
<pre class="code">git push origin HEAD:refs/heads/ticket/12%m=1.4.1</pre>

</div>
<!-- EDIT14 SECTION "Ticket RefSpec Tricks" [4456-5408] -->
<h3 class="sectionedit16" id="merging_patchsets">Merging Patchsets</h3>
<div class="level3">

<p>
The Gitblit web ui offers a merge button which should work but is not fully tested. Gitblit does verify that you can cleanly merge a patchset to the integration branch.
</p>

<p>
There are complicated merge scenarios for which it may be best to merge using your Git client. There are several ways to do this, here is a safe merge strategy which pulls into a new branch and then fast-forwards your integration branch, assuming you were happy with the pull (merge).
</p>
<pre class="code">git pull origin master
git checkout -b ticket-{id} master
git pull origin ticket/{id}
git checkout master
git merge ticket-{id}
git push origin master
git branch -d ticket-{id}</pre>

</div>
<!-- EDIT16 SECTION "Merging Patchsets" [5409-6084] -->
<h3 class="sectionedit17" id="closing_tickets_on_push_with_a_completely_new_patchset">Closing Tickets on Push with a Completely New Patchset</h3>
<div class="level3">

<p>
Gitblit will look for patchset references on pushes to normal branches. If it finds a reference (like would be found in the previous merge instructions), the ticket is resolved as merged and everyone is notified.
</p>

<p>
If you do not need to create a patchset for review, you can just push a commit to the integration branch that contains fixes #1 or closes #1 in the commit message. Gitblit will identify the ticket, create a new patchset with that commit as the tip, and resolve the ticket as merged. (And if the integration branch is not specified in the ticket - this is the case for a ticket without any existing patchsets - Gitblit will resolve the ticket as merged to the pushed branch).
</p>

</div>
<!-- EDIT17 SECTION "Closing Tickets on Push with a Completely New Patchset" [6085-6838] -->
<h3 class="sectionedit18" id="reopening_tickets_with_patchsets">Reopening Tickets with Patchsets</h3>
<div class="level3">

<p>
Gitblit allows you to reopen a Ticket with a merged patchset. Since Gitblit allows patchset rewrites and versions patchsets, this seems like a logical capability. There is no need to create another ticket for a feature request or bug report if the merged commits did not actually resolve the ticket.
</p>

<p>
This allows you to continue the discussion and create a new patchset that hopefully resolves the need.
</p>

<p>
NOTE: There is one caveat to this feature. You can not push patchsets to a closed ticket; Gitblit will reject the push. You must first reopen the ticket through the web ui before you may push your patchset update or new patchset.
</p>

</div>
<!-- EDIT18 SECTION "Reopening Tickets with Patchsets" [6839-7516] -->
<h3 class="sectionedit19" id="reviews">Reviews</h3>
<div class="level3">

<p>
Gitblit includes a very simple patchset scoring mechanism. Gitblit is not code-review system, but for those who have simple needs, this may suffice.
•+2, approved: patchset can be merged
•+1, looks good: someone else must approve for merge
•-1, needs improvement: please do not merge
•-2, vetoed: patchset may not be merged
</p>

<p>
Only users with write (RW) permissions to the repository can give a +2 and -2 score. All other users are allowed to score +/-1. If the repository is configured to require approval then then +2 score has an important meaning. The merge button will only be shown if there is at least one +2 score and no -2 scores. If there is a -2 score, the merge is blocked by the web ui. Users with RW permissions, however, can still manually merge and push the patchset to the integration branch; Gitblit does not enforce vetoed patchsets on push.
</p>

<p>
Reviews and Updated or Rewritten Patchsets
</p>

<p>
If the patchset is updated or rewritten, all former review scores are ignored; review scores apply to specific revisions of patchsets - they are not blanket approvals/disapprovals.
</p>

</div>
<!-- EDIT19 SECTION "Reviews" [7517-] -->