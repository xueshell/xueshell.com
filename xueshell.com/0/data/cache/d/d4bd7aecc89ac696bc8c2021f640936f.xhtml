
<p>
在做shell批处理程序时候，经常会涉及到字符串相关操作。有很多命令语句，如：awk,sed都可以做字符串各种操作。 其实shell内置一系列操作符号，可以达到类似效果，大家知道，使用内部操作符会省略启动外部程序等时间，因此速度会非常的快。
</p>

<p>
一、判断读取字符串值
</p>
<pre class="code bash">    表达式 	        含义
&nbsp;
    <span class="co1">${var}</span> 	        变量var的值, 与<span class="re1">$var</span>相同
    <span class="co1">${var-DEFAULT}</span> 	如果var没有被声明, 那么就以<span class="re1">$DEFAULT</span>作为其值 <span class="sy0">*</span>
    <span class="co1">${var:-DEFAULT}</span> 	如果var没有被声明, 或者其值为空, 那么就以<span class="re1">$DEFAULT</span>作为其值 <span class="sy0">*</span>
&nbsp;
    <span class="co1">${var=DEFAULT}</span> 	如果var没有被声明, 那么就以<span class="re1">$DEFAULT</span>作为其值 <span class="sy0">*</span>
    <span class="co1">${var:=DEFAULT}</span> 	如果var没有被声明, 或者其值为空, 那么就以<span class="re1">$DEFAULT</span>作为其值 <span class="sy0">*</span>
&nbsp;
    <span class="co1">${var+OTHER}</span> 	如果var声明了, 那么其值就是<span class="re1">$OTHER</span>, 否则就为null字符串
    <span class="co1">${var:+OTHER}</span> 	如果var被设置了, 那么其值就是<span class="re1">$OTHER</span>, 否则就为null字符串
&nbsp;
    <span class="co1">${var?ERR_MSG}</span> 	如果var没被声明, 那么就打印<span class="re1">$ERR_MSG</span> <span class="sy0">*</span>
    <span class="co1">${var:?ERR_MSG}</span> 	如果var没被设置, 那么就打印<span class="re1">$ERR_MSG</span> <span class="sy0">*</span>
&nbsp;
    <span class="co1">${!varprefix*}</span> 	匹配之前所有以varprefix开头进行声明的变量
    <span class="co1">${!varprefix@}</span> 	匹配之前所有以varprefix开头进行声明的变量
&nbsp;</pre>

<p>
加入了“*”  不是意思是： 当然, 如果变量var已经被设置的话, 那么其值就是$var.
</p>
<pre class="code bash">    <span class="br0">&#91;</span>chengmo<span class="sy0">@</span>localhost ~<span class="br0">&#93;</span>$ <span class="kw3">echo</span> <span class="co1">${abc-'ok'}</span>
    ok
    <span class="br0">&#91;</span>chengmo<span class="sy0">@</span>localhost ~<span class="br0">&#93;</span>$ <span class="kw3">echo</span> <span class="re1">$abc</span>
&nbsp;
    <span class="br0">&#91;</span>chengmo<span class="sy0">@</span>localhost ~<span class="br0">&#93;</span>$ <span class="kw3">echo</span> <span class="co1">${abc='ok'}</span>
    ok
    <span class="br0">&#91;</span>chengmo<span class="sy0">@</span>localhost ~<span class="br0">&#93;</span>$ <span class="kw3">echo</span> <span class="re1">$abc</span>
    ok</pre>
<pre class="code">  如果abc 没有声明“=&quot; 还会给abc赋值。</pre>
<pre class="code bash">    <span class="br0">&#91;</span>chengmo<span class="sy0">@</span>localhost ~<span class="br0">&#93;</span>$ <span class="re2">var1</span>=<span class="nu0">11</span>;<span class="re2">var2</span>=<span class="nu0">12</span>;<span class="re2">var3</span>=
    <span class="br0">&#91;</span>chengmo<span class="sy0">@</span>localhost ~<span class="br0">&#93;</span>$ <span class="kw3">echo</span> <span class="co1">${!v@}</span>           
    var1 var2 var3
    <span class="br0">&#91;</span>chengmo<span class="sy0">@</span>localhost ~<span class="br0">&#93;</span>$ <span class="kw3">echo</span> <span class="co1">${!v*}</span>
    var1 var2 var3</pre>
<pre class="code">  ${!varprefix*}与${!varprefix@}相似，可以通过变量名前缀字符，搜索已经定义的变量,无论是否为空值。</pre>

<p>
二、字符串操作（长度，读取，替换）
</p>
<pre class="code bash">    表达式                	含义
&nbsp;
    <span class="co1">${#string}</span> 	                <span class="re1">$string</span>的长度
    <span class="co1">${string:position}</span>   	在<span class="re1">$string</span>中, 从位置<span class="re1">$position</span>开始提取子串
    <span class="co1">${string:position:length}</span> 	在<span class="re1">$string</span>中, 从位置<span class="re1">$position</span>开始提取长度为<span class="re1">$length</span>的子串
&nbsp;
    <span class="co1">${string#substring}</span> 	从变量<span class="re1">$string</span>的开头, 删除最短匹配<span class="re1">$substring</span>的子串
    <span class="co1">${string##substring}</span> 	从变量<span class="re1">$string</span>的开头, 删除最长匹配<span class="re1">$substring</span>的子串
    <span class="co1">${string%substring}</span> 	从变量<span class="re1">$string</span>的结尾, 删除最短匹配<span class="re1">$substring</span>的子串
    <span class="co1">${string%%substring}</span> 	从变量<span class="re1">$string</span>的结尾, 删除最长匹配<span class="re1">$substring</span>的子串
&nbsp;
    <span class="co1">${string/substring/replacement}</span> 	使用<span class="re1">$replacement</span>, 来代替第一个匹配的<span class="re1">$substring</span>
    <span class="co1">${string//substring/replacement}</span> 	使用<span class="re1">$replacement</span>, 代替所有匹配的<span class="re1">$substring</span>
    <span class="co1">${string/#substring/replacement}</span> 	如果<span class="re1">$string</span>的前缀匹配<span class="re1">$substring</span>, 那么就用<span class="re1">$replacement</span>来代替匹配到的<span class="re1">$substring</span>
    <span class="co1">${string/%substring/replacement}</span> 	如果<span class="re1">$string</span>的后缀匹配<span class="re1">$substring</span>, 那么就用<span class="re1">$replacement</span>来代替匹配到的<span class="re1">$substring</span>
&nbsp;
&nbsp;
说明：<span class="st0">&quot;* <span class="es2">$substring</span>”可以是一个正则表达式.</span></pre>
<pre class="code">  1.长度</pre>
<pre class="code bash">    <span class="br0">&#91;</span>web97<span class="sy0">@</span>salewell97 ~<span class="br0">&#93;</span>$ <span class="re2">test</span>=<span class="st_h">'I love china'</span>
    <span class="br0">&#91;</span>web97<span class="sy0">@</span>salewell97 ~<span class="br0">&#93;</span>$ <span class="kw3">echo</span> <span class="co1">${#test}</span>
    <span class="nu0">12</span></pre>
<pre class="code">  ${#变量名}得到字符串长度</pre>
<pre class="code">  2.截取字串</pre>
<pre class="code">  [chengmo@localhost ~]$ test=&#039;I love china&#039;
  [chengmo@localhost ~]$ echo ${test:5}    
  e china
  [chengmo@localhost ~]$ echo ${test:5:10}
  e china</pre>
<pre class="code">  ${变量名:起始:长度}得到子字符串</pre>
<pre class="code">  3.字符串删除</pre>
<pre class="code">  [chengmo@localhost ~]$ test=&#039;c:/windows/boot.ini&#039;
  [chengmo@localhost ~]$ echo ${test#/}
  c:/windows/boot.ini
  [chengmo@localhost ~]$ echo ${test#*/}
  windows/boot.ini
  [chengmo@localhost ~]$ echo ${test##*/}
  boot.ini</pre>
<pre class="code">  [chengmo@localhost ~]$ echo ${test%/*}
  c:/windows
  [chengmo@localhost ~]$ echo ${test%%/*}</pre>
<pre class="code">  ${变量名#substring正则表达式}从字符串开头开始配备substring,删除匹配上的表达式。</pre>
<pre class="code">  ${变量名%substring正则表达式}从字符串结尾开始配备substring,删除匹配上的表达式。</pre>
<pre class="code">  注意：${test##*/},${test%/*} 分别是得到文件名，或者目录地址最简单方法。</pre>
<pre class="code">  4.字符串替换</pre>
<pre class="code">  [chengmo@localhost ~]$ test=&#039;c:/windows/boot.ini&#039;
  [chengmo@localhost ~]$ echo ${test/\//\\}
  c:\windows/boot.ini
  [chengmo@localhost ~]$ echo ${test//\//\\}
  c:\windows\boot.ini</pre>
<pre class="code">  ${变量/查找/替换值} 一个“/”表示替换第一个，”//”表示替换所有,当查找中出现了：”/”请加转义符”\/”表示。</pre>

<p>
三、性能比较
</p>
<pre class="code">  在shell中，通过awk,sed,expr 等都可以实现，字符串上述操作。下面我们进行性能比较。</pre>
<pre class="code">  [chengmo@localhost ~]$ test=&#039;c:/windows/boot.ini&#039;                      
  [chengmo@localhost ~]$ time for i in $(seq 10000);do a=${#test};done;           </pre>
<pre class="code">  real    0m0.173s
  user    0m0.139s
  sys     0m0.004s</pre>
<pre class="code">  [chengmo@localhost ~]$ time for i in $(seq 10000);do a=$(expr length $test);done;      </pre>
<pre class="code">  real    0m9.734s
  user    0m1.628s</pre>
<pre class="code">  速度相差上百倍，调用外部命令处理，与内置操作符性能相差非常大。在shell编程中，尽量用内置操作符或者函数完成。使用awk,sed类似会出现这样结果。</pre>

<p>
分类: linux
</p>
