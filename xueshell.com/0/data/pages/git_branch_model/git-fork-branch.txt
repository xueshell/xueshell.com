======Forking Workflow======

The Forking Workflow is fundamentally different than the other workflows discussed in this tutorial. Instead of using a single server-side repository to act as the “central” codebase, it gives every developer a server-side repository. This means that each contributor has not one, but two Git repositories: a private local one and a public server-side one.

<fc #0000EE>复刻分支流程和其他三个分支流程完全不同。相对于其他三个流程都用了单一的中央项目库不同，复刻分支模式给了每个开发者都有有一个相对于其他开发者是中心的项目仓库。 每个开发者都有两个仓库：一个是私有本地仓库，另一个是公开的中心仓库。</fc>

{{ :git_branch_model:git-workflows-forking.png | Git Workflows: Forking}}

The main advantage of the Forking Workflow is that contributions can be integrated without the need for everybody to push to a single central repository. Developers push to their own server-side repositories, and only the project maintainer can push to the official repository. This allows the maintainer to accept commits from any developer without giving them write access to the official codebase.

<fc #0000EE>复刻流程主要特点是可以随时合并集成代码到中央库。开发者提交代码到他们自己的中央项目库，只有项目的维护者可以提交代码到官方项目中央库。这样允许项目管理员可以接受那些没有对官方仓库有写权限的人贡献代码。</fc>

The result is a distributed workflow that provides a flexible way for large, organic teams (including untrusted third-parties) to collaborate securely. This also makes it an ideal workflow for open source projects.

=====流程介绍=====

As in the other Git workflows, the Forking Workflow begins with an official public repository stored on a server. But when a new developer wants to start working on the project, they do not directly clone the official repository.

<fc #0000EE>开始项目时，并不直接克隆仓库。</fc>

Instead, they fork the official repository to create copy of it on the server. This new copy serves as their personal public repository—no other developers are allowed to push to it, but they can pull changes from it (we’ll see why this is important in a moment). After they have created their server-side copy, the developer performs a git clone to get a copy of it onto their local machine. This serves as their private development environment, just like in the other workflows.

<fc #0000EE>相反，工程师复刻官方仓库。新拷贝作为工程师个人的公开仓库，但是其他人不能提交。</fc>


When they're ready to publish a local commit, they push the the commit to their own public repository—not the official one. Then, they file a pull request with the main repository, which lets the project maintainer know that an update is ready to be integrated. The pull request also serves as a convenient discussion thread if there are issues with the contributed code.

To integrate the feature into the official codebase, the maintainer pulls the contributor’s changes into their local repository, checks to make sure it doesn’t break the project, merges it into his local master branch, then pushes the master branch to the official repository on the server. The contribution is now part of the project, and other developers should pull from the official repository to synchronize their local repositories.

====项目官方仓库====

It’s important to understand that the notion of an “official” repository in the Forking Workflow is merely a convention. From a technical standpoint, Git doesn’t see any difference between each developer’s public repository and the official one. In fact, the only thing that makes the official repository so official is that it’s the public repository of the project maintainer.

<fc #0000EE>在复刻模式中官方仓库只是一个约定的说法。从技术观点看，Git认为每个开发者的公共库和所谓的官方库没有区别。所以，官方库只所以叫官方，它是项目维护者管理的库。</fc>

====复刻流程中的分支=====

All of these personal public repositories are really just a convenient way to share branches with other developers. Everybody should still be using branches to isolate individual features, just like in the Feature Branch Workflow and the Gitflow Workflow. The only difference is how those branches get shared. In the Forking Workflow, they are pulled into another developer’s local repository, while in the Feature Branch and Gitflow Workflows they are pushed to the official repository.

<fc #0000EE>各开发者的共享仓库只是为了方便地与其他开发者协作代码开发。每个开发者依然要用分支隔离开发每个功能，就像在任务分支模式和Gitflow模式中一样。有点区别是如何协作代码开发。复刻模式中，协作的代码被pull进另外一个开发者的本地私有仓库，在任务分支模式和Gitflow模式中，代码是push到中央项目仓库。</fc>



=====实例演示=====

====项目管理员初始化官方项目库====

{{ :git_branch_model:git-workflows-forking-1.png |Forking Workflow: Shared Repository}}

As with any Git-based project, the first step is to create an official repository on a server accessible to all of the team members. Typically, this repository will also serve as the public repository of the project maintainer.

<fc #0000EE>项目管理员首先初始化一个官方的仓库，供所有项目成员获取基线版本代码。这个库就是项目管理员维护的共享库。</fc>

Public repositories should always be bare, regardless of whether they represent the official codebase or not. So, the project maintainer should run something like the following to set up the official repository:

<fc #0000EE>共享库应该用bare参数创建：</fc>

<code>
ssh user@host
git init --bare /path/to/repo.git
</code>

Bitbucket and Stash also provide a convenient GUI alternative to the above commands. This is the exact same process as setting up a central repository for the other workflows in this tutorial. The maintainer should also push the existing codebase to this repository, if necessary.
Developers fork the official repository

<fc #0000EE>创建完官方项目库后，项目管理员将基线代码push进仓库，如有必要，开发者复刻官方项目库:</fc>


{{ :git_branch_model:git-workflows-forking-2.png |Forking Workflow: Forking the official repository.}}

Next, all of the other developers need to fork this official repository. It’s possible to do this by SSH’ing into the server and running git clone to copy it to another location on the server—yes, forking is basically just a server-side clone. But again, Bitbucket and Stash let developers fork a repository with the click of a button.

After this step, every developer should have their own server-side repository. Like the official repository, all of these should be bare repositories.

====开发者克隆他们复刻的官方项目仓库====

{{ :git_branch_model:git-workflows-forking-3.png |Forking Workflow: Cloning the forked repositories}}

Next each developer needs to clone their own public repository. They can do with the familiar git clone command.

<fc #0000EE>下一步，每个开发者需要克隆他们复刻的项目官方库。</fc>


Our example assumes the use of Bitbucket to host these repositories. Remember, in this situation, each developer should have their own Bitbucket account and they should clone their server-side repository using:

<fc #0000EE>我们的实例假设用Bitbucket去托管这项共享库，每个开发者都在Bitbucket上有个一个共享的仓库：</fc>

<code>
git clone https://user@bitbucket.org/user/repo.git
</code>

Whereas the other workflows in this tutorial use a single origin remote that points to the central repository, the Forking Workflow requires two remotes—one for the official repository, and one for the developer’s personal server-side repository. While you can call these remotes anything you want, a common convention is to use origin as the remote for your forked repository (this will be created automatically when you run git clone) and upstream for the official repository.

<fc #0000EE>在其他流程中，每个开发者只有一个远程中央项目仓库origin，但是，复刻开发流程中至少需要两个远程仓库，一个是开发者个人的共享库，一个是官方项目库。一般把你的共享库叫origin，执行git clone会自动设置，把官方项目库叫做upstream。</fc>

<code>
git remote add upstream https://bitbucket.org/maintainer/repo

</code>

You’ll need to create the upstream remote yourself using the above command. This will let you easily keep your local repository up-to-date as the official project progresses. Note that if your upstream repository has authentication enabled (i.e., it's not open source), you'll need to supply a username, like so:

<fc #0000EE>你需要git remote 设置upstream跟踪远端官方项目库。这样做，方便你本地私有库与远端官方库的更新。</fc>

<code>
git remote add upstream https://user@bitbucket.org/maintainer/repo.git
</code>
This requires users to supply a valid password before cloning or pulling from the official codebase.

====开发者在本地任务分支开发开发====

{{ :git_branch_model:git-workflows-forking-4.png |Forking Workflow: Developers work on features}}

In the local repositories that they just cloned, developers can edit code, commit changes, and create branches just like they did in the other workflows:


<fc #0000EE>在开发者克隆的本地仓库里，开发者可以编码，提交，创建分支：</fc>

<code>
git checkout -b some-feature
# Edit some code
git commit -a -m "Add first draft of some feature"
</code>

All of their changes will be entirely private until they push it to their public repository. And, if the official project has moved forward, they can access new commits with git pull:

<fc #0000EE>这些代码在开发者提交到自己的共享库之前，存放在本地私有库里，如果官方项目库已经有新的提交了，开发者用git pull 去同步这些新代码：</fc>

<code>
git pull upstream master
</code>

Since developers should be working in a dedicated feature branch, this should generally result in a fast-forward merge.

<fc #0000EE>开发者都在专门的分支上编码，所以同步官方项目仓库会产生一个 FastForward的合并。</fc>
====开发者共享编写的代码====

{{ :git_branch_model:git-workflows-forking-5.png |Forking Workflow: Developers publish features}}

Once a developer is ready to share their new feature, they need to do two things. First, they have to make their contribution accessible to other developers by pushing it to their public repository. Their origin remote should already be set up, so all they should have to do is the following:

<fc #0000EE>一旦开发者准备共享他们的编写的代码，需要做两件事，提交自己的代码到开发者的共享库，方便其他开发者访问。</fc>

<code>
git push origin feature-branch

</code>

This diverges from the other workflows in that the origin remote points to the developer’s personal server-side repository, not the main codebase.

<fc #0000EE>这里就和其他流程不同了，这里提交代码不是中央项目库，而是开发者自己的共享库。</fc>


Second, they need to notify the project maintainer that they want to merge their feature into the official codebase. Bitbucket and Stash provide a “Pull request” button that leads to a form asking you to specify which branch you want to merge into the official repository. Typically, you’ll want to integrate your feature branch into the upstream remote’s master branch.

<fc #0000EE>另外，开发者需要提醒项目管理员，自己有代码想合并到官方项目基准代码库里,Bitbucket提供了pull request 按键，来询问开发者把那个分支的代码合并到官方项目库。典型的，开发者想合并自己共享库里分支新代码到官方项目库的master分支。</fc>

====项目管理员接收合并开发者的新代码====

{{ :git_branch_model:git-workflows-forking-6.png |
Forking Workflow: Integrate Features}}

When the project maintainer receives the pull request, their job is to decide whether or not to integrate it into the official codebase. They can do this in one of two ways:


1) Inspect the code directly in the pull request

2) Pull the code into their local repository and manually merge it

<fc #0000EE>当项目管理员收到pull request，他需要决定基线代码库是否要合并这些代码。

1）在pull request里直接评审代码，并合并；
2）把这些代码拉到管理员的本地库，他手动合并这些代码到项目基线库里。</fc>


The first option is simpler, as it lets the maintainer view a diff of the changes, comment on it, and perform the merge via a graphical user interface. However, the second option is necessary if the pull request results in a merge conflict. In this case, the maintainer needs to fetch the feature branch from the developer’s server-side repository, merge it into their local master branch, and resolve any conflicts:

<fc #0000EE>第一选项简单，项目管理员查看pull request里代码的差异，写出评审，通过图形界面就合并了开发者提交的代码。
如果qull request发生了合并冲突，需要执行第二个选项，在项目管理员的本地仓库合并代码。 在本演示实例中，项目管理员需要先从开发者的共享库里fetch代码，在本地合并代码到主干分支，然后解决冲突：</fc>

<code>
git fetch https://bitbucket.org/user/repo feature-branch
# Inspect the changes
git checkout master
git merge FETCH_HEAD

</code>

Once the changes are integrated into their local master, the maintainer needs to push it to the official repository on the server so that other developers can access it:

<fc #0000EE>代码合并到本地的master分支后，项目管理员push 合并后的代码到官方项目库，其他开发者也能访问：</fc>

<code>
git push origin master
</code>

Remember that the maintainer's origin points to their public repository, which also serves as the official codebase for the project. The developer's contribution is now fully integrated into the project.

<fc #0000EE>项目管理员的origin指向的共享库也是官方的代码基准哭。 开发者的贡献现在完全集成到项目库中去了。</fc>
====开发者同步官方项目库====

{{ :git_branch_model:git-workflows-forking-7.png |Forking Workflow: Synchronize with the official repository
}}

Since the main codebase has moved forward, other developers should synchronize with the official repository:

<fc #0000EE>官方项目库代码基线向前移动后，其他的开发者应该及时同步官方项目新基线到本地主干。</fc>
<code>
git pull upstream master
</code>

=====Where To Go From Here=====

If you’re coming from an SVN background, the Forking Workflow may seem like a radical paradigm shift. But don’t be afraid—all it’s really doing is introducing another level of abstraction on top of the Feature Branch Workflow. Instead of sharing branches directly though a single central repository, contributions are published to a server-side repository dedicated to the originating developer.

This article explained how to a contribution flows from one developer into the official master branch, but the same methodology can be used to integrate a contribution into any repository. For example, if one part of your team is collaborating on a particular feature, they can share changes amongst themselves in the exact same manner—without touching the main repository.

This makes the Forking Workflow a very powerful tool for loosely-knit teams. Any developer can easily share changes with any other developer, and any branch can be efficiently merged into the official codebase.
