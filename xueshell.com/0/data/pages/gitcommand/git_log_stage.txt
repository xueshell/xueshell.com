
====git log 日常用法====
  * 只是显示sha版本号和commit log
<code>
root@blog-test002 gitant.com]#  git log --oneline --graph
* 21b5cb7  backup
* 4e26248  backup
* bb993a7  backup
* 7162f48  new data
* 9aec2d2  today
* 20bbe70  back
</code>


  * 只显示近两次的更新
我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：
<code>
$ git log -p -2
</code>
  * git 一行查看日志
<code>
$ git log --pretty=oneline
</code>
----
====git log 常用参数====
<code>
$ git log v2.5..        # commits since (not reachable from) v2.5
$ git log test..master  # commits reachable from master but not test
$ git log master..test  # commits reachable from test but not master
$ git log master...test # commits reachable from either test or
                        #    master, but not both
$ git log --since="2 weeks ago" # commits from the last 2 weeks
$ git log Makefile      # commits that modify Makefile
$ git log fs/           # commits that modify any file under fs/
$ git log -S'foo()'     # commits that add or remove any file data
                        # matching the string 'foo()'
$ git log --no-merges   # dont show merge commits
</code>

-----
====git log 很好的参数组合====
非常好的例子，可以作为别名存入配置文件。
<code>
git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' 
</code>
结果如下:
<code>
[root@blog-test002 gitant.com]# git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' 
* 21b5cb7 - (HEAD, origin/master, origin/HEAD, github/master, master)  backup (33 minutes ago) <Your Name>
* 4e26248 -  backup (4 hours ago) <Your Name>
* bb993a7 -  backup (2 days ago) <Your Name>
* 7162f48 -  new data (3 days ago) <Your Name>
* 9aec2d2 -  today (2 weeks ago) <Your Name>
* 20bbe70 -  back (2 weeks ago) <Your Name>
* 87591e4 -  back (2 weeks ago) <Your Name>
* f9062b3 -  git category (3 weeks ago) <Your Name>
* b196945 -  modify permission (4 weeks ago) <Your Name>
</code>

----
 ====git 如何查看某一版本文件的内容？====

翻看某一文件的历史，如何查看旧版本文件的内容呢？


  * 用 git show 查看某版本文件的内容


 首先找到版本号；
<code bash>
	
git log -3   file_name   # 选择文件后3次提交的历史版本记录

</code>

找到file_name后3次提交的历史记录，确定要看第三次的提交时，file_name的文件内容；

<code bash>
	
git show cb712ee517b3e9a702:path/to/file  # 版本号：目录下文件
</code>

用git show  哈希值:文件目录/文件的模式查看内容， 文件是不包括仓库名的绝对目录。



  * 用 git cat-file 查看某版本的文件内容


<code bash>
	
git log del_sina_svn_usr.sh  # 查看del_sina_svn_usr.sh文件的日志，找到老版本号 cb712ee517b3e9a702a23b8
</code>

读出老版本的提交内容
<code>
	
# git cat-file -p cb712ee517b3e9a702a23b8
tree 8dbd87bcada6f5ac8ece519a098be9d076889e6e
parent a28eb2ad366bb42187d972fb6b9fcf99b78a447c
author Your Name <you@example.com> 1370417409 +0800
committer Your Name <you@example.com> 1370417409 +0800
</code>

找到文件del_sina_svn_usr.sh 实体的哈希值

<code bash>	
git ls-tree 8dbd87bcada6f5ac8ece519a
100644 blob dfba7afb79b6c5fb86c161e65b5afaa9d02fdb6e    del_sina_svn_usr.sh
</code>
查看老版本文件的内容

<code>
	
git cat-file -p dfba7afb79b6c5fb86c161e65b5afaa9d02fdb6
</code>

----
====git log 查看每次提交变更的文件清单？====

查看文件变更清单
<code>
git log -p shows the complete patch for each commit it lists,
while these options summarize the changes in different ways:
$ git log --name-status
$ git log --stat
</code>
----
====git log 图示版本演进====
<code>
git log --graph --pretty=oneline --abbrev-commit
</code>