=====shift=====
shift命令会重新分配位置参数，其实就是把所有的位置参数都向左移动一个位置。

比如shift 3表示原来的$4现在变成$1，原来的$5现在变成$2等等，原来的$1、$2、$3丢弃，$0不移动。不带参数的shift命令相当于shift 1。
我们知道，对于位置变量或命令行参数，其个数必须是确定的，或者当 Shell 程序不知道其个数时，可以把所有参数一起赋值给变量$*。若用户要求 Shell 在不知道位置变量个数的情况下，还能逐个的把参数一一处理，也就是在 $1 后为 $2,在 $2 后面为 $3 等。在 shift 命令执行前变量 $1 的值在 shift 命令执行后就不可用了。
<code bash>


    #!/bin/bash  
    # 使用'shift'来逐步存取所有的位置参数.   
      
    #  给脚本命个名, 比如shft,  
    #+ 然后给脚本传递一些位置参数, 比如:   
    #          ./shft a b c def 23 skidoo  
      
    until [ -z "$1" ]  # 直到所有的位置参数都被存取完...  
    do  
      echo "第一个参数为: $1 参数个数为: $#"  
      shift  
    done  
      
    echo --------------  
      
    exit 0  
</code>

然后执行

<code bash>

    # sh ./shft a b c def 23 skidoo  



    第一个参数为: a 参数个数为: 6  
    第一个参数为: b 参数个数为: 5  
    第一个参数为: c 参数个数为: 4  
    第一个参数为: def 参数个数为: 3  
    第一个参数为: 23 参数个数为: 2  
    第一个参数为: skidoo 参数个数为: 1  
    --------------  
</code>

从上可知 shift 命令每执行一次，变量的个数($#)减一，而变量值提前一位。

下面代码用 until 和 shift 命令计算所有命令行参数的和。

<code bash>

    #!/bin/bash  
    #shift 上档命令的应用(shft2.sh)  
    if [ $# -eq 0 ]  
    then  
    echo "Usage:shift2.sh 参数"  
    exit 1  
    fi  
    sum=0  
    until [ $# -eq 0 ]  
    do  
    sum=`expr $sum + $1`  
    shift  
    done  
    echo "sum is: $sum"  
</code>
然后执行

<code bash>

    # sh shft2.sh 10 20 30  
    sum is: 60  
</code>

Shift 命令还有另外一个重要用途, Bash 定义了9个位置变量，从 $1 到 $9,这并不意味着用户在命令行只能使用9个参数，借助 shift 命令可以访问多于9个的参数。Shift 命令一次移动参数的个数由其所带的参数指定。例如当 shell 程序处理完前九个命令行参数后，可以使用 shift 9 命令把 $10 移到 $1。