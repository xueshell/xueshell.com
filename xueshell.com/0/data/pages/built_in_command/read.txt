<code bash>
cat $1 | sed -e 's/>/?\/g' | grep ''<a' | while IFS='"' read a b c
do echo $b
done
</code>


=====Shell中read的选项及用法  =====


1. Read的一些选项

　Read可以带有-a, -d, -e, -n, -p, -r, -t, 和 -s八个选项。

-a ：将内容读入到数值中

echo -n "Input muliple values into an array:"
read -a array
echo "get ${#array[@]} values in array"

-d ：表示delimiter，即定界符，一般情况下是以IFS为参数的间隔，但是通过-d，我们可以定义一直读到出现执行的字符位置。例如read –d madfds value，读到有m的字符的时候就不在继续向后读，例如输入为 hello m，有效值为“hello”，请注意m前面的空格等会被删除。这种方式可以输入多个字符串，例如定义“.”作为结符号等等。

-e ：只用于互相交互的脚本，它将readline用于收集输入行。读到这几句话不太明白什么意思，先跳过。

-n ：用于限定最多可以有多少字符可以作为有效读入。例如echo –n 4 value1 value2，如果我们试图输入12 34，则只有前面有效的12 3，作为输入，实际上在你输入第4个字符‘3’后，就自动结束输入。这里结果是value为12，value2为3。

-p ：用于给出提示符，在前面的例子中我们使用了echo –n “…“来给出提示符，可以使用read –p ‘… my promt?’value的方式只需一个语句来表示。

-r ：在参数输入中，我们可以使用’/’表示没有输入完，换行继续输入，如果我们需要行最后的’/’作为有效的字符，可以通过-r来进行。此外在输入字符中，我们希望/n这类特殊字符生效，也应采用-r选项。

-s ：对于一些特殊的符号，例如箭头号，不将他们在terminal上打印，例如read –s key，我们按光标，在回车之后，如果我们要求显示，即echo，光标向上，如果不使用-s，在输入的时候，输入处显示^[[A，即在terminal上 打印，之后如果要求echo，光标会上移。

-t ：用于表示等待输入的时间，单位为秒，等待时间超过，将继续执行后面的脚本，注意不作为null输入，参数将保留原有的值


2. Read的相关实例

a. 拼接文件

#将afile文件中的前三行与bfile中的前四行拼接在一起
<code>
while read -u3 i && read -u4 j;do
echo $i $j
done 3<afile 4<bfile
</code>

b. 输入不在终端显示
<code>
read -p "Input passwd:" -s Passwd
echo $Passwd
</code>

c. 限时输入,否则退出

#延迟五秒，没有输入将自动退出
<code>
read -p "Input a number:" -t 5 Number
</code>

d. 读取限定字符

#从输入中取5个字符
<code>
read -p "Input a word:" -n 5 Word
</code>
e. 等待输出q退出

#输入，直到输入q，将自动退出
read -dp -p "Input some words end with q:" word


=====read 基本读取=====

read命令 -n(不换行) -p(提示语句) -n(字符个数) -t(等待时间) -s(不回显)


 

1、基本读取

read命令接收标准输入（键盘）的输入，或其他文件描述符的输入（后面在说）。得到输入后，read命令将数据放入一个标准变量中。下面是read命令

的最简单形式::

<code>
#!/bin/bash

echo -n "Enter your name:"   //参数-n的作用是不换行，echo默认是换行

read  name                   //从键盘输入

echo "hello $name,welcome to my program"     //显示信息

exit 0                       //退出shell程序。

//********************************
</code>

由于read命令提供了-p参数，允许在read命令行中直接指定一个提示。

所以上面的脚本可以简写成下面的脚本::

<code>
#!/bin/bash

read -p "Enter your name:" name

echo "hello $name, welcome to my program"

exit 0
</code>

在上面read后面的变量只有name一个，也可以有多个，这时如果输入多个数据，则第一个数据给第一个变量，第二个数据给第二个变量，如果输入数据个数过多，则最后所有的值都给第一个变量。如果太少输入不会结束。

//*****************************************

在read命令行中也可以不指定变量.如果不指定变量，那么read命令会将接收到的数据放置在环境变量REPLY中。//

例如::

read -p "Enter a number"//

环境变量REPLY中包含输入的所有数据，可以像使用其他变量一样在shell脚本中使用环境变量REPLY.//

===2、计时输入 ===

使用read命令存在着潜在危险。脚本很可能会停下来一直等待用户的输入。如果无论是否输入数据脚本都必须继续执行，那么可以使用-t选项指定一个计时器。

-t选项指定read命令等待输入的秒数。当计时满时，read命令返回一个非零退出状态.    

<code>
#!/bin/bash

if read -t 5 -p "please enter your name:" name

then 

    echo "hello $name ,welcome to my script"

else

    echo "sorry,too slow"

fi

exit 0

</code>

除了输入时间计时，还可以设置read命令计数输入的字符。当输入的字符数目达到预定数目时，自动退出，并将输入的数据赋值给变量。   
<code>
#!/bin/bash

read -n1 -p "Do you want to continue [Y/N]?" answer

case $answer in

Y | y)

      echo "fine ,continue";;

N | n)

      echo "ok,good bye";;

*)

     echo "error choice";;

esac

exit 0
</code>

该例子使用了-n选项，后接数值1，指示read命令只要接受到一个字符就退出。只要按下一个字符进行回答，read命令立即接受输入并将其传给变量。无需按回车键。   

 

===3、默读（输入不显示在监视器上）===

有时会需要脚本用户输入，但不希望输入的数据显示在监视器上。典型的例子就是输入密码，当然还有很多其他需要隐藏的数据。 
-s选项能够使read命令中输入的数据不显示在监视器上（实际上，数据是显示的，只是read命令将文本颜色设置成与背景相同的颜色）。  

<code>
#!/bin/bash

read  -s  -p "Enter your password:" pass

echo "your password is $pass"

exit 0 
</code>

===4、读文件====

最后，还可以使用read命令读取Linux系统上的文件。

每次调用read命令都会读取文件中的"一行"文本。当文件没有可读的行时，read命令将以非零状态退出。

读取文件的关键是如何将文本中的数据传送给read命令。

最常用的方法是对文件使用cat命令并通过管道将结果直接传送给包含read命令的while命令

例子::
<code>
#!/bin/bash

count=1    //赋值语句，不加空格

cat test | while read line        //cat 命令的输出作为read命令的输入,read读到的值放在line中

do

   echo "Line $count:$line"

   count=$[ $count + 1 ]          //注意中括号中的空格。

done

echo "finish"

exit 0
</code>


====Linux shell -- read=====

概述：read命令 -d[输入结束字符，默认结束符是换行] 

                     -p("提示语句") 

                     -n[字符个数] 

                     -t(等待时间) 

                     -s(不回显) 

                     -a [数组名]

 

====1、基本读取====

read命令接收标准输入（键盘）的输入，或其他文件描述符的输入（后面在说）。得到输入后，read命令将数据放入一个标准变量中。下面是read命令

的最简单形式::
<code>
#!/bin/bash

echo -n "Enter your name:"   //参数-n的作用是不换行，echo默认是换行

read  name                   //从键盘输入

echo "hello $name,welcome to my program"     //显示信息

exit 0                       //退出shell程序。

//********************************
</code>
由于read命令提供了-p参数，允许在read命令行中直接指定一个提示。  
所以上面的脚本可以简写成下面的脚本::   
 
<code>

#!/bin/bash

read -p "Enter your name:" name

echo "hello $name, welcome to my program"

exit 0
</code>

在上面read后面的变量只有name一个，也可以有多个，这时如果输入多个数据，则第一个数据给第一个变量，第二个数据给第二个变量，如果输入数据个数过多，则最后所有的值都给第一个变量。如果太少输入不会结束。  
在read命令行中也可以不指定变量.如果不指定变量，那么read命令会将接收到的数据放置在环境变量REPLY中。   

例如::
<code>
read -p "Enter a number"
</code>

环境变量REPLY中包含输入的所有数据，可以像使用其他变量一样在shell脚本中使用环境变量REPLY.

====2、计时输入.====

使用read命令存在着潜在危险。脚本很可能会停下来一直等待用户的输入。如果无论是否输入数据脚本都必须继续执行，那么可以使用-t选项指定一个计时器。  

-t选项指定read命令等待输入的秒数。当计时满时，read命令返回一个非零退出状态;  

<code>
#!/bin/bash

if read -t 5 -p "please enter your name:" name

then 

    echo "hello $name ,welcome to my script"

else

    echo "sorry,too slow"

fi

exit 0
</code>

除了输入时间计时，还可以设置read命令计数输入的字符。当输入的字符数目达到预定数目时，自动退出，并将输入的数据赋值给变量。  

<code>
#!/bin/bash

read -n 1 -p "Do you want to continue [Y/N]?" answer

case $answer in

Y | y)

      echo "fine ,continue";;

N | n)

      echo "ok,good bye";;

*)

     echo "error choice";;

esac

exit 0
</code>

该例子使用了-n选项，后接数值1，指示read命令只要接受到一个字符就退出。只要按下一个字符进行回答，read命令立即

接受输入并将其传给变量。无需按回车键。

 

===3、默读（输入不显示在监视器上）====

有时会需要脚本用户输入，但不希望输入的数据显示在监视器上。典型的例子就是输入密码，当然还有很多其他需要隐藏的数据。   

-s选项能够使read命令中输入的数据不显示在监视器上（实际上，数据是显示的，只是read命令将文本颜色设置成与背景相同的颜色）。  

<code>
#!/bin/bash

read  -s  -p "Enter your password:" pass

echo "your password is $pass"

exit 0 
</code>

====4、读文件====

最后，还可以使用read命令读取Linux系统上的文件。

每次调用read命令都会读取文件中的"一行"文本。当文件没有可读的行时，read命令将以非零状态退出。

读取文件的关键是如何将文本中的数据传送给read命令。

最常用的方法是对文件使用cat命令并通过管道将结果直接传送给包含read命令的while命令

例子::

<code>
#!/bin/bash

count=1    //赋值语句，不加空格

cat test | while read line        //cat 命令的输出作为read命令的输入,read读到的值放在line中

do

   echo "Line $count:$line"

   count=$[ $count + 1 ]          //注意中括号中的空格。

done

echo "finish"

exit 0
</code>

====5、更改结束符====

-d[character] 指定结束输入的字符  d--delimiter分隔符，界定符

就是读取输入，直到某个字符出现为止，而不是转行结束。当然，“某个字符”不算进去。测试结果：
    1, 指定是某个字符后，回车也被读进去，而不会因回车结束
    2, -dstr 不会到str结束，是s结束，所以人家才说是character
    3, -dx str ;# str变量转了n行+输入字符 ; echo $str 并不会把转行输出来，要echo "$str" 才会转行。

====6、数组输入====
把输入内容按分隔符(空格或者跳格之类)分配给数组，连续的空格也算为1个分割。    输入后，数组规格跟c语言一样,用var[n]的格式表示，下标从0开始，    直接echo $var 的效果等于echo ${var[0]}    当echo 数组带下标的时候，记得加{}表达，比如echo ${a[1]}.

定义数组变量： read -a arr 就可以了;   
read -a arr[1] 出错。但是你直接 read arr[1] 是允许的，就是直接赋值数组某个元素。