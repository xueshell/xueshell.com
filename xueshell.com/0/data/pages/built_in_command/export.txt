shell 与 export命令

用户登录到Linux系统后，系统将启动一个用户shell。在这个shell中，可以使用shell命令

或声明变量，也可以创建并运行shell脚本程序。运行shell脚本程序时，系统将创建一个子shell。

此时，系统中将有两个shell，一个是登录时系统启动的shell，另一个是系统为运行脚本程序创建

的shell。当一个脚本程序运行完毕，脚本shell将终止，返回到执行该脚本之前的shell。

 

从这种意义上来说，用户可以有许多 shell，每个shell都是由某个shell（称为父shell）派生的。

在子shell中定义的变量只在该子shell内有效。如果在一个shell脚本程序中定义了一个变量，

当该脚本程序运行时，这个定义的变量只是该脚本程序内的一个局部变量，其他的shell不能引用它，

要使某个变量的值可以在其他shell中被改变，可以使用export命令对已定义的变量进行输出。

 

export命令将使系统在创建每一个新的shell时，定义这个变量的一个拷贝。

这个过程称之为变量输出。

［例］

在本例中，变量myfile是在dispfile脚本程序中定义的。

然后用export命令将变量myfile输出至任何子shell，例如当执行printfile脚本程序时产生的子shell。

dispfile脚本程序清单：

 <code bash>

myfile=”List”
export myfile
echo “Displaying $myfile”
pr –t –n $myfile
printfile

　
printfile脚本程序清单：

echo “Printing $myfile”
lpr $myfile&

 

运行结果：

$dispfile
Displaying List
1 screen
2 modem
3 paper
Printing List
$

 </code>

export 功能说明：设置或显示环境变量。 

语　　法：export [-fnp][变量名称]=[变量设置值]

补充说明：在shell中执行程序时，shell会提供一组环境变量。export可新增，修改或删除环境变量，供后续执行的程序使用。export的效力仅限于该次登陆操作。
    
参　　数：   \\
　-f 　代表[变量名称]中为函数名称。   \\
　-n 　删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。   \\
　-p 　列出所有的shell赋予程序的环境变量。 \\  

     

从学习export命令理解到的Shell环境和变量生存期

　<fc #800000>　最近在学习BASH的export命令时碰到了一个难道（书上说export是将自定义变量变成

系统环境变量）：我在一个脚本文件中定义一个了变量，然后export变量，按照我自己的想法，

执行完这个脚本后，在提示符下一定可以用echo显示出它的值，可结果却不是这样，脚本执行完后

用set根本看不到有这个变量存在。为什么呢？我百思不得其解，最后将问题贴出来，一位前辈告诉

我说用source+脚本文件就可以了，我试了一下果然可以，但一个新的问题又出来了。我将脚本中

export命令删除后，用source一样可以。那这个export好像没有什么用呀。</fc>

　　在经过多次尝试后发现了一些东西，是我自己猜的，如果有什么不对的地方，请指正，谢谢。

　　执行一个脚本时，会先开启一个子shell环境（不知道执行其它程序是不是这样），然后将父

shell中的所有系统环境变量复制过来，这个脚本中的语句就在子shell中执行。（也就是说父shell

的环境变量在子shell中可以调用，但反过来就不行，如果在子shell中定义了环境变量，只对该shell
或者它的子shell有效，当该子shell结束时，也可以理解为脚本执行完时，变量消失。）

为了证明这一点，请看脚本内容：
<code >

　　test='value'
　　export test
　　这样的脚本执行完后，test实际上是不存在的。接着看下面的：
　　test='value'
　　export test
　　bash
</code>

　　这里在脚本最后一行再开一个子shell，该shell应该是脚本文件所在shell的子shell，这个脚本

执行完后，是可以看到test这个变量的，因为现在是处于它的子shell中，当用exit退出子shell后，

test变量消失。

　　如果用source对脚本进行执行时，如果不加export，就不会在子shell中看到这个变量，

因为它还不是一个系统环境变量呀，如脚本内容是：
　　
    test='value'
　
　用source执行后，在shell下是能看到这个变量，但再执行bash开一个子shell时，test是不会

被复制到子shell中的，因为执行脚本文件其实也是在一个子shell中运行，所以我再建另一个脚本

文件执行时，是不会输入任何东西的，内容如：echo $test。所以这点特别注意了，明明在提示符

下可以用echo $test输出变量值，为什么把它放进脚本文件就不行了呢？

　　所以得出的结论是：\\

1、执行脚本时是在一个子shell环境运行的，脚本执行完后该子shell自动退出；\\

2、一个shell中的系统环境变量会被复制到子shell中（用export定义的变量）；\\

3、一个shell中的系统环境变量只对该shell或者它的子shell有效，该shell结束时变量消失\\
（并不能返回到父shell中）。

3、不用export定义的变量只对该shell有效，对子shell也是无效的。\\

 

整理了一下贴子：为什么一个脚本直接执行和用source执行不一行呢？这也是我自己碰到的一个问题。manual原文是这样的：

Read and execute commands from filename in the current shell environment and
return the exit status of the last command executed from filename.

明白了为什么不一样了吧？直接执行一个脚本文件是在一个子shell中运行的，而source则是在

当前shell环境中运行的。根据前面的内容，你也已经明白其中的道理了吧。