=====版本控制系统 =====

版本控制(Revision control)是一种软件工程技巧，籍以在开发的过程中，确保由不同人所编辑的同一档案都得到更新。 

版本控制透过文档控制（documentation control）记录程序各个模组的改动，并为每次改动编上序号。 
这种方法是工程图维护（maintenance of engineering drawings）的标准做法， 它伴随着工程图从图的诞生一直到图的定型。 
一种简单的版本控制形式，例如，赋给图的初版一个版本等级“A”。 
当做了第一次改变后，版本等级改为“B”，以此类推。 不仅存在着保存着工程图或者软件源代码的文本文件版本控制管理，而实际上，你可以对任何类型的文件进行版本控制。 
版本控制系统用于维护文件的所有版本，随着时间的推移，系统逐渐产生这些版本。 


使用版本控制系统，人们可以返回到各个文件以前的修订版本，还可以比较任意两个版本以查看它们之间的变化。 通过这种方式，版本控制可以保留一个文件修订的可检索的准确历史日志，甚至将整个项目都回退到过去某个时间点的状态。 
更重要的是，版本控制系统有助于多个人（甚至位于完全不同的地理位置）通过 Internet 或 专用网将各自的更改合并到同一个源存储库，从而协同开发项目。 而由此额外增加的工作量却微乎其微。 二、为什么要用版本控制 
如果没有版本控制工具的协助，在开发中我们经常会遇到下面的一些问题： 1) 代码管理混乱。 
如果是别人添加或删除一个文件，你很难发现。 没有办法对文件代码的修改追查跟踪。 
甚至出现文件丢失，或新版本代码被同伴无意覆盖等现象。 2) 解决代码冲突困难。 
当大家同时修改一个公共文件时，解决代码冲突是一件很头疼的事。 

最原始的办法是手工打开冲突文件，逐行比较，再手工粘贴复制。 
更高级的做法是使用文件比较工具，但仍省不了繁杂的手工操作，一不小心，甚至会引入新的bug。 3) 在代码整合期间引入深层BUG。 
例如开发者A写了一个公共函数，B觉得正好可以复用；后来A又对这个公共函数进行了修改，添加了新的逻辑，而这个改动的却是B不想要的。 
或者是A发现这个公共函数不够用，又新做了一个函数，B却没有及时获得通知。 
这些，都为深层BUG留下隐患。 4) 无法对代码的拥有者进行权限控制。 
代码完全暴露在所有的开发者面前，任何人都可以随意进行增、删、改操作，无法指定明确的人对代码进行负责。 特别是产品的开发，这是极其危险的。 5) 项目不同版本发布困难。 
特别是对产品的开发，你会频繁的进行版本发布，这时如果没有一个有效的管理产品版本的工具，一切将变得非常艰难。 

上面只是列举了一些没有版本控制系统可能带来的问题，特别是对大型项目和异地协同开发有了一个合适的版本控制工具，它可以有效解决因为代码版本不同引起的各种问题，让我们的开发人员能更多的把精力花费在开发上面。 而不是每次都花费很多时间进行代码整合和解决版本不同带来的各种问题。 

三、版本控制系统的发展历史

本地版本控制系统 
许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。 
这么做唯一的好处就是简单，不过坏处却不少：有时候会混淆所在的工作目录，弄错了文件丢了数据就没了退路。 为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。 
其中最流行的一种叫做 rcs，现今许多计算机系统上都还看得到它的踪影。 


甚至在流行的 Mac OS X 系统上安装了开发者工具包之后，也可以使用 rcs 命令。 
它的工作原理基本上就是保存并管理文件补丁。 
文件补丁是一种特定格式的文本文件，记录着对应文件修订前后的内容变化。所以，根据每次修订后的补丁，rcs 可以通过不断打补丁，计算出各个版本的文件内容。
集中化的版本控制系统 
接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？ 
于是，集中化的版本控制系统（ Centralized Version Control Systems，简称 CVCS ）应运而生。 
这类系统，诸如 CVS，Subversion 以及 Perforce 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。 
多年以来，这已成为版本控制系统的标准做法。 
这种做法带来了许多好处，特别是相较于老式的本地 VCS 来说。 

